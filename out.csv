tangro;Будущее WebAssembly в виде «дерева навыков»;https://habr.com//ru/company/infopulse/blog/428347/;"Некоторые люди как-то неправильно поняли WebAssembly. Есть те, кто считает, что раз браузеры уже поддерживают выполнение WebAssembly (ещё с 2017 года), значит всё уже готово. Даже и близко ещё нет, готов лишь MVP (минимально жизнеспособный продукт). Я могу предположить откуда произрастает корень этого заблуждения: после релиза MVP его разработчики пообещали поддерживать обратную совместимость на уровне «любой написанный сейчас код будет работать и в будущем». Но это ведь не значит, что разработка WebAssembly закончена, совсем нет! Множество фич разрабатывается прямо сейчас и планируется к разработке в ближайшем будущем. И когда они будут реализованы — всё очень сильно изменится.  Все эти фичи можно попробовать представить себе в виде дерева навыков в какой-нибудь игре. У нас есть пару «базовых» (уже реализованные фичи) и целое дерево со множеством веток и листьев, которые будут со временем открываться, давая нам всё больше и больше могущества.  Давайте посмотрим на то, что у нас уже есть сейчас и что нам ещё предстоит открыть. (Под катом много картинок, трафик)"
tangro;Компилируем С\С++ код в WebAssembly;https://habr.com//ru/company/infopulse/blog/273957/;"WebAssembly — это новый бинарный формат, в который могут быть скомпилированы веб-приложения. Он проектируется и реализуется прямо в тот момент, когда вы читаете эти строки и двигают его вперёд разработчики всех основных браузеров. Всё меняется очень быстро! В этой статье мы покажем текущее состояние проекта с достаточно глубоким погружением в инструментарий по работе с WebAssembly.  Для того, чтобы WebAssembly заработал, нам нужны две основных компоненты: инструменты для сборки кода в бинарник формата WebAssembly и браузеры, способные этот бинарник загрузить и выполнить. И то, и другое ещё не полностью создано и очень сильно зависит от завершения работы на спецификацией WebAssembly, но в общем-то это отдельные компоненты и их развитие идёт параллельно. Это разделение — хорошая вещь, оно позволит компиляторам создавать WebAssembly-приложения, способные работать в любом браузере, а браузерам — запускать WebAssembly-программы не зависимо от того, каким компилятором они были созданы. Другими словами — мы получаем открытую конкуренцию инструментов разработки и браузеров, что непрерывно будет двигать всё это вперёд, принося конечному пользователю отличный выбор. Кроме того, такое разделение позволяет командам разработчиков инструментария и браузеров работать параллельно и независимо.  Новый проект на стороне инструментарий WebAssembly, о котором я хочу сегодня рассказать, называется Binaryen. Binaryen это библиотека для поддержки WebAssembly в компиляторах, написанная на С++. Если вы лично не работаете над компилятором WebAssembly, то вам, вероятно, не нужно напрямую знать что-либо о Binaryen. Если вы используете какой-нибудь компилятор WebAssembly, то он, возможно, под капотом использует Binaryen — мы рассмотрим примеры ниже."
spmbt;Раскрываем тему WebAssembly с Бренданом Айком;https://habr.com//ru/post/326276/;"(Прим. перев.: технологии asm.js и WebAssembly ещё не вышли в практическую плоскость, о них регулярно идут сдержанные сигналы с самых верхов Олимпа разработки веб-технологий (Mozilla, Microsoft, Google), но многие об их состоянии знают мало. Значит, самое время — узнать о них сейчас.  Представлено интервью Брендана Айка, сделанное 31 марта 2017 года Оно — на 1.5 часа, но 2-я половина — про проект браузера Brave, не относится к компиляторам JS), создателя Javascript и журналистов из SE Daily."
nzeemin;Знакомство с WebAssembly;https://habr.com//ru/post/342180/; Эта статья основана на моём выступлении на ITSubbotnik, прошедшем в Рязани 14 октября 2017 года. На русском пока что довольно мало материала на эту тему, надеюсь что статья будет вам полезна. Disclaimer: Автор не является экспертом ни в WebAssembly, ни в JavaScript. Данная статья есть компиляция мыслей и идей, полученных из выступлений других людей на данную тему, плюс эпизодического опыта изучения WebAssembly в течение нескольких месяцев.
AndreyNagih;Разработка под WebAssembly: реальные грабли и примеры;https://habr.com//ru/company/jugru/blog/441140/;"  Анонс WebAssembly состоялся в 2015-м — но сейчас, спустя годы, всё ещё немногие могут похвастаться им в продакшне. Тем ценнее материалы о подобном опыте: информация из первых рук о том, каково с этим жить на практике, пока что в дефиците.  На конференции HolyJS доклад об опыте использования WebAssembly получил высокие оценки зрителей, и теперь специально для Хабра подготовлена текстовая версия этого доклада (видеозапись также приложена)."
m1rko;Стандарт WASI: запуск WebAssembly за пределами веба;https://habr.com//ru/post/446764/;"27 марта мы в Mozilla объявили о начале стандартизации WASI, системного интерфейса WebAssembly (WebAssembly system interface).  Зачем: разработчики начали применять WebAssembly за пределам браузера, потому что WASM обеспечивает быстрый, масштабируемый, безопасный способ запуска одинакового кода на всех машинах. Но у нас пока нет прочного фундамента для такой разработки. Вне браузера нужен некий способ общения с системой, то есть системный интерфейс. А у платформы WebAssembly его пока нет.  Что: WebAssembly — это ассемблер для концептуальной, а не физической машины. Он работает на различных архитектурах, поэтому и системный интерфейс нужен для концептуальной ОС, чтобы работать на разных операционных системах.  Вот что такое WASI: это системный интерфейс для платформы WebAssembly."
sergeyZ;Blazor: Server и WebAssembly одновременно в одном приложении;https://habr.com//ru/post/546414/;" ASP.NET Core Blazor — это разработанная Microsoft веб-платформа, предназначенная для запуска на стороне клиента в браузере на основе WebAssembly (Blazor WebAssembly) или на стороне сервера в ASP.NET Core (Blazor Server), но две эти модели нельзя использовать одновременно. Подробнее о моделях размещения написано в документации. В статье я расскажу о том, как  запустить Server и WebAssembly одновременно в одном приложении, переключаться с Server на WebAssembly без перезагрузки приложения, реализовать универсальный механизм аутентификации, синхронизировать состояние Server и WebAssembly с помощью gRPC.  TL;DR:  Gif с демонстрацией полученного результата   Пример доступен на github."
greebn9k;WebAssembly: начало новой эры;https://habr.com//ru/post/261205/;Веб ожидает большое будущее. Вчера Брендан Айк “взорвал” сообщество веб-разработки: веб получит новый низкоуровневый бинарный компилируемый формат, который будет работать гораздо лучше, чем JavaScript.Google, Microsoft, Mozilla, а также несколько независимых специалистов работают над новым проектом в W3C WebAssembly Community Group, и то, над чем они работают, совсем не маленькая вещь.
ru_vds;WebAssembly – путь к новым горизонтам производительности;https://habr.com//ru/company/ruvds/blog/319834/;"Если вы – из тех программистов, которые в новогоднюю ночь пообещали себе писать более быстрый код, сегодня у вас есть шанс это обещание выполнить. Мы поговорим о том, как ускорить работу веб-решений с использованием технологии WebAssembly (сокращённо её называют wasm). Технология это очень молодая, сейчас – пора её становления, однако, она вполне может оказать серьёзное влияние на будущее разработки для интернета.   Здесь я расскажу о том, как создавать модули WebAssembly, как с ними работать, как вызывать их из клиентского кода в браузере так, будто это модули, написанные на JS. Мы рассмотрим два набора реализаций алгоритма поиска чисел Фибоначчи. Один из них представлен обычными JavaScript-функциями, второй – написан на C и преобразован в модуль WebAssembly. Это позволит сравнить производительность wasm и JS при решении схожих задач."
nzeemin;WebAssembly: что и как;https://habr.com//ru/post/475778/; Эта статья основана на моём выступлении на конференции ITSubbotnik, прошедшем 2 ноября 2019 года в Москве. Вообще я бэкенд программист, но меня заинтересовала эта технология, она позволяет использовать мои знания бэкенда на фронте. Проблема Начнём с проблемы, которая решается этой (относительно новой) технологией. Проблема эта — быстро исполнять код в браузере. Быстро — это значит, «быстрее чем JavaScript», в идеале настолько быстро, насколько позволяет имеющийся у нас процессор.
m1rko;WebAssembly — это возвращение апплетов Java и Flash?;https://habr.com//ru/post/418653/;В последней статье по WebAssembly я сделал следующее утверждение: Некоторые сравнивают WebAssembly с Java-апплетами. В определённом смысле они правы, но с другой стороны сильно ошибаются. Как-нибудь я напишу статью о различиях, но пока поговорим о сходстве. В некотором смысле WebAssembly — иной способ выполнения того, для чего предназначалась JVM: это обычная виртуальная машина для кроссплатформенного ПО. Многие люди выразили заинтересованность в этой теме, так что давайте рассмотрим её подробнее! В этой статье сравним WebAssembly с тремя технологиями: Flash, Java-апплеты и немножко с PNaCL. Кроме того, статья сосредоточиться на использовании в вебе, хотя раньше мы рассматривали варианты использования WebAssembly в офлайне. Но о таком сравнении поговорим позже. Наконец, эта статья похожа на поедание тапаса [испанская закуска из множества разных компонентов — прим. пер.], здесь куча маленьких разделов. Мне кажется, она слегка коротковата, но в то же время я пытаюсь вести блог, а если продолжать её расширять, то это займёт вечность, так что извините.
ru_vds;Как работает JS: особенности и сфера применения WebAssembly;https://habr.com//ru/company/ruvds/blog/343568/;Сегодня мы представляем вам шестую часть серии материалов, которые посвящены особенностям работы всего того, что связано с JavaScript. Здесь мы поговорим о WebAssembly. А именно, детально проанализируем эту технологию, рассмотрим особенности её работы, а так же то, как она соотносится с обычным JavaScript в плане производительности. Речь пойдёт о времени загрузки кода, о скорости выполнения программ, о сборке мусора, об использовании памяти, о доступе к API платформы, об отладке, о многопоточности и о переносимости WebAssembly-кода. Эта технология, хотя и находится сейчас в самом начале своего развития, уже начала менять взгляды на разработку веб-приложений. Если разработчику нужна высочайшая производительность браузерного кода, ему просто необходимо познакомиться с WebAssembly.  
SBKarr;Скриптуем на WebAssembly, или WebAssembly без Web;https://habr.com//ru/post/344246/; Представлять WebAssembly не нужно — поддержка уже есть в современных браузерах. Но технология годится не только для них. WebAssembly — кроссплатформенный байткод. Значит, этот байткод можно запустить на любой платформе, где есть его виртуальная машина. И для этого вовсе не нужен браузер и Javascript-движок. Далее — проверка концепции на прочность, инструментарий и первый скриптовый модуль.
ru_vds;Wasmer: самая быстрая Go-библиотека для выполнения WebAssembly-кода;https://habr.com//ru/company/ruvds/blog/454518/;WebAssembly (wasm) — это переносимый бинарный формат инструкций. Один и тот же код wasm-код может выполняться в любой среде. Для того чтобы поддержать данное утверждение, каждый язык, платформа и система должны быть в состоянии выполнять такой код, делая это как можно быстрее и безопаснее.  
sahsAGU;Веб-разработка с .NET: Представляем Blazor WebAssembly 3.2.0;https://habr.com//ru/company/microsoft/blog/503596/;Привет, Хабр! Я рад сообщить, что Blazor WebAssembly теперь официально выпущена и доступна для всех. Это полнофункциональный и поддерживаемый выпуск Blazor WebAssembly, готовый к использованию в продакшене. Фулл-стак веб-разработка с .NET! Подробности под катом.  
owlofmacloud;Оптимизируем производительность: JavaScript (V8) vs AssemblyScript (WebAssembly);https://habr.com//ru/company/macloud/blog/554860/;"  Чтобы повысить производительность web-приложений, используйте WebAssembly в связке с AssemblyScript, чтобы переписать критически важные для производительности компоненты web-приложения, написанные на JavaScript. «И это действительно поможет?», — спросите вы.  К сожалению, на этот вопрос нет чёткого ответа. Всё зависит от того, как вы будете их использовать. Вариантов много: в одних случаях ответ будет отрицательный, в других — положительный. В одной ситуации лучше выбрать JavaScript вместо AssemblyScript, а в другой — наоборот. На это влияет множество различных условий.  В данной статье мы проанализируем эти условия, предложим ряд решений и проверим их на нескольких тестовых примерах кода.  Кто я такой и почему занимаюсь этой темой?  (Данный раздел можете пропустить, это несущественно для понимания дальнейшего материала).  Мне по-настоящему нравится язык AssemblyScript. Я даже в какой-то момент начал помогать разработчикам финансово. У них небольшая команда, в которой каждый серьёзно увлечён этим проектом. AssemblyScript — очень молодой язык, похожий на TypeScript и способный компилироваться в WebAssembly (Wasm). Именно в этом и заключается одно из его преимуществ. Раньше, чтобы использовать Wasm, web-разработчик должен был учить чуждые ему языки типа С, C++, C#, Go или Rust, так как в WebAssembly изначально могли компилироваться именно такие высокоуровневые языки со статической типизацией.   Хотя AssemblyScript (ASC) и похож на TypeScript (TS), он не связан с этим языком и не  компилируется в JS. Схожесть в синтаксисе и семантике нужна, чтобы облегчить процесс «портирования» с TS на ASC. Такое портирование в основном сводится к добавлению аннотаций типов."
Bright_Translate;Использование потоков WebAssembly из C, C++ и Rust;https://habr.com//ru/company/ruvds/blog/569578/;"  Поддержка многопоточности стала одним из важнейших апгрейдов производительности в WebAssembly. Она позволяет выполнять либо части кода на разных ядрах параллельно, либо один код для независимых элементов входных данных, масштабируя его на максимально доступное пользователю число ядер. Все это значительно сокращает общее время выполнения.  В этой статье вы узнаете, как использовать потоки WebAssembly для переноса многопоточных приложений, написанных на языках C, C++ и Rust, в веб-среду."
tangro;Собираем ваш первый WebAssembly-компонент;https://habr.com//ru/company/infopulse/blog/304362/;"Когда я впервые услышал о технологии WebAssembly  — она сразу показалось мне крутой вещью и мне сразу захотелось попробовать её в деле. От первого желания, до чего-то работающего мне, однако, пришлось потратить немало времени и порой испытать кое-какие разочарования. Для того, чтобы сохранить ваше время и ваши нервы, если вам захочется повторить тот же путь, и написана данная статья.    Предупреждение читателю Эта статья написана 24-го июня 2016-го года. Поскольку WebAssembly очень молодая и динамично развивающаяся технология, со временем многие описанные в данной статье вещи устареют или полностью изменятся — учитывайте это.  А теперь поехали.  Что такое WebAssembly? Официальная документация говорит следующее: «WebAssembly или wasm это новый портабельный, эффективный по размеру и скорости загрузки формат компиляции для веба». Эм-м-м-м… Что? Формат чего? Текстовый или бинарный? Да, это откровенно плохое описание. Так что убирайте уже ваши баззворд-бинго карточки и я, на основе моего опыта, дам своё определение:   «WebAssembly или wasm это спецификация байткода для написания производительных, браузеро-независимых компонентов для веба». Это определение, тоже, конечно, не вершина эпистолярного жанра, но я попробую его дополнить. WebAssembly позволяет повысить производительность с помощью использования статически типизированных переменных, которые обходятся на рантайме значительно дешевле динамических. WebAssembly разрабатывается W3C Community Group и планируется быть внедрённым во все основные браузеры. И с этого момента на стол выкладывается киллер-фича: вы сможете писать код веб-компонентов на любом языке программирования.  Теперь звучит лучше, неправда ли?"
Antelle;64-битная арифметика в браузере и WebAssembly;https://habr.com//ru/post/308874/; WebAssembly активно разрабатывается и уже достиг состояния, когда собранный модуль можно попробовать в Chrome Canary и Firefox Nightly, включив флажок в настройках. Сравним производительность арифметических вычислений с 64-битными числами в WebAssembly, asm.js, PNaCl и native-коде. Посмотрим на инструменты, которые есть для WebAssembly сейчас, и заглянем в недалёкое будущее.
Bright_Translate;Что это за зверь — WebAssembly?;https://habr.com//ru/company/ruvds/blog/573928/;"  По мнению многих специалистов WebAssembly представляет будущее эффективных и безопасных вычислений. В чем же конкретно выражаются его достоинства, и почему стоит отнестись к этому языку более внимательно?"
SBKarr;Технопорно с WebAssembly;https://habr.com//ru/post/345450/;По просьбам трудящихся, пишу о внутреннем устройстве WebAssembly. WebAssembly — байткод для стековой виртуальной машины. Значит, для запуска кода такой нужны интерпретатор, стек и хранилище кода. Если мы хотим взаимодействовать с внешним миром, нужен интерфейс к внешней машине, хосту. Дополнительно стандарт определяет две структуры: непрерывную память и таблицы. В версии MVP стандарта их может быть по одной штуке каждого, или не быть вовсе. В итоге, наш технобордель выглядит так:   Интерпретатор Интерфейс к хосту Стек Хранилище кода Память Таблица  Займёмся делом!
alizar;Три основных браузера добавили поддержку низкоуровневого бинарного формата WebAssembly;https://habr.com//ru/post/279429/;"Google, Microsoft и Mozilla на этой неделе синхронно выпустили экспериментальные билды браузеров с поддержкой WebAssembly (wasm) — эффективного низкоуровневого языка программирования, выполняющегося в браузере с производительностью гораздо выше, чем у самых современных и скоростных компиляторов JavaScript.  Разработчик из Mozilla Люк Вагнер рассказал на Mozilla Hacks о преимуществах WebAssembly, а также сообщил о портировании на WebAssembly научно-фантастического шутера Angry Bots. Демка запускается в браузерах с поддержкой WebAssembly — это последние версии Chrome Canary, Firefox Nightly и Microsoft Edge. Скоро к ним присоединится Safari на WebKit."
m1rko;Ещё большее ускорение WebAssembly: новый потоковый и многоуровневый компилятор в Firefox;https://habr.com//ru/post/347158/;"Оба авторе: Лин Кларк — разработчик в группе Mozilla Developer Relations. Занимается JavaScript, WebAssembly, Rust и Servo, а также рисует комиксы о коде.  Люди называют WebAssembly фактором, меняющим правила игры, потому что эта технология ускоряет выполнение кода в вебе. Некоторые из ускорений уже реализованы, а другие появятся позже.  Одна из техник — потоковая компиляция, когда браузер компилирует код во время его загрузки. До настоящего времени эта технология рассматривалась лишь как потенциальный вариант ускорения. Но с выпуском Firefox 58 она станет реальностью.  Firefox 58 также включает в себя двухуровневый компилятор. Новый базовый компилятор компилирует код в 10–15 раз быстрее, чем оптимизирующий компилятор.  Вместе эти два изменения означают, что мы компилируем код быстрее, чем он поступает из сети.    На десктопе мы компилируем 30-60 МБ кода WebAssembly в секунду. Это быстрее, чем сеть доставляет пакеты."
alizar;Вышел Firefox 52 c поддержкой WebAssembly;https://habr.com//ru/post/402173/;" 3D-рендеринг демки Zen Garden в браузере Firefox 52 c поддержкой WebAssembly  Mozilla выпустила Firefox 52, последнюю версию браузера с поддержкой операционной системы Windows XP. Сделан ряд важных изменений: упрощено подключение к хотспотам, где нужно сначала залогиниться в браузере, появились предупреждения об опасности, если страница запрашивает пароль по небезопасносму соединению (не HTTPS), исчезла поддержка плагинов NPAPI (кроме Flash, а в билде ESR останется полная поддержка), закрыто 28 уязвимостей.  Но ничто это не сравнится с главным и фундаментальным нововведением — поддержкой низкоуровневого языка программирования WebAssembly (wasm) типа ассемблера, который называют одной из самых значительных инноваций веб-платформы за последнее десятилетие. Это то, чего не хватало JavaScript."
MaxRokatansky;Обнаружение лиц в Node.js с использованием Rust и WebAssembly;https://habr.com//ru/company/otus/blog/530258/;В последней статье мы рассказывали, как вызывать функции Rust из Node.js. Сегодня мы расскажем, как написать приложение AIaaS (англ. Artificial Intelligence as a Service — «искусственный интеллект как услуга») на базе Node.js.Большинство приложений с искусственным интеллектом сейчас разрабатываются на языке Python, а главным языком программирования для веб-разработки является JavaScript. Для того чтобы реализовать возможности ИИ в вебе, нужно обернуть алгоритмы ИИ в JavaScript, а именно в Node.js.Однако ни Python, ни JavaScript сами по себе не подходят для разработки ИИ-приложений с большим объемом вычислений. Это высокоуровневые, медленные языки со сложной средой выполнения, в которых удобство использования достигается за счет снижения производительности. Для решения этой проблемы блоки интеллектуальных вычислений в Python оборачиваются в нативные C/C++-модули. Точно так же можно сделать и в Node.js, но мы нашли решение получше — WebAssembly.Виртуальные машины WebAssembly поддерживают тесную интеграцию с Node.js и другими средами выполнения JavaScript-кода. Они отличаются высокой производительностью, безопасны с точки зрения доступа к памяти, изначально защищены и совместимы с разными операционными системами. В нашем подходе сочетаются лучшие возможности WebAssembly и нативного кода.
F0iL;WebAssembly и манипуляции DOM;https://habr.com//ru/post/347804/;"Про WebAssembly в наше время слышали, я думаю, практически все. Если Вы не слышали, то на Хабре есть замечательный вводный материал об этой технологии.   Другое дело, что очень часто можно встретить комментарии вида “Ура, теперь будем писать фронтенд на C++!”, “Давайте перепишем React на Rust” и прочее, прочее, прочее…"
2tl;Google, Microsoft, Mozilla и другие объединились для запуска WebAssembly, нового бинарного формата для Web;https://habr.com//ru/post/260667/;Google, Microsoft, Mozilla и инженеры проекта WebKit 17 июня сделали анонс, что они объединились для запуска WebAssembly, нового бинарного формата для компилирования веб-приложений.
phillennium;WebAssembly в продакшне и «минное поле» Smart TV: интервью с Андреем Нагих;https://habr.com//ru/company/jugru/blog/435976/;"  Интерес к WebAssembly велик, но пока что нечасто встретишь людей, использующих эту технологию в рабочем проекте. Разработка приложений под Smart TV — тоже «нетипичный JavaScript», когда все слышали о чём-то, но немногие лично пробовали.  А у Андрея andreynagih Нагих есть опыт в обеих сферах: ранее он занимался Smart TV-приложениями проекта Peers.TV, а в последние месяцы так плотно знакомился с WebAssembly, что в итоге сделал доклад об этом на нашей конференции HolyJS. И в онлайн-трансляции HolyJS мы поспрашивали его и о том, и о другом.  А теперь решили, что читателям Хабра это тоже может быть интересно, и сделали отредактированную текстовую версию интервью. "
Ava_perseus;Назад в будущее с WebAssembly;https://habr.com//ru/post/453008/;Привет, Хабр! Представляю вашему вниманию перевод статьи «Back To The Future With WebAssembly» автора Attila Vágó.  Данный пост является переводом статьи, в которой рассказывается о свойствах WebAssemly и Emscripten. Оригинал статьи на английском языке.  Автор статьи Аттила Ваго — senior разработчик ПО в HMH. Пишет код, блоги и штуки в интернете. Полиглот языков программирования, прагматичный деятель, со страстью к JavaScript и легкому доступу. Легко вдохновляемый и вдохновляющий человек с сильным пристрастием к вещам для ботаников, отличной еде, крафтовому пиву и Lego. Пользуется Mac. Делает зарядку в 6 утра.  В 2011 году я написал свою первую независимую строку кода не на HTML (с ним я работал в 2007 году), и она была написана на том самом старом добром С, который преподавал профессор Дэвид Дж. Малан из Гарвардского университета. Он навсегда останется моим вдохновителем не только на изучение программирования, но и на программное мышление. Также запомнилось то, что приготовить бутерброд с арахисовым маслом просто для меня, однако это невероятно сложная задача для компьютера и одинаково трудная для человека, притворяющегося компьютером.   
Kilor;Разгоняем JS-парсер с помощью WebAssembly (часть 1: базовые возможности);https://habr.com//ru/company/tensor/blog/544824/;"В прошлой статье, посвященной выяснению победителя в состязании JS-парсеров строки buffers-атрибута узла плана PostgreSQL, мы дошли до факта, что самый эффективный вариант - реализовать примитивный конечный автомат и никогда не трогать регулярные выражения и любые операции над строками сложнее .charCodeAt.Такой код на тестовом нормализованном наборе показывает время порядка 48ms на 6.3MB или около 130MB/s, что примерно в 11 раз быстрее наивного варианта со .split.Но всегда остается вопрос: ""А еще быстрее - можно?""Чтобы приблизиться к возможностям ""железа"", но по-прежнему остаться в инфраструктуре JavaScript, сегодня мы научимся решать эту задачу с использованием WebAssembly и SIMD-инструкций, постаравшись по пути споткнуться обо все подводные камни."
fokus-lop;Как мы при помощи WebAssembly в 20 раз веб-приложение ускорили;https://habr.com//ru/company/skillbox/blog/452190/;"  В этой статье рассматривается кейс по ускорению браузерного приложения через замену вычислений JavaScript на WebAssembly. "
Omankit;Разработка сайта на WebAssembly с помощью NetCore 3 и Blazor;https://habr.com//ru/post/468019/;"Мое мнение, что WebAssembly будущее интернета. Данная технология на текущий момент уже интегрирована в большинство современных браузерах (а точнее в их движках) на ПК и мобильных устройствах. В таких браузерах как Chrome, Edge, Firefox, и WebKit. В данной статье я опишу как начать разработку сайта WebAssembly в Visual Studio. Статья подойдет для тех, кто хотел бы понять, как начать разрабатывать SPA приложения без использования JavaScript, зная только asp.net mvc, c#, верстку html и css. На момент выхода статьи фреймворк NetCore 3 находится в стадии RC1, а Blazor имеет версию 3.0.0-preview9.19457.4. Релиз NetCore 3 запланирован на сентябрь 2019. Что относительно Blazor то его релиз обещают позднее в ноябре 2019 года, скорее всего после релиза NetCore 3.1 Оглавление:   I Установка II Создание проекта WebAssembly из шаблона III Структура решения IV Запуск и отладка WebAssembly blazor V Размеры файлов и linker VI Публикация и LazyLoading, библиотеки элементов VII Выводы "
Renatk;Собираем приложение Qt в WebAssembly в Windows;https://habr.com//ru/post/485610/;"  Как известно, приложения написанные на Qt, который является кросс платформенными запускаются от desktop, мобильных, интернет вещей, до микроконтроллеров.  Один из вариантов это сборка приложения Qt в WebAssembly — которое позволит Вам запускать его в браузере у пользователя. Таким образом обновление приложения для пользователя будет заключаться в загрузке на сервер нового файла wasm.  Чтобы легче было осуществлять деплой приложения, в рамках данной статьи давайте соберём приложение Qt в WebAssembly под Windows в командной строке."
Kilor;Разгоняем JS-парсер с помощью WebAssembly (часть 2: алгоритм и его оптимизации);https://habr.com//ru/company/tensor/blog/545272/;"В первой части статьи мы исследовали скорость различных вариантов обмена информацией между JavaScript и WASM-кодом. В этом продолжении - наконец-то займемся написанием прикладного кода нашего парсера.Мы ведь теперь пишем ""прямо на ассемблере"" - значит, все будет супербыстро! Правда ведь?"
valshavel;Как мы внедряли WebAssembly в Яндекс.Картах и почему оставили JavaScript;https://habr.com//ru/company/yandex/blog/475382/;Меня зовут Валерий Шавель, я из команды разработки векторного движка Яндекс.Карт. Недавно мы внедряли в движок технологию WebAssembly. Ниже я расскажу, почему мы её выбрали, какие результаты получили и как вы можете использовать эту технологию в своём проекте.  
S_ILya;У AssemblyScript новый конкурент: язык Grain, созданный для WebAssembly, громко заявил о себе;https://habr.com//ru/company/macloud/blog/561048/;" Оскар Спенсер — один из создателей языка Grain  Grain — язык программирования высокого уровня со строгой типизацией. Это гибридный язык, сочетающий в себе некоторые возможности функционального  (например, вывод типов, сопоставление с образцом, замыкания) и императивного программирования (например, мутабельные переменные).  Оскар Спенсер, один из создателей языка, презентовал Grain на WebAssembly Summit 2021. Спенсер рассказал о его наиболее интересных и важных особенностях, а также подчеркнул, что Grain создан и оптимизирован специально для WebAssembly. Скомпилировать его можно только в байт-код Wasm. По крайней мере, это так на сегодняшний день.  Вот как разработчики сформулировали миссию языка Grain:  Grain стремится взять лучшее от функциональных и императивных языков программирования и донести это до широкой аудитории. Во многих языках реализованы замечательные идеи, но в конечном итоге эти языки не получили широкого распространения. Всё потому, что они слишком странные или чересчур сложные для изучения. И, следовательно, их попытки сплотить вокруг себя большое сообщество провалились. Grain должен вдохнуть новую жизнь в эти идеи и представить их в доступной форме, оставаясь простым в использовании. WebAssembly Summit — это ежегодная конференция, посвящённая всем аспектам использования и взаимодействия с Wasm. Саммит, о котором идёт речь в статье, прошёл в апреле 2021 года. "
RPG18;Qt Everywhere: WebAssembly и WebGL стриминг;https://habr.com//ru/post/430954/;Qt Everywhere — так именуются архивы с исходниками Qt. В 5.12.0 завезут WebAssembly и WebGL стриминг и everywhere звучит уже по другому. Так и просилось что-нибудь запрототипировать. Был быстро накидан прототип чатика на веб-сокетах, что бы протестировать поддержку сети. Под катом будет инструкция по сборке и запуска проекта на WebAssembly, пример вызова JavaScript из С++. 
Kilor;Разгоняем JS-парсер с помощью WebAssembly (часть 3: SIMD);https://habr.com//ru/company/tensor/blog/545642/;В предыдущей статье мы остановились на варианте, который с помощью SWAR-хинта превращает 8 последовательных цифр в одно числовое 32bit-значение. Но что если мы предположим, что все значения у нас, в основном, невелики - до 3 цифр? Тогда нам вполне достаточно использовать всего лишь 32bit-инструкции, а SWAR будет выполнен за 2 операции вместо 3 - сплошной выигрыш!Давайте перепишем наш код так, чтобы первый блок из 4 символов обрабатывался 32bit-инструкциями, а второй блок из 8 символов, если понадобится - уже 64bit-инструкциями.И... вместо 29ms получаем 31ms! Значит, наше предположение относительно длины чисел не оправдалось, и в первом блоке выгоднее обрабатывать сразу побольше символов.То есть больше размерность регистра - лучше? И такие регистры есть - это 128-битные SSE-регистры XMM - в WebAssembly они доступны нам как переменные с типом v128 и суперскалярные операции над ними.
OlegSchwann;Благодаря WebAssembly можно писать Frontend на Go;https://habr.com//ru/post/417563/;"Оригинал статьи.  В феврале 2017 года член команды go Brad Fitzpatrick предложил сделать поддержку WebAssembly в языке. Спустя четыре месяца в ноябре 2017 автор GopherJS Ричард Музиол начал реализовывать идею. И, наконец, полная реализация была смержена в mаster. Разработчики получат wasm примерно в августе 2018, с версией go 1.11. В результате, стандартная библиотека берёт на себя почти все технические сложности с импортом и экспортом функций, знакомых вам, если вы уже пробовали компилировать Си в wasm. Звучит многообещающе. Давайте посмотрим, что можно сделать с первой версией. "
Gbdrm;Игра на WebAssembly, часть 2: уровни и опыт, админка;https://habr.com//ru/post/507620/;В предыдущей статье получилось сделать прототип игры с вопросами. Но не получилось сделать это полноценно на WebAssembly. В этот раз предлагаю конвертировать этот прототип, сделав с него полноценное WebAssembly приложение, а так же добавить к нему атрибуты большинства игр — опыт и уровни игрока. А так же простую логику — при переходе на некоторые уровни будем открывать новые навыки.  Demo
varanio;Пробуем делать web-frontend на Rust (WebAssembly);https://habr.com//ru/post/325008/;" Недавно вышла новость про то, что webassembly теперь включен в firefox 52 из коробки. А потом еще и chrome 57 подтянулся (правда, там вроде бы были какие-то баги с запуском). Я решил, что обязательно надо попробовать. Для тех, кто не знает, что такое webassembly краткая информация: webassembly (или wasm) — это низкоуровневый язык, который понимают браузеры, и в который можно будет скомпилировать программы, написанные на популярных языках. Это гораздо более выгодно по скорости парсинга и выполнения, чем компилировать эти языки в чистый javascript или какой-нибудь asm.js.  Wasm задумывался в основном для c/c++, но, на удивление, уже все готово, чтобы скомпилировать программу на rust. Давайте сделаем небольшое приложение и посмотрим, что получится. Все это будем компилировать на Ubuntu. Без теоретических деталей, просто ""пощупаем"". "
ru_vds;Обрабатываем данные на стороне клиента с помощью WebAssembly;https://habr.com//ru/company/ruvds/blog/520954/;"  WebAssembly (сокр. WASM) — технология запуска предварительно скомпилированного бинарного кода в браузере на стороне клиента. Впервые была представлена в 2015 году и на текущий момент поддерживается большинством современных браузеров.  Один из распространенный сценариев использования — предварительная обработка данных на стороне клиента перед отправкой файлов на сервер. В этой статье разберемся как это делается."
Hixon10;Go 1.11 зарелизился — WebAssembly и Нативные модули;https://habr.com//ru/post/421355/;В эту пятницу состоялся релиз Go 1.11. Ключевые вещи релиза — экспериментальная поддержка WebAssembly, а также новая концепция Модулей, которые призваны стать стандартом распространения кода.  
germn;Компилируем FFmpeg в WebAssembly (=ffmpeg.js): Часть 2 — Компиляция с Emscripten;https://habr.com//ru/post/473134/;  Список переведённых частей серии:  Приготовления Компиляция с Emscripten (вы тут) Конвертация avi в mp4  Начиная с этой части, материал будет посложнее, так что не стесняйтесь гуглить по ходу чтения, если не понимаете, что происходит. К тому же я постараюсь задокументировать решение возможных проблем, чтобы вы смогли скомпилировать бибилиотеку со своими настройками. В этой части мы разберём:  Как настроить окружение для Emscripten в Docker Использование emconfigure и emmake  Как решать проблемы, возникающие при компиляции FFmpeg с Emscripten 
Maxchagin;Как сделать поиск пользователей по GitHub на WebAssembly;https://habr.com//ru/post/369785/;"  Всем привет! 24 августа 2018 вышла версия Go 1.11 с экспериментальной поддержкой WebAssembly (Wasm). Технология интересная и у меня сразу возникло желание поэкспериментировать. Написать ""Hello World"" скучно (и он кстати есть в документации), тем более тренд прошедшего лета статьи из серии ""Как сделать поиск пользователей по GitHub <вставить свой любимый JS-фреймворк>"""
germn;Компилируем FFmpeg в WebAssembly (=ffmpeg.js): Часть 3 — Конвертация avi в mp4;https://habr.com//ru/post/473166/;  Список переведённых частей серии:  Приготовления Компиляция с Emscripten Конвертация avi в mp4 (вы тут)   В этой части ма разберём:   Компиляцию библиотеки FFmpeg с оптимизированными аргументами. Управление файловой системой Emscripten. Разработку ffmpeg.js v0.1.0 и конвертацию видео. 
Alex_BBB;Blazor WebAssembly: динамическое создание компонентов по JSON описанию;https://habr.com//ru/post/577174/;"В заметке описан способ динамического добавления на страницу компонентов по JSON-описанию с помощью DynamicComponent из ASP.NET Core 6.0 (в настоящее время в статусе Preview).Динамическое создание компонентов пригодится например при реализации конструктора форм:• Форма описывается JSON-ом;• Элементы (или контролы) формы не ограничены предустановленным набором. Контролы можно добавлять, в том числе подгружать из других dll-библиотек."
Ontologic;Как написать смарт контракт на WebAssembly в сети Ontology? Часть 1: Rust;https://habr.com//ru/post/471878/;"  Технология Ontology Wasm снижает стоимость переноса смарт контрактов dApp со сложной бизнес- логикой на блокчейн, тем самым значительно обогащая dApp экосистему.  В настоящее время Ontology Wasm одновременно поддерживает разработку как на языке Rust, так и на языке C++. Язык Rust лучше поддерживает Wasm, а сгенерированный байт-код проще, что может еще больше снизить стоимость контрактных вызовов. Итак, как использовать Rust для разработки контракта в сети Ontology?"
germn;Компилируем FFmpeg в WebAssembly (=ffmpeg.js): Часть 1 — Приготовления;https://habr.com//ru/post/473098/;  Список переведённых частей серии:  Приготовления (вы тут) Компиляция с Emscripten Конвертация avi в mp4    Из этой части вы узнаете:  Зачем это всё нужно Как скомпилировать FFmpeg в Docker   Зачем это всё нужно Главные задачи у серии публикаций такие:  Создать туториал по использованию Emscripten для компиляции C/C++ библиотек в JavaScript (более детальный и полезный, чем написанные ранее) Персональная памятка  Почему FFmpeg? FFmpeg — это свободный проект с открытым исходным кодом, состоящий из обширного набора библиотек и программ для обработки видео, аудио и других мультимедийных файлов/трансляций. (из Википедии) Библиотеки JavaScript, которая предоставляла бы подобные возможности, попросту не существует. Если вы погуглите «ffmpeg.js», то найдёте несколько решений, подобных тому что мы собираемся сделать:  ffmpeg.js videoconverter.js  Эти библиотеки, конечно, можно использовать, но у них есть свои недостатки:  Используемые версии как FFmpeg, так и Emscripten устарели Проекты не поддерживаются уже долгое время  Изначально я планировал заняться поддержкой какой-нибудь из двух библиотек, но так как за годы накопилось слишком много изменений, решил сделать всё с чистого листа, попутно создав туториал по использованию Emscripten для компиляции большой C/C++ библиотеки.
Ontologic;Как написать смарт контракт на WebAssembly в сети Ontology? Часть 2: С++;https://habr.com//ru/post/473784/;"  В этой статье мы разберем на двух примерах, как написать смарт контракт на языке C++, используя WASM на основе блокчейн сети Ontology. Сегодня, после нескольких месяцев стабильной работы в тестовом режиме, Ontology запустила WASM в основной сети, что позволяет безболезненно и с меньшими издержками переносить контракты dApp со сложной бизнес-логикой на блокчейн, тем самым значительно обогащая dApp экосистему.  Ontology Wasm также поддерживает создание смарт контрактов на языке Rust, об этом можно почитать тут.   Ниже рассмотрим два примера смарт-контракта: сначала напишем “Hello world!” и потом создадим виртуальные денежный конверт, который можно будет отправить другу в качестве подарка.  Разработка WASM-контракта с помощью С++"
redhatrussia;Пишем 'Hello World' на WebAssembly, шпаргалка по Linux-команде sed, а также 15 самых востребованных ИТ-сертификатов года;https://habr.com//ru/company/redhatrussia/blog/551496/;И вновь мы приготовили для вас много инсайтов, мероприятий, книжек и шпаргалок. Оставайтесь с нами – станьте частью DevNation!
m1rko;Компиляция C в WebAssembly без Emscripten;https://habr.com//ru/post/454868/;"Компилятор — часть Emscripten. А что, если удалить все свистелки и оставить только его?  Emscripten необходим для компиляции C/C++ в WebAssembly. Но это гораздо больше, чем просто компилятор. Цель Emscripten в том, чтобы полностью заменить ваш компилятор C/C++ и запустить в вебе код, который изначально не предназначен для Сети. Для этого Emscripten эмулирует всю операционную систему POSIX. Если программа использует fopen(), то Emscripten предоставит эмуляцию файловой системы. Если используется OpenGL, то Emscripten предоставит С-совместимый контекст GL, поддерживаемый WebGL. Это немалая работа, и немало кода, который придётся внедрить в итоговый пакет. Но можно ли просто… удалить его?"
phillennium;Yew — Rust&WebAssembly-фреймворк для фронтенда;https://habr.com//ru/company/jugru/blog/422253/;Yew — аналог React и Elm, написанный полностью на Rust и компилируемый в честный WebAssembly. В статье Денис Колодин, разработчик Yew, рассказывает о том, как можно создать фреймворк без сборщика мусора, эффективно обеспечить immutable, без необходимости копирования состояния благодаря правилам владения данными Rust, и какие есть особенности при трансляции Rust в WebAssembly.    Пост подготовлен по материалам доклада Дениса на конференции HolyJS 2018 Piter. Под катом — видео и текстовая расшифровка доклада. 
m1rko;Как eBay делал сканер штрих-кодов на WebAssembly;https://habr.com//ru/post/453712/;"С момента своего анонса технология WebAssembly сразу привлекла внимание разработчиков фронтенда. Веб-сообщество с энтузиазмом восприняло идею запустить в браузере код, написанный на других языках, кроме JavaScript. Главное, что WebAssembly гарантирует скорость намного выше, чем JavaScript.   Наши инженеры внимательно следили за развитием стандарта. Как только поддержку WebAssembly 1.0 внедрили во всех основных браузерах, разработчики сразу захотели опробовать её.  Но тут возникла проблема. Хотя многие приложения выигрывают от WebAssembly, но область применения технологии в электронной коммерции всё ещё примитивна. Мы не смогли сразу найти правильный вариант её использования. Было несколько предложений, но во всех вариантах JavaScript подходил лучше. Когда мы в eBay оцениваем новые технологии, то первый вопрос: «Какова потенциальная выгода для наших клиентов?» Если здесь нет ясности, мы не переходим к следующему шагу. Очень легко увлечься новой модной технологией, даже если она не имеет никакого значения для клиентов и только усложняет существующий рабочий процесс. Пользовательский опыт всегда важнее опыта разработчика. Но с WebAssembly иначе. У этой технологии огромный потенциал, просто мы не могли найти правильный вариант использования. Впрочем, в итоге всё-таки нашли."
msgeek;Blazor WebAssembly 3.2.0 Preview 1 release now available;https://habr.com//ru/company/microsoft/blog/486444/;"Today we released a new preview update for Blazor WebAssembly with a bunch of great new features and improvements.  Here’s what’s new in this release:   Version updated to 3.2 Simplified startup Download size improvements Support for .NET SignalR client  "
sahsAGU;Blazor WebAssembly 3.2.0 Preview 1 теперь доступна;https://habr.com//ru/company/microsoft/blog/486638/;"Сегодня мы выпустили новое предварительное обновление для Blazor WebAssembly с множеством замечательных новых функций и улучшений.  Вот что нового в этом выпуске:   Версия обновлена до 3.2 Упрощенный запуск Улучшения размера загрузки Поддержка клиента .NET SignalR  "
T_12;Решение японских кроссвордов c P̶y̶t̶h̶o̶̶n̶ Rust и WebAssembly;https://habr.com//ru/post/454586/;" Как сделать решатель (солвер) нонограмм на Python, переписать его на Rust, чтобы запускать прямо в браузере через WebAssembly. TL;DR "
RPG18;Опыт с WebAssembly или как С++ undefined behavior выстрелил в ногу;https://habr.com//ru/post/354690/;На прошедшем C++ Russia 2018 мы рассказывали о нашем опыте перехода на WebAssembly, как наткнулись на UB и как его героически закостыляли, немного о самой технологии и как работает на разных устройствах. Под катом же будет текстовая версия всего относительно UB. Код используемых тестов доступен на GitHub. 
ru_vds;Что не так с WebAssembly?;https://habr.com//ru/company/ruvds/blog/539100/;"Современные браузеры могут намного больше, чем рендеринг веб-страниц. Это стало одной из причин появления WebAssembly. Эта технология создана в попытке вывести скорость решения сложных задач на новый уровень, построить мост между JavaScript и машинным кодом.  WebAssembly, в теории, может позволить кому угодно писать низкоуровневый код, выполняющийся в браузере, в безопасном виртуальном окружении. И, что ещё интереснее, технология WASM (сокращение от WebAssembly) была спроектирована как цель компиляции для других языков, позволяя коду, который обычно выполняют в серверной среде (например — коду, написанному на C или на C++), компилироваться в соответствующий формат и выполняться в браузере.    У WASM был огромный потенциал и невероятные перспективы. Что же пошло не так? Почему WASM, через 3 года после релиза, ещё не используется в каждом веб-проекте? Есть ли у WASM будущее в веб-разработке? Поищем ответы на эти вопросы."
dbezheckov;Приключения в портировании большой C++ кодовой базы на WASI WebAssembly;https://habr.com//ru/post/569492/;Привет хакеры, сегодня мы с вами отправимся в путешествие в мир индустриального C++ и Webassembly. Недавно мне довелось поучаствовать в портировании такой сложной и большой кодовой базы на C/C++ как SpiderMonkey на WASI платформу и я хочу поделиться с вами этим опытом.
Alex_BBB;“Связность” кода на примере генератора ASCII графиков, утилита для операций с интервалами и demo на Blazor WebAssembly;https://habr.com//ru/post/547614/;Работа с периодами может быть запутанной. Представьте, что у вас бухгалтерское приложение. И вам нужно получить периоды, когда сотрудник работал по графику “2 через 2” до индексации зарплаты. При этом нужно учитывать отпуска, смены графиков работы, увольнения/восстановления, переходы в другие отделы и прочие кадровые мероприятия. Эта информация хранится в виде приказов, у которых есть “Дата начала действия” и “Дата конца”, т.е. у вас есть периоды времени, с которыми нужно производить операции.Например найти пересечение всех интервалов:
phillennium;Обзор программы HolyJS 2017 Moscow: от WebAssembly до Yarn;https://habr.com//ru/company/jugru/blog/342938/;"  До конференции HolyJS осталось совсем немного (она пройдёт в Москве 10-11 декабря), сейчас в её программу вносят последние штрихи — а значит, мы можем как следует представить эту программу Хабру. Какие доклады нас ждут? Если суммировать одним словом, то «разнообразные». HolyJS никогда не ограничивалась рамками «конференции про фронтенд-фреймворки», а стремилась охватывать JS-мир во всей его широте. И в этот раз разброс очень заметен: от Node.js и GraphQL до браузерных «Героев меча и магии» и победы над квантовым компьютером с помощью WebAssembly. В результате при взгляде на программу глаза так разбегаются, что в этом хабрапосте даже не получилось разбить её на несколько тематических блоков, и пришлось просто описать все доклады поочерёдно.  Впрочем, кое-что мы выделили отдельно: кейноуты. Конференция пройдёт в трёх залах, но каждый день будет начинаться и заканчиваться общим для всех выступлением, так что логично начать описание с этих четырёх тем от четырёх всадников JavaScript-апокалипсиса, которые слетятся в Москву из-за рубежа."
phillennium;Обзор докладов HolyJS 2018 Piter: от WebAssembly до Three.js;https://habr.com//ru/company/jugru/blog/354586/;"  Кто-то решает сходить на конференцию, как только её анонсируют: если уже был на ней в прошлом году и всё понравилось, то сомневаться не приходится. А кто-то принимает решение, когда готова программа конференции и можно точно понять, какие доклады хочется посетить.  Сегодня у нас материал для вторых. В программу HolyJS 2018 Piter (19-20 мая) ещё вносят последние штрихи, но по ней уже можно сделать окончательные выводы. Самые разные темы (от особенностей TypeScript и утечек памяти при использовании RxJS до портирования компиляторов JS на процессоры Эльбрус) — рассмотрели в этом посте всё, что уже известно о докладах HolyJS."
RustLangRu;Rust 1.54.0: Поддержка SIMD инструкций в WebAssembly и инкрементальная компиляция снова включена по умолчанию;https://habr.com//ru/post/570414/;Команда Rust рада сообщить о выпуске новой версии — Rust 1.54.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если у вас установлена предыдущая версия Rust через rustup, то обновиться на версию языка Rust 1.54.0 все так же просто, как никогда: rustup update stable Если вы всё ещё не используете rustup, вы можете установить rustup на соответствующей странице нашего веб-сайта и ознакомиться с подробными примечаниями к выпуску 1.54.0 на GitHub. Что стабилизировано в 1.54.0 Этот выпуск содержит несколько новых возможностей языка.  Добавлены новые сценарии использования макросов Стабилизированы компиляторные вставки на платформе wasm32 Инкрементальная компиляция по умолчанию 
RPG18;C++ креши в WebAssembly на разных браузерах;https://habr.com//ru/post/343784/;"Заметка задумывалась как продолжение предыдущей заметки о том, как собираем C++ креши на различных платформах включая asm.js и wasm. По количеству материала, это тянет только на заметку, а не полноценную статью, да и нужно быть наркоманом, что бы делать нативный клиент на C++, а потом засовывать его в браузер.  Но! Мы недавно делали доклад об опыте использования wasm на cppconf. Оказалось, что наркоманов больше чем я думал, да и новость Beta for Qt for WebAssembly Technology Preview. Данная заметка может быть полезна, если вы захотите сделать отлов крешей в production окружении. Под катом:  отлов падений в asm.js и wasm; как выглядит стек вызовов в Safari, Firefox, Chrome. "
maybe_elf;Команда Wasmtime перешла в Fastly в рамках работы Bytecode Alliance;https://habr.com//ru/news/t/525402/;"  Bytecode Alliance, который появился почти год назад, объявил о слиянии Lucet и Wasmtime. Команда Wasmtime переходит на работу в Fastly."
SmartEngines;Smart Engines предоставила безопасную альтернативу сервисам распознавания документов в Интернете;https://habr.com//ru/company/smartengines/news/t/563882/;Компания Smart Engines первой в России представила промышленные технологии распознавания документов в браузере, не предполагающие пересылку исходных, промежуточных или справочных данных с клиентского устройства. Новое решение подходит для персональных устройств, объектов интернета вещей (IoT) и позволяет минимизировать риск утечки изображений с паспортными данными клиентов через Интернет. Исследователи компании решили сложную научно-техническую задачу разработки алгоритмов ИИ режима реального времени для полноценного распознавания в браузере и предложили качественную и безопасную альтернативу сервисам распознавания для пользователей, разработчиков и бизнеса.
maybe_elf;Cloudflare добавила поддержку Rust для создания воркеров;https://habr.com//ru/news/t/577270/;В Cloudflare внедрили поддержку создания воркеров на Rust без использования JavaScript. Соответствующий код опубликован на GitHub. 
northicewind;От JavaScript к Rust и обратно: рассказ о wasm-bindgen;https://habr.com//ru/post/353230/; Мы уже видели насколько WebAssembly быстро компилируется, ускоряет js библиотеки и генерирует более компактные бинарники. У нас даже есть общее представление как наладить взаимодействие не только между сообществами Rust и JavaScript, но и с сообществами других языков. В прошлой статье мы упоминали специальный инструмент wasm-bindgen и сейчас я бы хотел остановиться на нем более подробно.
and3colonel;Writing a wasm loader for Ghidra. Part 1: Problem statement and setting up environment;https://habr.com//ru/post/443318/;" This week, NSA (National Security Agency) all of a sudden made a gift to humanity, opening sources of their software reverse engineering framework. Community of the reverse engineers and security experts with great enthusiasm started to explore the new toy. According to the feedback, it’s really amazing tool, able to compete with existing solutions, such as IDA Pro, R2 and JEB. The tool is called Ghidra and professional resources are full of impressions from researchers. Actually, they had a good reason: not every day government organizations provide access to their internal tools. Myself as a professional reverse engineer and malware analyst couldn’t pass by as well. I decided to spend a weekend or two and get a first impression of the tool. I had played a bit with disassembly and decided to check extensibility of the tool. In this series of articles, I'll explain the development of Ghidra add-on, which loads custom format, used to solve CTF task. As it’s a large framework and I've chosen quite complicated task, I’ll break the article into several parts.  By the end of this part I hope to setup development environment and build minimal module, which will be able to recognize format of the WebAssembly file and will suggest the right disassembler to process it. "
SonicGD;Blazor: Техническое введение;https://habr.com//ru/post/348660/;"Сегодня команда ASP.NET анонсировала, что проект Blazor был перемещён в репозиторий организации ASP.NET. Мы начинаем стадию эксперимента, чтобы понять сможем ли мы развить Blazor в поддерживаемый продукт. Это большой шаг вперёд!    Что такое Blazor? Это фреймворк для браузерных приложений, написанный на .NET и запускающийся с помощью WebAssembly. Он даёт вам все преимущества богатых современных одностраничных приложений (SPA), позволяя при этом использовать .NET от начала и до конца, вплоть до общего кода на сервере и клиенте. В посте с анонсом подробно описаны основные случаи применения, сроки и так далее.  В этом посте я хочу поглубже поговорить о технических деталях для тех, кому интересно как же это работает."
Sm1le291;BlazingPizza: приложение на Blazor от начала и до конца. Часть 1. Настройка среды;https://habr.com//ru/post/486570/;"Всем привет! Если вы слышали о Blazor, но до сих пор не понимаете, что это такое. То вы по адресу. Это первая статья из цикла 12 статей, которая проведет вас через все круги ада весь процесс создания приложения на Blazor. В конце у нас будет готовый сайт небольшой пиццерии, вполне на уровне готовый сайтов некоторых пиццерий. Поэтому вам будет чем гордиться;)"
tyomitch;Полвека «универсальным машинным языкам» (1966—2016): прошлое, настоящее, будущее;https://habr.com//ru/post/270379/;"  Прошлое Повествование можно начать с 1962 г., когда в Кембриджском университете началась работа над CPL («Cambridge Programming Language») — «усовершенствованным вариантом» ALGOL-60. К работе над языком подключился аспирант Мартин Ричардс; главной сложностью в реализации нового ЯП ему показалась необходимость ручного портирования компилятора для разных компьютерных платформ. В частности, когда кембриджский EDSAC-2 заменили на Atlas-2, разработчики CPL потратили много времени на портирование своего компилятора для новой платформы.  Диссертация Мартина была посвящена «само-компилирующемуся» CPL: разработанный Мартином компилятор был написан на сильно упрощённом варианте CPL, компилятор которого несложно было написать на тогдашнем макроассемблере. Перенос CPL на новую платформу теперь можно было выполнить в два шага:  Вручную пишем компилятор «упрощённого CPL»; Компилируем им компилятор «полного CPL».  На этом Мартин не остановился, и разработал BCPL — систему для разработки переносимых компиляторов. Компилятор BCPL генерировал псевдокод, названный Мартином «OCODE». OCODE выглядел примерно так:  OCODE «расшифровка» («procode»)     94 5 L1 83 73 69 86 69 95 4 42 0 42 0 40 2 14 83 42 0 42 1 40 2 14 83 42 2 40 3 42 1 15 92 85 L5 90 L6 42 1 40 4 40 2 14 83 40 4 42 1 14 80 4  90 5 40 4 40 5 88 L6 91 4 42 2 40 3 42 1 15 92 85 L7 90 L8 40 4 40 2 14 8 87 L9 40 4 42 2 11 92 85 L11 90 L10 42 0 40 6 40 2 14 83 40 4 40 6 14 80 6 90 L11 40 6 40 3 22 86 L10 91 6 90 L9 40 4 42 1 14 80 4 90 L7 40 4 40 5 88 L8 91 4 97 103 0   ENTRY 5 L1  'S' 'I' 'E' 'V' 'E' SAVE 4 LN 0 LN 0 LP 2 PLUS STIND LN 0 LN 1 LP 2 PLUS STIND LN 2 LP 3 LN 1 MINUS STORE JUMP L5 LAB L6 LN 1 LP 4 LP 2 PLUS STIND LP 4 LN 1 PLUS SP 4 LAB L5 LP 4 LP 5 ENDFOR L6 STACK 4 LN 2 LP 3 LN 1 MINUS STORE JUMP L7 LAB L8 LP 4 LP 2 PLUS RV JF L9 LP 4 LN 2 MULT STORE JUMP L11 LAB L10 LN 0 LP 6 LP 2 PLUS STIND LP 4 LP 6 PLUS SP 6 LAB L11 LP 6 LP 3 LS JT L10 STACK 6 LAB L9 LP 4 LN 1 PLUS SP 4 LAB L7 LP 4 LP 5 ENDFOR L8 STACK 4 RTRN ENDPROC 0  ; заголовок процедуры ; стековый кадр (два параметра и две локальные переменные) ; поместить на стек число 0 ; поместить ещё один 0, прибавить к нему 2-ой элемент стека ; записать в массив на вершине стека значение под ним ; всё то же самое для 1-ого элемента массива ; поместить на стек число 2 ; вычесть единицу из значения 3-его элемента стека ; записать результат в локальную переменную ; перейти к метке L5 ; объявление метки L6 ; взять 4-ый элемент стека, записать в массив по этому индексу 1 ; прибавить к 4-ому элементу стека 1, записать результат обратно ; L5: перейти к метке L6, если 4-ый элемент стека <= 5-ому ; объявление, что на стеке сейчас четыре элемента ; вычесть единицу из значения 3-его элемента стека ; перейти к метке L7 ; L8: сложить 4-ый и 2-ой элементы стека ; прочитать значение по этому адресу; если это 0, перейти к L9 ; умножить 4-ый элемент на два ; перейти к метке L11 ; объявление метки L10 ; взять 6-ой элемент стека, записать в массив по этому индексу 0 ; прибавить к 6-ому элементу стека 4-ый, записать рез-т обратно ; объявление метки L11 ; перейти к метке L10, если 7-ой элемент стека меньше 4-ого ; на стеке сейчас шесть элементов; объявление метки L9 ; прибавить к 4-ому элементу стека 1, записать результат обратно ; L10: перейти к L8, если 4-ый элемент стека <= 5-ому ; на стеке четыре элемента; окончание процедуры   (Для экономии места, последовательности команд записаны в одну строчку. Мартин в своём руководстве по BCPL поступает точно так же.)  Исходный код на BCPL:  LET sieve(workvec, vecsize) BE {   workvec!0 := 0   workvec!1 := 0   FOR i = 2 TO vecsize-1 DO workvec!i := 1   FOR i = 2 TO vecsize-1 DO     IF workvec!i DO     { LET j = 2 * i       WHILE j < vecsize DO       { workvec!j := 0         j := j + i       }     } } В более новых версиях OCODE добавилась поддержка чисел с плавающей точкой (соответственно, набор поддерживаемых опкодов почти удвоился), а также удалили опкод ENDFOR — вместо него генерируется пара LE JT.  Среди «универсальных машинных языков» OCODE уникален тем, что метки в нём определяются специальными инструкциями — т.е. для интерпретации программы её нужно сначала всю загрузить в память, и найти в ней метки. — а отдельная программа, кодогенератор, превращала файл с таким псевдокодом в исполнимую программу для конечного процессора. OCODE сохранялся в виде текстового файла из десятичных чисел, разделённых пробелами и переводами строк: в то время, когда OCODE разрабатывался, привязка формата файла к конкретному размеру байта ограничивала бы переносимость такого файла.  Компилятор BCPL(1) поставлялся в виде OCODE, и чтобы перенести его на новую платформу, нужно было:  Вручную написать интерпретатор псевдокода(2) (на любом языке, хоть на Бейсике); Адаптировать кодогенератор,(3) написанный на BCPL, для своей платформы; Запустить под интерпретатором (2) компилятор BCPL (1), скормить ему кодогенератор (3), и получить на выходе исполнимый файл кодогенератора(4); Интерпретатор (2) нам с этого момента больше не нужен.  Прогнать через кодогенератор (4) псевдокод компилятора (1), и получить на выходе исполнимый файл компилятора.   Такой подход означал, что для переноса компилятора на новую платформу требуется лишь самый минимум низкоуровневого программирования; и действительно, реализация BCPL была завершена к 1967 г. — раньше, чем была завершена реализация CPL, начатая на несколько лет раньше!  Достоинства BCPL применительно к системному программированию вдохновили Кена Томпсона на создание языка Би, а тот — коллегу Кена, Денниса Ритчи, на создание Си. Именно из BCPL пошла традиция обозначать {фигурными скобками} блоки программы, и именно на BCPL была написана первая программа «Hello, World!».  GET ""libhdr""  LET start() = VALOF { writef(""Hello*n"")   RESULTIS 0 } Более важная нам причина, по которой BCPL вошёл в историю: OCODE — первая универсальная «архитектура набора команд» (ISA), т.е. «виртуальная машина», не привязанная ни к какой конкретной аппаратной платформе с её особенностями. BCPL, таким образом — первый язык программирования, соответствующий парадигме «Write once, run anywhere» (WORA): программу на BCPL можно распространять в скомпилированном виде, и её можно будет запустить на любой платформе, для которой существует OCODE-кодогенератор."
octob3rmut3;Краткая история JavaScript. Часть 3;https://habr.com//ru/company/livetyping/blog/324908/;Третья и заключительная часть перевода статьи из блога сервиса Auth0 A Brief History of JavaScript. Ключевые моменты: транспайлеры и ECMAScript 2015, немного о новом процессе подготовки обновлений, чего ждать в будущем и как на него повлияют Asm.js и WebAssembly. Перевод подготовлен отделом фронтенд-разработки компании Лайв Тайпинг.  Краткая история JavaScript. Часть 1 Краткая история JavaScript. Часть 2  
atrosinenko;QEMU.js: теперь по-серьёзному и с WASM;https://habr.com//ru/post/451306/;Когда-то давно я смеха ради решил доказать обратимость процесса и научиться генерировать JavaScript (а точнее, Asm.js) из машинного кода. Для эксперимента был выбран QEMU, некоторое время спустя была написана статья на Хабр. В комментариях мне посоветовали переделать проект на WebAssembly, да и самому бросать почти законченный проект как-то не хотелось… Работа шла, но уж очень медленно, и вот, недавно в той статье появился комментарий на тему «Так и чем всё закончилось?». На мой развёрнутый ответ я услышал «Это тянет на статью». Ну, раз тянет, то будет статья. Может, кому пригодится. Из неё читатель узнает некоторые факты про устройство бекендов кодогенерации QEMU, а также как написать Just-in-Time компилятор для веб-приложения.
JacobL;Ahead-of-Time компиляция и Blazor;https://habr.com//ru/post/548132/;В .NET 6 запланирована поддержка AOT компиляции для Blazor WebAssembly приложений. Давайте попробуем запустить в Preview 2 версии.Анонса и инструкций пока что нету. Поэтому и решено написать этот пост.
m1rko;Вышел Rust 2018… но что это такое?;https://habr.com//ru/post/432564/;"Статья написана Лин Кларк в сотрудничестве с командой разработчиков Rust («мы» в тексте). Можете прочитать также сообщение в официальном блоге Rust.  6 декабря 2018 года вышла первая версия Rust 2018. В этом релизе мы сосредоточились на производительности, чтобы разработчики Rust стали работать максимально эффективно.   Временнáя шкала показывает переход функций из бета-версии в Rust 2018 и Rust 2015. Она окружена значками для инструментов и четырёх областей: WebAssembly, embedded, networking и CLI. Красный круг — эффективность разработчика — окружает всё, кроме Rust 2015   Но вообще непросто объяснить, что такое Rust 2018.  Некоторые представляют его новой версией языка… примерно так и есть, но не совсем. Я говорю «не совсем», потому что здесь «новая версия» означает не то, что новые версии других языков."
Raiffeisenbank;WASM Meet Up 1/08;https://habr.com//ru/company/raiffeisenbank/blog/460947/;Приглашаем на митап, посвященный технологии WebAssembly, который пройдет на площадке Райффайзенбанка в Нагатино 1 августа. Послушаем доклады Raiffeisen Digital, Parity Technologies и Mozilla напрямую из Сан-Франциско.  
maybe_elf;Flash Player будет удален с сайта Adobe в декабре;https://habr.com//ru/news/t/506898/;"  Adobe напомнила, что прекратит распространение и обновление Flash Player после 31 декабря 2020 года. До этого момента компания продолжит выпускать регулярные исправления безопасности для Flash Player, поддерживать его совместимость с ОС и браузерами, а также добавлять новые функции и возможности.  Однако после 31 декабря Adobe удалит страницы загрузки Flash Player со своего сайта, а содержимое на основе Flash будет заблокировано для запуска в Adobe Flash Player."
ozkriff;Rust новости #5 (январь 2019);https://habr.com//ru/post/439354/;"Предлагаю вашему вниманию субъективную подборку ржавых новостей за январь. В этой подборке: Rust 1.32, уход Стива Клабника и Ника Камерона, киш от Cloudflare, устройство rust-analyzer и страничной памяти, поиски GUI и async, Oxydyze конференция для встроенщиков.  Rust 1.32 Вышел Rust 1.32. По сравнению с масштабным прошлым выпуском, на котором было сконцентрировано множество сил всего сообщества, тут серьезных нововведений не очень много:  Новый вспомогательный макрос для отладки dbg!; По умолчанию убран jemalloc. Стабилизированы ""единообразные пути"" (""uniform paths"")  Подробности в переводе новости. Стив Клабник и Ник Камерон уходят из Mozilla  Печальные новости: Стив Клабник и Ник ""nrc"" Камерон покидают Мозиллу."
kate_shlyakhova;Секция Frontend на DUMP2020: вангуем, что снова будет аншлаг. Топ докладов прошлого года и темы этого;https://habr.com//ru/company/it_people/blog/490976/;"Кто согласен, что современный фронтенд — это сложно, поднимите руки! Ради чего мы мучаемся с настройкой Webpack? Почему реализация SSR требует писать столько кода, и нужен ли он нам вообще такой ценой? Кто виноват и что мы, как разработчики, можем сделать?  Мы стараемся ответить на эти и сотни других вопросов в секции Frontend. И год от года темы становятся все разнообразнее и хардкорнее. А основной лейтмотив секции — эксперименты.  Смотрите под катом, кто над чем экспериментировал в прошлом году, и что будут рассказывать и показывать в этом   "
JaneWay;Беседа с Полиной Гуртовой о будущем и настоящем Frontend`а. Организаторы DUMP 2020 задают несколько важных вопросов;https://habr.com//ru/company/it_people/blog/498136/;Полина Гуртовая — frontend-разработчик уже более 5ти лет, работает в компании Evil Martians. Она не только прекрасный специалист, но и член программного комитета секции Frontend на конференции DUMP 2020, а еще спикер секции этого же года.   Мы пообщались с Полиной и задали ей несколько, как нам показалось, важных вопросов о будущем и настоящем Frontend`а, спросили ее мнение о трендах и тенденциях направления. Вот что отвечает «злая марсианка» :)
m1rko;Размытие фона в Google Meet с расчётом ML в браузере;https://habr.com//ru/post/527124/;Видеоконференции занимают всё большее место в работе и личной жизни людей. Чем лучше организован процесс с точки обработки видео и приватности, тем меньше отвлекается внимание человека от самой конференции. В рамках этой задачи мы недавно разработали фильтры размытия и замены фона в Google Meet. Они задействуют машинное обучение (ML) для лучшего выделения участников независимо от их окружения. В то время как другие решения требуют установки дополнительного программного обеспечения, функции Meet основаны на передовых технологиях Web ML, построенных с помощью MediaPipe, и работают непосредственно в вашем браузере — никаких дополнительных шагов не требуется. Одной из ключевых целей при разработке этих функций было обеспечение производительности в реальном времени в браузере почти на всех современных устройствах, чего мы достигли, объединив эффективные модели ML на устройстве, рендеринг на основе WebGL и вывод ML на веб-стеке с помощью XNNPACK и TFLite.
artschedrov;Что вошло в релиз движка V8 версии 9.0;https://habr.com//ru/post/555420/;17 марта 2021 был опубликован релиз девятой версии движка V8. Этот пост - краткое описание того что вошло в список изменений релиза.
Plarium;6 впечатляющих веб-технологий 2015 года;https://habr.com//ru/company/plarium/blog/277485/;"2015 год выдался богатым на нововведения, связанные с улучшениями веб-платформы. Аксель Рошмайер рассматривает 6 технологий, которые ему кажутся наиболее интересными:  1. Electron; 2. React Native; 3. Прогрессивные веб-приложения; 4. Visual Studio Code; 5. Rollup; 6. WebAssembly.    "
GRaAL;Как я попробовал сделать статический анализатор GLSL (и что пошло не так);https://habr.com//ru/post/428027/;"Однажды я готовился к Ludum Dare и сделал простую игру, где использовал пиксельные шейдеры (других в движок Phaser не завезли).  Что такое шейдеры?Шейдеры — это программы на си-подобном языке GLSL, которые выполняются на видеокарте. Есть два вида шейдеров, в этой статье речь идет про пиксельные (они же “фрагментные”, fragment shaders), которые очень грубо можно представить в таком виде: color = pixelShader(x, y, ...other attributes) Т.е. шейдер выполняется для каждого пикселя выводимого изображения, определяя или уточняя его цвет. Вводную можно почитать на другой статье на хабре — https://habr.com/post/333002/  Потестировав, кинул ссылку другу, и получил от него вот такой скриншот с вопросом ""а это нормально?""  Нет, это было ненормально. Посмотрев внимательно код шейдера, я обнаружил ошибку в вычислениях: if (t < M) {     realColor = mix(color1,color2, pow(1. - t / R1, 0.5)); } Т.к. константа R1 была меньше чем M, то в некоторых случаях в первом аргументе pow получалось число меньше нуля. Квадратный корень из отрицательного числа — штука загадочная, по крайней мере для стандарта GLSL. Мою видеокарту ничего не смутило, и она как-то выпуталась из этого положения (похоже, вернув из pow 0), а вот у друга она оказалась более разборчивой. И тут я задумался: а могу ли я избежать таких проблем в будущем? От ошибок никто не застрахован, особенно таких, которые не воспроизводятся локально. Юнит-тесты на GLSL не напишешь. В то же время преобразования внутри шейдера довольно простые — умножения, деления, синусы, косинусы… Неужели нельзя отследить значения каждой переменной и убедиться, что ни при каких условиях не происходит выхода за допустимые границы значений? Так я решил попробовать сделать статический анализ для GLSL. Что из этого получилось — можно прочитать под катом.  Сразу предупрежу: какого-то законченного продукта получить не удалось, только учебный прототип."
alizar;Почему uBlock Origin лучше работает в Firefox;https://habr.com//ru/company/vdsina/blog/553114/;"  Автор uBlock Origin и uMatrix Реймонд Хилл обновил памятку, почему расширение uBlock Origin наиболее эффективно работает в браузере Firefox. Некоторые технические детали относятся не только к uBO, но и к другим блокировщикам рекламы.   Реймонд Хилл называет несколько основных факторов: более эффективное вскрытие маскировки CNAME, HTML-фильтрация, поддержка WebAssembly, более корректная процедура запуска браузера, сжатие LZ4 и надёжно отключённый префетчинг ресурсов. Всё это есть в Firefox, но отсутствует или глючит в браузерах на основе Chromium."
GeekBrains;Итоги 2015: веб-разработка;https://habr.com//ru/company/geekbrains/blog/273171/;"Представители КРОК, Traffic Inspector, WebMoney Transfer и Softline рассказали, что принес 2015-й год в сферу веб-разработки. Эксперты перечислили важнейшие события индустрии и отметили основные тренды уходящего года.    Ключевые события и тренды 2015-й – это год утверждения стандарта HTTP/2 (предыдущая версия протокола была принята в 1999). Это год массового перехода на стандарт HTML-5 с устаревшего Flash, который уже не поддерживается большинством современных браузеров. Это год появления WebAssembly, который в дальнейшем позволит перенести требовательные к производительности приложения в Web, что по мнению Сергея Дорогина, ведущего инженера-разработчика Департамента информационных технологий компании КРОК, означает “начало нового мира”.  Большинство тенденций уходящего года в сфере веб-дизайна, связаны с ростом популярности гаджетов и распространением мобильного интернета. Среди них такие как использование адаптивной верстки вместо создания отдельной мобильной версии сайта. Один из основных трендов – минималистичный дизайн, заданный Apple, помимо этого эксперты пророчат долгоиграющую популярность материальному дизайну от Google. "
alizar;Сайты-майнеры научились прятать браузер на компьютерах пользователей;https://habr.com//ru/post/408525/;" Всё бóльшую популярность у злоумышленников получает партнёрская программа Coinhive по майнингу криптовалюты в браузерах пользователей (и другие JS-майнеры). Ничего не подозревающие юзеры заходят на сайт — и не обращают внимания, что у них резко возрастает нагрузка на CPU (Coinhive майнит Monero на алгоритме CryptoNight, который создаёт большой блок в памяти и предотвращает внутренний параллелизм, поэтому майнинг исключает использование ASIC и наиболее эффективен именно на CPU).  Злоумышленники продолжают взламывать сайты и размещать скрипты для майнинга. То же самое продолжается с расширениями для браузеров. Недавно они внедрили майнер CryptoLoot даже в скрипт CookieScript.info, который помогает другим сайтам показывать предупреждение об использование кукисов по требованию Евросоюза — это самый популярный бесплатный сервис такого рода, его используют тысячи других сайтов, иначе им грозит штраф от Евросоюза до $500 000.  На деятельность злоумышленников можно было смотреть с усмешкой: ну сколько они там сгенерируют за две минуты, которые пользователь проводит на сайте? Эфемерная природа майнинга в браузере оставалась главным недостатком такого рода зловредов. Но специалисты Malwarebytes Labs отмечают, что владельцы «майнинг-ботнетов», к сожалению, сумели устранить этот недостаток. Теперь майнинг на компьютерах пользователей продолжается и после того, как они покинули заражённый сайт. И даже после закрытия браузера."
WizardBox;Могут ли PWA (Progressive Web Apps) образца 2018 года составить достойную конкуренцию нативным приложениям?;https://habr.com//ru/company/google/blog/414609/; Когда изменения происходят постепенно, шаг за шагом, порой бывает трудно заметить насколько они драматичны и всеобъемлющи. Казалось бы всего несколько лет назад web платформа проигрывала нативным приложением практически по всем фронтам, и пропасть между тем, что можно было сделать в браузере, и тем, что было доступно приложениями, загружаемым из магазинов, таких как Apple App Store или Google Play Store, была ужасающе огромной. Одним из свидетельств этой пропасти является то, что в 2007 году web по факту был основной платформой разработки приложений для первого iPhone, но эта платформа явно не взлетела. App Store же появился только год спустя со второй версии операционной системы, и сразу же случился бум нативных приложений, который и сформировал рыночный ландшафт таким, каким мы его знаем теперь.  Многое изменилось с тех пор, и web технологии на месте не стояли. Они шли по пути снятия ограничений, и то, что раньше было принципиально невозможно — работа оффлайн, фоновая синхронизация данных, push-нотификации, поддержка входа в один клик и оплаты с помощью кредитных карт, Apple Pay, Google Pay и других методов, встроенная в браузер — теперь реальность. Эти функции органично дополняют основную часть платформы — HTML/CSS и JavaScript, которая в последние годы развивалась более чем активными темпами. Например новый проект Houdini, который ещё находится на достаточно ранней стадии, снимает почти все ограничения на то, что можно сделать с помощью CSS, давая возможность среди прочего создавать свои лэйауты и использовать их наравне с Grid и Flexbox, и открывая программный доступ к внутренностям CSS движка. Но даже и без Houdini уже сейчас можно создавать CSS анимации, работающие со скоростью 60 FPS (frames per second).
grvelvet;Wasm в Armory Engine;https://habr.com//ru/post/531964/;Для тех кто в танке - wasm или WebAssembly это язык программирования низкого уровня для виртуальной стековой машины раз разработанный как портативная цель компиляции для высокоуровневых языков, таких как Си, C++, C#, Rust, Go. Проще говоря вы можете писать высокопроизводительный, компактный и переносимый код используя wasm. Наш Armory тоже использует wasm. Благодаря ему движок может работать в браузере и на других платформах с использованием Krom. 
batmandarkside;Ускоренный курс по ассемблерам;https://habr.com//ru/company/raiffeisenbank/blog/348738/;"Это перевод одной из статей Lin Clark. Если вы не читали остальные, мы рекомендуем начать с начала.   Чтобы понять, как работает WebAssembly, неплохо понимать, что такое код на ассемблере и как компиляторы его генерируют. В статье о JIT я сравнивала взаимодействие с компьютером со взаимодействием с инопланетянином. "
PatientZero;Портируем многопользовательскую игру с С++ на веб c Cheerp, WebRTC и Firebase;https://habr.com//ru/post/468031/;"Введение Наша компания Leaning Technologies предоставляет решения по портированию традиционных desktop-приложений в веб. Наш компилятор C++ Cheerp генерирует сочетание WebAssembly и JavaScript, что обеспечивает и простое взаимодействие с браузером, и высокую производительность.  В качестве примера его применения мы решили портировать для веба многопользовательскую игру и выбрали для этого Teeworlds. Teeworlds — это многопользовательская двухмерная ретро-игра с небольшим, но активным сообществом игроков (в их числе и я!). Она мала как с точки зрения скачиваемых ресурсов, так и требований к ЦП и GPU — идеальный кандидат.   Работающая в браузере Teeworlds "
VanquisherWinbringer;Blazor Client Side Интернет Магазин: Часть 3 — Витрина товаров;https://habr.com//ru/post/494612/;"  Привет, Хабр! Продолжаю делать интернет магазин на Blazor. В этой части расскажу о том как добавил в него витрину товаров и сделал свои компоненты. За подробностями добро пожаловать под кат. "
VanquisherWinbringer;Blazor Client Side Интернет Магазин: Часть 7 — Обновился до релизной версии 3.2.0 и добавил показ картинок;https://habr.com//ru/post/503408/;"  Привет, Хабр! Вышел релиз Blazor WebAssemby и я немного обновил свой сайт. За подробностями добро пожаловать под кат. "
Deamon87;Как скрестить Clion, Emscripten и Cmake;https://habr.com//ru/post/522284/;"В этой статье я хотел бы пройтись и показать основные моменты того, как настроить IDE CLion для компиляции CMake проекта средствами Emscripten. Когда я занимался этим скрещиванием мне пришлось потратить день или два на эксперименты. И в этой заметке я собираюсь собрать некое ""how to"", которое в итоге сработало. "
yantishko;Как мы создали Web приложение для определения лиц и масок для Google Chrome (часть 2);https://habr.com//ru/post/563212/;" В предыдущей статье я рассказывал о том, можно ли использовать машинное обучение (в частности определение лица и маски) в браузере, подходах к детекции и оптимизации всех процессов. Сегодня я хочу рассказать о технических подробностях реализации."
honyaki;Как запустить Jupyter Notebook в браузере без бэкенда;https://habr.com//ru/company/skillfactory/blog/573726/;К старту нашего флагманского курса по Data Science представляем перевод обзора JupyterLite прямо из блога его разработчиков. JupyterLite — это перезагрузка множества попыток создать полный статический выполняемый в браузере дистрибутив Jupyter, чтобы не было необходимости запускать сервер Jupyter. Цель проекта — дать лёгкую вычислительную среду в браузере, доступную по одному клику спустя несколько секунд, без установки чего-либо на устройство конечного пользователя. При работе с дистрибутивами в браузере не нужно предоставлять среду выполнения на бэкенде. Приложение в основном представляет собой набор статических файлов, поэтому проще масштабируется и его легче развёртывать.
sereje4kin;Frontend на CodeFest: React, Javascript и лучшие практики;https://habr.com//ru/company/codefest/blog/350050/;"  Продолжаем рассказывать о программе CodeFest 2018. На очереди — мощный фронт докладов фронтенд-секции."
KsHoxton;Приглашаем на MskDotNet Meetup #34 в Райффайзенбанк upd Трансляция;https://habr.com//ru/company/raiffeisenbank/blog/444746/;28 марта MskDotNet и RaiffeisenIT Community приглашают на очередной митап сообщества. Мы открываем двери для всех, кто хочет делиться опытом и узнавать что-то новое. Митап пройдет на площадке Райффайзенбанка в офисе Нагатино.   
PatientZero;JavaScript не нужно ничем заменять — другие языки тоже столкнутся с теми же проблемами;https://habr.com//ru/post/477694/;" «Существует только два вида языков: те, на которые жалуются и те, которыми никто не пользуется», — Бьёрн Страуструп, создатель C++ Очень часто слышатся заявления о том, что JavaScript нужно заменить каким-то другим языком. Причиной всегда становится то, что у JavaScript накопилось слишком много странностей, которые давно нужно было исправить.  Но поскольку их не исправили, то это очевидно означает, что JavaScript — отстойный язык, который просто никак не исправишь. И что его нужно заменить, и желательно любимым языком очередного жалобщика.  Но действительно ли это так?  Как мы оказались в такой ситуации? Не стоит ждать, что я назову JavaScript идеальным языком. У него есть странные причуды. Он был спроектирован за десять дней, а затем его изменили так, чтобы он напоминал Java. К сожалению, это наследие, с которым мы вынуждены жить.  Но ни один язык не идеален, а JavaScript значительно улучшился после ES6 и продолжает своё развитие. Он эволюционировал из «игрушечного языка», используемого только для анимирования элементов веб-страниц, в серьёзный язык программирования, применяемый сегодня для выполнения больших и сложных веб-приложений."
VanquisherWinbringer;Blazor Client Side Интернет Магазин: Часть 5 — Просмотр корзины и работа с Stateful;https://habr.com//ru/post/495812/;"  Привет, Хабр! Продолжаю делать интернет магазин на Blazor. В этой части расскажу о том как добавил в него возможность просмотра корзины товаров и организовал работу с состоянием. За подробностями добро пожаловать под кат. "
host_m;Запускаем код для Arduino в браузере;https://habr.com//ru/company/vdsina/blog/536202/;"  WebAssembly позволяет запускать код на разных языках программирования внутри браузера, и сейчас это не только способ разрабатывать веб-приложения не на JS, но и возможность использовать браузер как кроссплатформенную, легкодоступную песочницу для тестирования. Например, проект Wasmino позволяет эмулировать ядро Arduino в браузере и запускать на нём код прямо из IDE."
Tetragius;Как написать свою онлайн-песочницу с поддержкой React и популярных библиотек;https://habr.com//ru/company/raiffeisenbank/blog/568102/;Привет, меня зовут Илья, я лидер сообщества фронтенд-разработки в Райффайзенбанке. Среди моих задач — проведение собеседований, при этом хочется, чтобы процесс был эффективным, продуктивным и полезным. Для проведения таких собеседований нам нужно выбрать классный инструмент для совместного написания кода. Изучив рынок инструментов, мы пришли к выводу, что из-за безопасности и функциональности проще написать свое решение. Под катом я рассказываю, как создать главный элемент платформы совместного написания и проверки кода — онлайн-песочницу. Она будет поддерживать один из самых популярных фреймворков и несколько библиотек для него, что достаточно для проверки необходимых навыков и умений во время собеседования. 
ProductivityInside;Технологии, которые будут популярны в 2020 году;https://habr.com//ru/company/productivity_inside/blog/462163/;"  Хоть это и кажется невероятным, 2020 год уже вот-вот наступит. Эта дату мы до сих пор воспринимали как нечто сошедшее со страниц научно-фантастических романов, и тем не менее, дела обстоят именно так — до 2020 года совсем рукой подать.  Если вам любопытно, каким может оказаться будущее для мира программирования, то вы по адресу. Возможно, я ошибаюсь по каждому пункту — не считайте мои слова непогрешимой истиной — однако ниже я изложу свои соображения о том, что нас ждет. Дара провидения у меня нет, но я могу сделать некоторые предположения на основании доступных данных. "
VanquisherWinbringer;Blazor Client Side Интернет Магазин: Часть 1 — Авторизация oidc (oauth2) + Identity Server4;https://habr.com//ru/post/484596/;" Привет, Хабр! Таки да, в прошлой своей статье я попробовал сделать Todo List на Blazor Wasm и остался доволен. Теперь я решил взяться за что-то по серьезней, чтобы опробовать его в деле. Буду делать простенький SPA UI на Blazor для простого вымышленного интернет магазина. Максимально приближенный к боевому применению вариант. Начну я с того что запилю авторизацию пользователей и разделения их по ролям т. е. чтобы админ и обычный пользователь видели немного разный интерфейс. Еще я это все в docker образы собрал и на docker registry выложил. За подробностями добро пожаловать под кат."
VanquisherWinbringer;Blazor Client Side Интернет Магазин: Часть 2 — CI/CD;https://habr.com//ru/post/484782/;"  Привет, Хабр! Продолжаю делать интернет магазин на Blazor. В этой части расскажу о том как я настроил CI/CD для него. За подробностями добро пожаловать под кат. "
Sm1le291;BlazingPizza: приложение на Blazor от начала и до конца. Часть 2. Добавляем компонент;https://habr.com//ru/post/487724/;"Привет всем! Всем тем, кто хочет узнать о Blazor немного больше. Сегодня мы продолжим создание нашего сайта для пиццерии, а именно, создадим web api контроллер и попробуем отобразить данные которые поступают из него на компоненте Blazor.  Поскольку наше приложение о пицце, то логичным будет сразу добавить класс представляющий наш основной продукт.   Назовём его BasePizza и добавим в проект BlazingPizza.DomainModels. На мой взгляд добавление нового класса очень круто реализовано в Rider, выскакивает неблокирующий диалог, вводим имя класса и тут же можем выбрать что именно нам нужно создать:  "
VanquisherWinbringer;Blazor Client Side Интернет Магазин: Часть 4 — Добавления товара в корзину;https://habr.com//ru/post/495418/;"  Привет, Хабр! Продолжаю делать интернет магазин на Blazor. В этой части расскажу о том как добавил в него возможность добавления товара в корзину. За подробностями добро пожаловать под кат. "
VanquisherWinbringer;Blazor Client Side Интернет Магазин: Часть 6 — Создание заказа и работа с компенсирующими действиями;https://habr.com//ru/post/496084/;"  Привет, Хабр! Продолжаю делать интернет магазин и изучать Blazor. В этой части расскажу о том как добавил в него возможность создания заказа, просмотра заказов и работу с последовательностью действий одно из которых может завершиться ошибкой. За подробностями добро пожаловать под кат. "
Ontologic;Ontology запускает Layer 2, внося вклад в более комплексную платформу публичной цепочки;https://habr.com//ru/post/504452/;"  Предисловие Представьте себе сценарий, в котором блокчейн платформа быстро развивается, а количество пользователей быстро растет, достигая десятков миллионов, что приводит к резкому увеличению сопутствующих расходов в течение короткого времени. Какие стратегии на данном этапе необходимы для поддержания операционной эффективности без ущерба для темпов развития из-за сложных процессов согласования и подтверждения? Как согласятся многие бизнес предприятия, масштабируемость должна быть приоритетом.  В качестве off-chain технологии масштабирования Ontology Layer 2 предлагает более высокую производительность и более низкие показатели. Предприятия могут безопасно хранить большое количество записей транзакций вне цепочки, а затем передавать их в цепочку, когда им нужно взаимодействовать, снижая затраты пользователей на транзакции и резко повышая производительность."
yantishko;Мы создали Web приложение для определения лиц и масок для Google Chrome (часть 1);https://habr.com//ru/post/547038/;Основная цель -  обнаружение лица и маски в браузере, не используя бэкенд на Python. Это простое приложение WebApp / SPA, которое содержит только JS-код и может отправлять некоторые данные на серверную часть для следующей обработки. Но начальное обнаружение лица и маски выполняется на стороне браузера и никакой реализации Python для этого не требуется.На данный момент приложение работает только в браузере Chrome.
Nurked;Пишем frontend на golang;https://habr.com//ru/post/567440/;"Вас задрало, что node_modules соревнуются по количеству используемого места с вашей коллекцией музыки?Вы перечитали инструкцию к Redux  в шестидесятый раз и поняли две вещи: ""До меня кажется доходит..."" и ""Думаю, мне стоит перечитать это ещё раз!""Вы в очередной раз узнали, что 1 + ""1"" == ""11"", а  [] - {} == NaN?Билд скрипт в webpack занимает больше места чем ваша библиотека на javascript?Тогда заходите под кат, я покажу вам, как можно перевести ваш фронтэнд на го. "
Cloud4Y;Deno можно обновить до версии 1.10;https://habr.com//ru/company/cloud4y/news/t/556968/;Вчера, 11.05.2021, создатели Deno (среды выполнения для JavaScript) объявили о выходе новой версии Deno 1.10. Анонсированы новые функции, улучшение производительности и исправление ряда ошибок.Главные изменения:
msgeek;Blazor Server in .NET Core 3.0 scenarios and performance;https://habr.com//ru/company/microsoft/blog/473146/;"Since the release of Blazor Server with .NET Core 3.0 last month lots of folks have shared their excitement with us about being able to build client-side web UI with just .NET and C#. At the same time, we’ve also heard lots of questions about what Blazor Server is, how it relates to Blazor WebAssembly, and what scenarios Blazor Server is best suited for. Should you choose Blazor Server for your client-side web UI needs, or wait for Blazor WebAssembly? This post seeks to answer these questions, and to provide insights into how Blazor Server performs at scale and how we envision Blazor evolving in the future.  What is Blazor Server? Blazor Server apps host Blazor components on the server and handle UI interactions over a real-time SignalR connection. As the user interacts with the app, the UI events are sent to the server over the connection to be handled by the various components that make up the app. When a component handles a UI event, it’s rendered based on its updated state. Blazor compares the newly rendered output with what was rendered previously and send the changes back to the browser and applies them to the DOM.  "
sahsAGU;Сценарии использования и производительность Blazor Server в .NET Core 3.0;https://habr.com//ru/company/microsoft/blog/473172/;С момента релиза Blazor Server с .NET Core 3.0 в прошлом месяце многие люди поделились с нами своим восторгом от возможности создания клиентского веб-интерфейса используя только с .NET и C#. В то же время мы также слышали много вопросов о том, что такое Blazor Server, как он связан с Blazor WebAssembly и для каких сценариев Blazor Server лучше всего подходит. Стоит ли выбирать Blazor Server для своего веб-интерфейса на стороне клиента или ждать Blazor WebAssembly? Этот пост призван ответить на эти вопросы и дать представление о том, как Blazor Server работает в масштабе, и каким мы видим развитие Blazor будущем.  
ru_vds;Первое знакомство с AssemblyScript;https://habr.com//ru/company/ruvds/blog/477272/;"Поддержка технологии WebAssembly (Wasm) появилась в браузерах относительно недавно. Но эта технология вполне может серьёзно расширить возможности веба, сделав его платформой, способной поддерживать такие приложения, которые обычно воспринимаются как настольные.  Освоение WebAssembly может оказаться непростым делом для веб-разработчиков. Однако ситуацию способен улучшить компилятор AssemblyScript.   Автор статьи, перевод которой мы сегодня публикуем, предлагает сначала поговорить о том, почему WebAssembly — это весьма многообещающая технология, а потом — взглянуть на то, как AssemblyScript может помочь в раскрытии потенциала Wasm."
ru_vds;Кто он — убийца JavaScript?;https://habr.com//ru/company/ruvds/blog/472338/;"Некоторые языки программирования — это языки, которые любят разработчики. Некоторые языки программирования лишь терпят. Для многих программистов JavaScript попадает в последнюю категорию, являясь языком, который нужно понимать каждому, кто пишет клиентские части веб-проектов, но таким, который никто не обязан любить.  Десять лет назад очевидно было то, что JavaScript имеет все шансы, так сказать, править миром. За эту честь сражались и другие платформы — такие, как Java, Flash и Silverlight. Всем этим трём платформам нужны, для работы в браузерах, специальные плагины. Все три меняют HTML-подход к формированию интерфейсов на что-то другое. Это позволило им уйти далеко вперёд от JavaScript в плане возможностей. Например — они умели проигрывать видео, выводить анимацию, рисовать что-то на экране. Всё это другие платформы поддерживали задолго до появления стандартного тега <video>, механизмов CSS-анимации и HTML-элемента canvas. Но всё это стало причиной их краха. Так, когда в мире начался бум мобильного интернета, и когда это было учтено в HTML, другие платформы оказались не у дел.    Ирония есть и в том, что происходит сейчас. В то самое время, когда JavaScript царствует в мире веб-разработки, появился один проект, вроде бы не особенно масштабный, который, когда-нибудь в будущем, способен стать убийцей JavaScript. То, о чём мы тут говорим, началось с экспериментальной технологии asm.js. Как это может выглядеть? Прежде чем ответить на этот вопрос — давайте немного притормозим и поговорим о современном положении дел."
ru_vds;Фронтенд-2017: о самом важном;https://habr.com//ru/company/ruvds/blog/345792/;"Много всего произошло в 2017-м, на самом деле — и подумать страшно — сколько всего случилось. Всем нравится шутить о том, как быстро всё меняется в разработке фронтенда, и в последние несколько лет это, вероятно, так и было. Рискуя быть неоригинальным, хочу сказать, что в 2017-м всё было не так, как прежде. Тенденции веб-разработки стабилизировались. В частности, популярные библиотеки стали, в большинстве своём, ещё популярнее, вместо того, чтобы сдвинуться на второй план под натиском конкурентов. В целом же веб-разработка стала гораздо более зрелой средой, чем раньше.    В этом материале мы поговорим о некоторых важных событиях, которые произошли в этом году в экосистеме клиентской веб-разработки, обращая особое внимание на общие тренды."
dimansny;Mozilla собирается использовать WASI для всех устройств, компьютеров и операционных систем;https://habr.com//ru/post/449554/;Всем привет! На связи TestMace и мы продолжаем знакомить вас с самыми горячими новостями из мира JavaScript. На очереди перевод статьи о WASI — технологии, которая позволит использовать WebAssembly вне браузеров Один формат, чтоб править всеми  Компания Mozilla на этой неделе представила проект под названием WASI (WebAssembly System Interface), призванный стандартизировать взаимодействие WebAssembly-кода с операционной системой. Если проект окажется успешным, он будет выполнять те же функции, что и виртуальная машина Oracle Java, но гораздо эффективнее и с расширенным функционалом.
ru_vds;Фронтенд-2019: итоги года;https://habr.com//ru/company/ruvds/blog/481576/;"В 2019 году мир фронтенд-разработки, как уже бывало, развивался с головокружительной скоростью. Материал, перевод которого мы сегодня публикуем, посвящён обзору важных событий, новостей и трендов 2019 года.    А вот, кстати, аналогичный материал, опубликованный нами в 2018 году. Там, в конце, есть раздел прогнозов на 2019 год. На наш взгляд, многие из них оправдались. Не обойдётся без прогнозов и эта статья, но не будем забегать вперёд."
ru_vds;Будущее веба: станет ли рендеринг в <canvas> заменой DOM?;https://habr.com//ru/company/ruvds/blog/560736/;"В последнее время было немало горестных рассуждений о последствиях решения Google использовать HTML-элемент <canvas> для рендеринга всего, что видно на экране при работе с Google Docs. И то, что это многих беспокоит, вполне понятно. Когда-то веб был задуман как система для работы с тщательно структурированной информацией, полной осмысленных метаданных и рассчитанной на совместное её использование многими людьми. Но, вместо этого, тот веб, который мы видим сегодня, представляет собой довольно сложно и запутанно устроенные приложения, которые работают в браузерных «песочницах».   Решение Google, которое заключается в том, чтобы перейти от вывода на страницы HTML-элементов к рисованию пикселей на <canvas>, нельзя назвать чем-то таким, чего раньше никто не видел и не пробовал. Другие передовые веб-приложения уже вышли далеко за пределы традиционных схем работы с HTML-элементами. Так, в Google Maps вывод данных на <canvas> используется уже многие годы. В VS Code для отрисовки идеального интерфейса терминала тоже используется <canvas>. А в подающем надежды наборе инструментов Google Flutter, который позволяет создавать кросс-платформенные интерфейсы, в веб-браузере, по умолчанию, используется рендеринг с использованием <canvas>.  Но в этот раз происходящее вызывает несколько иные ощущения. А именно, появляется такое чувство, что рендеринг в <canvas> и другие современные технологии, вроде WebAssembly, увели нас за точку невозврата. Все привыкли к схеме работы, когда страница загружает, в виде обычного текста, JavaScript-код, который выполняется, взаимодействуя с HTML-элементами, видимыми в «инструментах разработчика». Сейчас возникает такое впечатление, что это — лишь небольшой этап на пути постоянно развивающихся технологий веб-разработки."
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №165 (15 — 21 июня 2015);https://habr.com//ru/company/zfort/blog/260805/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
32bit_me;Что нового в LLVM;https://habr.com//ru/post/352776/;"LLVM 6 уменьшает опасность Spectre, имеет улучшенную поддержку Windows и CPU компании Intel, а также включает WebAssembly в число поддерживаемых целевых платформ.    Инфраструктура компилятора LLVM прошла путь от технически любопытной вещи до живой части современного ландшафта программного обеспечения. Это то ядро, которое стоит за компилятором Clang, за компиляторами языков Rust и Swift, и предоставляет широкие возможности для разработки компиляторов для новых языков."
m1rko;Iodide: интерактивный научный редактор от Mozilla;https://habr.com//ru/post/444596/;" Изучение аттрактора Лоренца, а затем редактирование кода в Iodide  В последние десять лет произошёл настоящий взрыв интереса к «научным вычислениям» и «науке о данных», то есть применению вычислительных методов для поиска ответов на вопросы, анализа данных в естественных и социальных науках. Мы видим расцвет специализированных ЯП, инструментов и методов, которые помогают учёным исследовать и понимать данные и концепции, а также сообщать о своих выводах.   Но на сегодняшний день очень немногие научные инструменты используют полный коммуникационный потенциал современных браузеров. Результаты дата-майнинга не очень удобно просматривать в браузере. Поэтому сегодня Mozilla представляет Iodide — экспериментальный инструмент, который помогает учёным составлять красивые интерактивные документы с использованием веб-технологий, всё в рамках итеративного рабочего процесса, который многим знаком. "
olegchir;На практике в 80-90% случаев веб-приложение тормозит из-за фронтенда: интервью с Иваном Акуловым;https://habr.com//ru/company/jugru/blog/472838/;" Иван Акулов — Google Developer Expert в веб-технологиях и основатель перформанс-компании PerfPerfPerf. Уже совсем скоро на HolyJS 2019 Moscow он проведет воркшоп, посвященный, как ни странно, перформансу — поиску проблем в React, дебагу медленных приложений и другим рантайм-вещам.  Чтобы больше погрузить читателей и посетителей HolyJS 2019 Moscow в тему, мы обсудили с Иваном:  Самые популярные проблемы перформанса; Чем измерять производительность и в чем могут быть проблемы; Как оптимизировать перформанс; Поиск проблем с производительностью в React; Пользу перехода на HTTP/2 и HTTP/3; Паким фреймворком лучше пользоваться на новых проектах; О пользе WebAssembly; Где искать полезную информацию о перформансе; О чем будет его воркшоп и кому на него будет интересно прийти (и зачем вообще ходить на воркшопы).  Вопросы задают Дмитрий Махнёв и Артём Кобзарь из программного комитета HolyJS."
ru_vds;Что нового можно ожидать от Node.js в 2020 году?;https://habr.com//ru/company/ruvds/blog/479270/;"В 2019 году Node.js исполнилось 10 лет. Количество пакетов, доступных в реестре npm, пересекло отметку в 1 миллион. С каждым годом объём загрузок самой платформы Node.js увеличивается на 40%. Ещё одной важной вехой для Node.js стало то, что этот проект присоединился к OpenJS Foundation. Благодаря этому можно ожидать улучшения состояния и стабильности проекта, а также, в целом, положительных сдвигов в области взаимодействия членов JavaScript-сообщества.    Несложно заметить то, что за короткий отрезок времени, за год, в мире Node.js произошло много всего интересного. Каждый год Node.js набирает обороты. У нас нет причин рассчитывать на что-то другое в 2020.  В следующих релизах Node.js нас ждёт множество интересных возможностей. Этот материал посвящён наиболее значительным новшествам платформы, которые могут появиться в ней в 2020 году."
ru_vds;Разработка веб-приложения на Rust;https://habr.com//ru/company/ruvds/blog/416933/;Автор материала, перевод которого мы сегодня публикуем, говорит, что его самым свежим экспериментом в области архитектуры программных проектов стало создание рабочего веб-приложения с использованием исключительно языка Rust и с минимально возможным применением шаблонного кода. В этом материале он хочет поделиться с читателями тем, что он выяснил, разрабатывая приложение и отвечая на вопрос о том, готов ли уже Rust к применению его в различных сферах веб-разработки.  
len;Run, Gopher, run! — о чем поговорим на GolangConf;https://habr.com//ru/company/oleg-bunin/blog/469357/;"Мы обещали 5-6 причин перейти на Go, так и получилось! На GolangConf — конференции полностью посвященной Go — 7 октября будет 5 докладов с пометкой «Переход на Go» для тех, кто только собирается или начинает использовать этот язык в своих проектах.  Но это только начало. С первого раза нам удалось собрать очень сильную и разнообразную программу, отвечающую потребностям трех категорий участников: профессиональных Go-разработчиков; тех, кто только переходит на Go; инженеров-инфраструктуры и пользователей инструментов, написанных на Go.    В программе конференции 21 доклад, сессия блиц-докладов и митапы. В любое время гости конференции смогут выбрать из 3–4 разных тем и найти для себя что-нибудь интересное. Думаю даже, что более актуальной будет проблема выбора и невозможность разорваться между потоками (хорошо, что потом все будет на видео). Одновременно в разных залах будут обсуждаться темы, актуальные самым разным специалистам."
ru_vds;Фронтенд-2018: итоги года;https://habr.com//ru/company/ruvds/blog/433396/;Мир веб-разработки развивается невероятно быстро. То, что вчера было новостью, сегодня уже может устареть, а то, о чём сегодня почти никто не знает, завтра способно стать двигателем прогресса. В материале, перевод которого мы сегодня публикуем, будет рассмотрено всё самое интересное, произошедшее в сфере фронтенда в 2018 году. Речь пойдёт о развитии фреймворков и вспомогательных инструментов, о JavaScript-трендах, а также о том, в каком направлении фронтенд может пойти в 2019-м.  
AnnieBronson;Преемник Firefox OS: Mozilla и KaiOS объявили о партнерстве;https://habr.com//ru/news/t/492570/;"  Компания KaiOS Technologies, создатель операционной системы для кнопочных мобильных телефонов KaiOS, и компания Mozilla будут вместе работать над улучшением движка Gecko для KaiOS. Цель сотрудничества — добиться совместимости будущих версий Gecko с устройствами с поддержкой KaiOS."
maybe_elf;«Архив Интернета» сохраняет историю Flash-контента эмулятором Ruffle;https://habr.com//ru/news/t/529032/;"  За несколько недель до запланированного Adobe завершения поддержки Flash «Архив Интернета» объявил, что создал новую коллекцию, посвященную Flash-контенту. Это позволил сделать встроенный эмулятор Ruffle. "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №252 (27 — 5 марта 2017);https://habr.com//ru/company/zfort/blog/323266/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.  
maxfarseer;Вышел Webpack 4 Legato;https://habr.com//ru/post/350224/;"Мы рады сообщить, что сегодня стал доступен webpack 4 (Legato). Его можно скачать через npm или yarn, выполнив: $> yarn add webpack webpack-cli --dev или $> npm i webpack webpack-cli --save-dev"
ozkriff;Новости Rust #2 (октябрь 2018);https://habr.com//ru/post/429038/;" Лучше с задержкой на неделю, чем никогда, так что предлагаю вашему вниманию субъективную подборку ржавых новостей за октябрь. В этой подборке: Rust 1.30, Rust 2018, конференция RustRush, Amethyst 0.9, сквотинг crates.io, сборщик мусора, споры про 2D графику, Non-lexical lifetimes, функциональный GUI. Rust 1.30 и тестирование Rust2018 Вышел Rust 1.30 (обсуждение). Основные нововведения — частичная стабилизация процедурных макросов, импорт макросов через обычный use, улучшение системы модулей, ""сырые"" идентификаторы и поддержка no_std приложений (подробнее в хабропереводе). Rust 1.31 будет первым выпуском редакции (edition) ""Rust2018"" (что за ""редакции""?), в связи с чем всех желающих приглашают подключаться к тестированию бета версии 1.31 и cargo fix. RustRush 2018: конференция 15-16 декабря в Москве RustRush 2018 — конференция для разработчиков на Rust, посвящённая вебу, блокчейну, высокой производительности и системному программированию. Обновился сайт (rustrush.ru) — опубликован почти полный список докладчиков и программа, начата продажа основной партии билетов. Будут четыре участника проекта Rust Language: Стив Клабник, Эшли Уильямс, Паскаль Хертлиф, Катарина Фей. Из других звёзд локальных и не очень — Максим Лапшин с прошивкой IP-камеры, Костя Степанов и Пьер Кригер aka tomaka. Программа."
sahsAGU;Blazor 0.8.0 experimental release now available;https://habr.com//ru/company/microsoft/blog/440544/; Blazor 0.8.0 is now available! This release updates Blazor to use Razor Components in .NET Core 3.0 and adds some critical bug fixes. Get Blazor 0.8.0 To get started with Blazor 0.8.0 install the following:  .NET Core 3.0 Preview 2 SDK (3.0.100-preview-010184) Visual Studio 2019 (Preview 2 or later) with the ASP.NET and web development workload selected. The latest Blazor extension from the Visual Studio Marketplace. The Blazor templates on the command-line: dotnet new -i Microsoft.AspNetCore.Blazor.Templates::0.8.0-preview-19104-04  You can find getting started instructions, docs, and tutorials for Blazor at https://blazor.net.
ru_vds;Тренды программирования: чего можно ожидать в 2020 году?;https://habr.com//ru/company/ruvds/blog/462009/;"Как бы безумно это не звучало, но 2020 год наступит уже очень скоро. «2020 год» — это похоже на фразу из научно-фантастического романа. Но это не фантастика. Нас от этой даты отделяет всего несколько месяцев.    Автор материала, перевод которого мы публикуем сегодня, говорит, что если вас занимает вопрос о том, что будущее может принести в мир программирования, то вы, читая это, оказались в нужном месте в нужное время. Он отмечает, что, размышляя о том, что может произойти, вполне может ошибаться в своих прогнозах и просит его не цитировать. По его словам, он не может предсказать будущее, но способен сделать обоснованное предположение о том, каким оно будет.  Лучший способ предсказать будущее — это создать его. А. Линкольн"
ProductivityInside;Mozilla — прекрасная IT-компания, которую мы теряем;https://habr.com//ru/company/productivity_inside/blog/515534/;"  Когда разнеслась новость о том, что Mozilla начинает волну сокращений – уже вторую за текущий год – реакция последовала незамедлительно. От внимания разработчиков не ускользнуло, что компания уже срезала весь корпоративный жирок и теперь кромсает живые мышцы. Она распустила команду, которая занималась защитой от угроз. Она «сократила издержки» на инструменты для разработчиков – раздел, пользовавшийся большой популярностью. Она урезала команду Servo, которая работала над браузерным движком нового поколения на базе Rust. Она стёрла с лица земли команду MDN. В общем и целом, две волны сокращений суммарно унесли почти треть сотрудников.  Учитывая, что программисты составляют значительную часть весьма скромной пользовательской базы Mozilla, усечение инструментов для разработчиков представляется особенно недальновидным решением, которое разочарует самых преданных пользователей. Однако люди, мало знакомые с историей компании, скорее всего, примут ситуацию за очередной пример того, как игрок не сумел пробиться на конкурентном рынке, делая ставку на нишевые возможности. В конце концов, флагманский продукт компании, браузер Firefox, уже много лет не претендует на лидерство на рынке. Значит, это просто процесс вымирания очередного динозавра, что же ещё?"
Polina_Averina;Пишем фильтры WASM для Envoy и деплоим их с Istio;https://habr.com//ru/company/southbridge/blog/539484/; Envoy — это высокопроизводительный программируемый прокси L3/L4 и L7, на котором основано множество реализаций service mesh, например, Istio. Envoy обрабатывает трафик с помощью сетевых фильтров, которые можно объединять в цепочки, чтобы реализовывать сложные функции для контроля доступа, преобразования, обогащения данных, аудита и так далее. Чтобы расширить функционал Envoy, новые фильтры можно добавить одним из двух способов:  Интегрируем дополнительные фильтры в исходный код Envoy и компилируем новую версию Envoy. Недостаток такого подхода в том, что придется поддерживать свою версию Envoy и постоянно синхронизировать ее с официальным дистрибутивом. Фильтр, кстати, нужно реализовать на C++, как и сам Envoy. Динамически загружаем новые фильтры в Envoy Proxy в рантайме. 
Bright_Translate;Уверены, что отличите ассемблер от других языков?;https://habr.com//ru/company/ruvds/blog/554910/;"  Немногие смело признают, что могут ошибиться в идентификации ассемблера, ведь это по-своему особенный язык. Однако не спешите с выводами, а лучше пройдите небольшой тест, который не просто позволит взгляуть на него в ином свете, но и проверит вашу осведомленность в этой сфере."
medianoche;Почему JavaScript работает быстрее, чем С++?;https://habr.com//ru/post/281879/;"  Да, вы не ослышались. Глючный, тупой, тормознутый JavaScript работает быстрее, чем С++. Подождите тянуться к return userKarmaVote(), дайте мне возможность всё объяснить. Адвокат!"
ru_vds;JavaScript-тренды, на которые стоит обратить внимание в 2017-м;https://habr.com//ru/company/ruvds/blog/319162/;"  Я решил написать этот материал после того, как увидел твит Дэна Абрамова, за который хочу сказать ему огромное спасибо. Дэн задал своим подписчикам вопрос о самых интересных событиях в мире JavaScript, которые достойны внимания широкой общественности.  What is the most interesting thing happening in the JavaScript world that deserves more exposure?— Dan Abramov (@dan_abramov) December 29, 2016  Любители JS на вопрос откликнулись, под твитом собралась целая гора ответов. Каждый говорил о том, на что, по его мнению, стоит обратить внимание в 2017-м году. В результате получилась весьма занимательная подборка, из которой я выбрал всё лучшее и добавил пояснения. "
Tenphi;Знай свой JIT: ближе к машине;https://habr.com//ru/company/oleg-bunin/blog/417459/;"До того, как написанный нами код будет исполнен, он проходит довольно долгий путь. Андрей Мелихов в своем докладе на РИТ++ 2018 разобрал каждый шаг на этом пути на примере движка V8. Заходите под кат, чтобы выяснить, что даёт нам глубокое понимание принципов работы компилятора и как сделать JavaScript код производительнее.    Узнаем, является ли WASM серебряной пулей для повышения производительности кода, и всегда ли оправданы оптимизации.  Спойлер: «Преждевременная оптимизация — корень всех бед», Дональд Кнут.    О спикере: Андрей Мелихов работает в компании Яндекс.Деньги, активно пишет на Node.js, а в браузере — меньше, поэтому ему ближе серверный JavaScript. Андрей поддерживает и развивает сообщество devShacht, заходите познакомиться на GitHub или Medium."
ozkriff;Rust новости #3 (ноябрь 2018);https://habr.com//ru/post/432250/; Предлагаю вашему вниманию субъективную подборку ржавых новостей за ноябрь. В этой подборке: Rust 2018, RustRush, видео с конференций, Amazon Lambda и Firecracker, квизы, переход exonum на actix-web, 10 причин использовать Rust. Результаты Rust опроса 2018  Опубликованы результаты ежегодного Rust-опроса (обсуждение), который шел с августа.
Bulanov;Blazor перешел из стадии эксперимента в Preview;https://habr.com//ru/company/microsoft/blog/449556/;"С этим новым релизом мы рады сообщить, что Blazor теперь в стадии превью! Blazor больше не является экспериментальным, и мы обязуемся предоставлять его в качестве поддерживаемого фреймворка веб-интерфейса, включая поддержку запуска на стороне клиента в браузере на WebAssembly.  Чуть более года назад мы запустили экспериментальный проект Blazor с целью создания клиентского фреймворка веб-интерфейса на основе .NET и WebAssembly. В то время Blazor был нечто чуть-большим, чем прототип, и было много открытых вопросов о жизнеспособности запуска .NET в браузере. С тех пор мы выпустили девять экспериментальных релизов Blazor, посвященных различным проблемам, включая компонентную модель, привязку данных, обработку событий, маршрутизацию, макеты, размер приложения, модели хостинга, отладку и инструменты. Сейчас мы находимся в точке, когда мы думаем, что Blazor готов сделать свой следующий шаг. "
msgeek;Blazor now in official preview;https://habr.com//ru/company/microsoft/blog/449774/;With this newest Blazor release we’re pleased to announce that Blazor is now in official preview! Blazor is no longer experimental and we are committing to ship it as a supported web UI framework including support for running client-side in the browser on WebAssembly. A little over a year ago we started the Blazor experimental project with the goal of building a client web UI framework based on .NET and WebAssembly. At the time Blazor was little more than a prototype and there were lots of open questions about the viability of running .NET in the browser. Since then we’ve shipped nine experimental Blazor releases addressing a variety of concerns including component model, data binding, event handling, routing, layouts, app size, hosting models, debugging, and tooling. We’re now at the point where we think Blazor is ready to take its next step. 
owlnagi;Итоги: 9 главных технологических прорывов 2019 года;https://habr.com//ru/company/vdsina/blog/482496/;"На связи Александр Чистяков, я евангелист vdsina.ru и расскажу про 9 лучших технологических событий 2019 года.  В оценке я больше полагался на свой вкус, чем на мнение экспертов. Поэтому в этот список, например, не вошли беспилотные автомобили, потому что ничего принципиально нового и удивительного в этой технологии нет.  Я не сортировал события в списке по значимости или вау-эффекту, потому что их значимость будет понятна лет через десять, а вау-эффект слишком краткосрочен, просто постарался сделать эту историю связной. "
Finnix;Как мы в Dropbox перешли с Nginx на Envoy;https://habr.com//ru/company/southbridge/blog/513504/;В этой статье мы будем говорить о нашей старой инфраструктуре, основанной на Nginx, ее болячках, а также выгоде, которую мы получили после миграции на Envoy. Мы сравним Nginx и Envoy различными способами. Также кратко коснемся процесса миграции, текущего состояния, а также проблем, возникших при переходе. 
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №166 (22 — 28 июня 2015);https://habr.com//ru/company/zfort/blog/261337/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
ru_vds;Как работает JS: сетевая подсистема браузеров, оптимизация её производительности и безопасности;https://habr.com//ru/company/ruvds/blog/354070/;"[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы В переводе двенадцатой части серии материалов о JavaScript и его экосистеме, который мы сегодня публикуем, речь пойдёт о сетевой подсистеме браузеров и об оптимизации производительности и безопасности сетевых операций. Автор материала говорит, что разница между хорошим и отличным JS-разработчиком заключается не только в уровне освоения языка, но и в том, насколько хорошо он разбирается в механизмах, не входящих в язык, но используемых им. Собственно говоря, работа с сетью — это один из таких механизмов.   "
ruapus;Представлен .NET 5;https://habr.com//ru/company/raiffeisenbank/blog/451136/;"6 мая было объявлено, что следующим после .NET Core 3.0 релизом будет .NET 5. Это будет следующий большой релиз в семействе .NET.  В будущем останется только один .NET, и вы сможете использовать его для разработки под Windows, Linux, macOS, iOS, Android, tvOS, watchOS, WebAssembly и другие платформы.  Мы представим новые .NET API, возможности исполняющей среды и возможности языка как части .NET 5.  "
Elliot_001;Введение в ECMAScript 2017 (ES8);https://habr.com//ru/post/475074/;"Оглавление Предисловие Краткий обзор ES7 1. Object.entries 2. Object.values 3. String.prototype.padEnd 4. String.prototype.padStart 5. Object.getOwnPropertyDescriptor 6. Trailing commas 7. SharedArrayBuffer 8. Atomics 9. Async functions  Предисловие Здравствуйте, в прошлом я уже рассматривал нововведения в ES6 и теперь время разобрать ES8 так как он принёс много нового. Рассматривать отдельно ES7 (2016), я не стал так как этот релиз принёс всего 2 нововведения. Это Array.prototype.includes() и оператор возведения в степень. Но всё же прежде чем приступить к ES8, давайте рассмотрим нововведения из ES7.  Краткий обзор ES7 Метод includes() определяет, содержит ли массив определённый элемент, возвращая в зависимости от этого true или false.   Array.prototype.includes(searchElement[, fromIndex = 0]) : Boolean  searchElement — Искомый элемент.  fromIndex — Позиция в массиве, с которой начинать поиск элемента searchElement. При отрицательных значениях поиск производится начиная с индекса array.length + fromIndex по возрастанию. Значение по умолчанию равно 0."
msgeek;A new experiment: Call .NET gRPC services from the browser with gRPC-Web;https://habr.com//ru/company/microsoft/blog/486450/;"I’m excited to announce experimental support for gRPC-Web with .NET. gRPC-Web allows gRPC to be called from browser-based apps like JavaScript SPAs or Blazor WebAssembly apps.  gRPC-Web for .NET promises to bring many of gRPC’s great features to browser apps:   Strongly-typed code-generated clients Compact Protobuf messages Server streaming  "
sahsAGU;Новый эксперимент: Вызов сервисов .NET gRPC из браузера с gRPC-Web;https://habr.com//ru/company/microsoft/blog/487548/;"Рады объявить об экспериментальной поддержке gRPC-Web с .NET. gRPC-Web позволяет вызывать gRPC из приложений на основе браузера, таких как JavaScript SPA или приложений Blazor WebAssembly.  gRPC-Web для .NET обещает привнести многие замечательные функции gRPC в приложения для браузеров:   Строго-типизированные кодо-сгенерированные клиенты Компактные сообщения Protobuf Серверный стриминг  "
ru_vds;Об изменчивых методах объекта Math в JavaScript;https://habr.com//ru/company/ruvds/blog/489826/;Сегодня мы публикуем перевод статьи о математических вычислениях в JavaScript, которая представляет собой письменный вариант выступления её автора на WaffleJS. А само это выступление было чем-то вроде продолжения этой беседы в Twitter.   Математическое образование
skillfactory_school;Надоел JavaScript — используй браузерный Python;https://habr.com//ru/company/skillfactory/blog/511146/;"Мой опыт разработки игры «Змейка» на Brython    «Погоди, что?» – думаю, большинство читателей отреагирует на заголовок именно так.  В смысле «просто использовать Python в браузере»?  Все знают, что в браузерах работает только JavaScript.  Ну, выше приведен скриншот с исходным кодом моего личного сайта. Взгляните, возможно вы увидите для себя что-то новое.  Да, это Python!  А теперь, давайте поговорим о том, как и насколько хорошо это работает, а также обсудим ряд других альтернатив JavaScript.  Знакомство с Brython Brython — это реализация Python3, написанная на JavaScript, которая позволяет писать код на Python для веба.  По сути, это JavaScript-библиотека, которая преобразует ваш код на Python в эквивалентный JS и исполняет его в рантайме.  Поскольку написание браузерного кода на Python звучит круто, я решил попробовать."
ph_piter;Книга «Golang для профи: работа с сетью, многопоточность, структуры данных и машинное обучение с Go»;https://habr.com//ru/company/piter/blog/514518/;" Привет, Хаброжители!   Вам уже знакомы основы языка Go? В таком случае эта книга для вас. Михалис Цукалос продемонстрирует возможности языка, даст понятные и простые объяснения, приведет примеры и предложит эффективные паттерны программирования. Изучая нюансы Go, вы освоите типы и структуры данных языка, а также работу с пакетами, конкурентность, сетевое программирование, устройство компиляторов, оптимизацию и многое другое. Закрепить новые знания помогут материалы и упражнения в конце каждой главы. Уникальным материалом станет глава о машинном обучении на языке Go, в которой вы пройдёте от основополагающих статистических приемов до регрессии и кластеризации. Вы изучите классификацию, нейронные сети и приёмы выявления аномалий. Из прикладных разделов вы узнаете: как использовать Go с Docker и Kubernetes, Git, WebAssembly, JSON и др. "
host_m;Нам надо создать веб с чистого листа;https://habr.com//ru/company/vdsina/blog/516584/;"  Эволюция веба на протяжении последнего десятилетия отражает развитие американской экономики. Все ключевые показатели движутся на графиках «вверх и вправо», стабильный поток фундаментальных прорывов обеспечивает ощущение «прогресса», но в действительности удобство работы и влияние технологий на людей стагнирует или даже регрессирует.  Этот кризис влияет на платформы, творцов и потребителей."
sahsAGU;Статические веб-приложения Azure с .NET и Blazor;https://habr.com//ru/company/microsoft/blog/529474/;"  Статические веб-приложения Azure — это сервис, который автоматически создает и развертывает веб-приложения полного стека из репозитория GitHub. Статические веб-приложения Azure состоят из статического веб-клиента и серверной части на базе Azure Functions. При создании ресурса «Статические веб-приложения» Azure создает в репозитории исходного кода приложения рабочий процесс GitHub Actions, который отслеживает выбранную вами ветвь. Всякий раз когда вы отправляете фиксации в отслеживаемую ветвь, рабочий процесс GitHub Actions автоматически создает и развертывает ваше приложение и его API-интерфейс.   На сегодняшний день в статических веб-приложениях Azure реализована первоклассная поддержка Blazor WebAssembly и .NET Functions в ознакомительной версии во всех регионах ее действия. Это было одним из ключевых запросов пользователей с момента объявления о выпуске статических веб-приложений на конференции Build. Вы можете разрабатывать и развертывать клиентские и бессерверные API-интерфейсы, созданные полностью на языке .NET.   Давайте попробуем! "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №254 (13 — 19 марта 2017);https://habr.com//ru/company/zfort/blog/324330/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.   
ru_vds;ArrayBuffer и SharedArrayBuffer в JavaScript, часть 1: краткий курс по управлению памятью;https://habr.com//ru/company/ruvds/blog/331344/;"Автоматическое управление памятью… Хорошо это или плохо? Однозначного ответа нет и быть не может. С одной стороны — это удобно, хотя совсем забыть о памяти не получится. С другой — за удобства приходится платить.  JavaScript — это как раз тот случай, когда управление памятью выполняется в автоматическом режиме, однако, появление ArrayBuffer и SharedArrayBuffer меняет ситуацию.    Для того, чтобы понять, что именно приносят в JS-разработку ArrayBuffer и SharedArrayBuffer, почему эти объекты появились в языке, предлагаем начать с самого начала, а именно — с разговора об управлении памятью."
saipr;Есть ли альтернатива MS Windows, IE и CSP при доступе в личные кабинеты порталов Госзакупок, ФНС России и Госуслуг;https://habr.com//ru/post/334162/;"  И сразу дадим ответ – да, можно и нужно, только не отказаться, а дать гражданам и организациям возможность использовать и другие операционные системы, браузеры и средства криптографической защиты информации (СКЗИ). Ответим на вопрос и как – соблюдать стандарты и технологии. Почему бы для доступа в личные кабинеты не использовать авторизованный доступ по протоколу https? И тогда нет необходимости в использования только CSP а ля Микрософт с поддержкой российской криптографии. Тогда автоматом станут востребованы и токены PKCS#11 и как международный стандарт, так и стандарт, поддерживаемый ТК-26, стандарты PKCS#12 (тем же ТК-26), может что-то другое, но стандартное. В этом случае речь уже будет идти не об MS Windows, Interner Explorer и CSP, а о браузерах или других программ с поддержкой https с российскими шифрсьютами. Это может быть и Internet Explorer, и модификации того же Mozilla Firefox, наконец Google Chrome или прокси типа stunnel. "
konsoletyper;TeaVM — инструмент для создания веб-фронтэнда на Java, Kotlin и Scala;https://habr.com//ru/post/339998/;"Довольно давно я опубликовал на Хабре статью, где рассказал про свой проект, TeaVM. С тех пор много всего произошло с ним, в том числе одна важная вещь, про которую речь пойдёт ниже и ради которой я решил снова написать на Хабр. Но для начала кратко напомню, про что проект. Итак, TeaVM — это компилятор байт-кода Java в JavaScript. Идея создания TeaVM пришла мне, пока я работал full-stack Java разработчиком и использовал для написания фронтэнда GWT. В те времена (а это где-то лет 5 назад) не были широко распространены инструменты вроде node.js, webpack, babel, TypeScript; Angular был в первой версии, а альтернатив вроде React и vue.js не было вообще. Тогда ещё на полном серьёзе люди тестировали сайты в IE7 (а некоторые, кому не повезло с заказчиками, даже IE6). В целом, экосистема JavaScript была гораздо менее зрелой, чем сейчас, и без боли писать на JavaScript было нельзя. GWT мне нравился тем, что на фоне всего этого он казался адекватным решением, хотя и не лишённым своих недостатков. Основные проблемы перечислены под катом:"
therealal;Как мы пилили IoT-платежи на хакатоне в Гонконге;https://habr.com//ru/company/mixbytes/blog/414803/; 10 июня шёл уже третий день нашей акклиматизации в Гонконге. А последние 26 часов мы провели почти без сна, разрабатывая прототип проекта под рабочим названием SensorPay на первом этапе хакатона EOS Global с общим призовым фондом полтора миллиона долларов. Близился момент демонстрации проекта перед судьями. Если вам не терпится узнать, чем закончилась эта история, загляните сразу в последнюю часть. А мы пока начнём планомерно рассказывать о технологиях EOS и о том, как мы пришли к идее привязать к EOS платежи для IoT. Сразу после этого будет подробное описание технической начинки проекта.
ru_vds;Почему человек из мира Java стал горячим сторонником Node.js и JavaScript?;https://habr.com//ru/company/ruvds/blog/421741/;Дэвид Хэррон, автор материала, перевод которого мы публикуем сегодня, задался следующим вопросом: «Должен ли человек, работавший более 10 лет в Sun Microsystems, в команде Java SE, до последнего вздоха думать лишь о байт-коде Java и создавать экземпляры абстрактных интерфейсов?». Он задавал этот вопрос применительно к себе, и для него платформа Node.js, после Java, оказалась подобна глотку свежего воздуха. Дэвид говорит, что когда он был уволен из Sun в январе 2009 года (прямо перед поглощением этой компании Oracle), он узнал о Node.js. Эта технология его зацепила. Что значит «зацепила»? С 2010-го года он много писал о программировании для Node.js. А именно, написал несколько книг, в том числе — «Node.js Web Development», четвёртое издание которой вышло в этом году. Он подготовил множество небольших материалов о Node.js, опубликованных в интернете. Фактически, он уделил очень много времени и сил, рассказывая о платформе Node.js и о возможностях JavaScript. Почему того, кто раньше занимался исключительно Java, так увлекли Node.js и JavaScript?  
ozkriff;Новости Rust #1 (Сентябрь 2018);https://habr.com//ru/post/425005/;" Мой комментарий к новости про Rust 1.28 с обзором ржавых событий за месяц неплохо зашел, так что вот держите очень субъективный срез ржавых новостей за прошлый месяц. В этой подборке: Rust 1.29, записи докладов с Rustconf 2018, gfx-rs, Rust2018, порт Flatbuffers, новые версии ripgrep и Alacritty. Rust 1.29 Вышел Rust 1.29. Основные нововведения — доступные сразу из rustup'а cargo fix и cargo clippy (подробнее в хабропереводе). Следом была выпущена версия 1.29.1, закрывшая ошибку в std::repeat (обсуждение). Rust 1.30 и 1.31 будут очень значительными.Точного списка пока нет, но ожидается что:  в 1.30 (2018.10.26) войдет частичная стабилизация процедурных макросов; в 1.31 (2018.12.07) войдут Rust 2018 + non-lexical lifetimes (NLL). "
PatientZero;Два Z80 на одну машину: чем отличались 8-битные аркадные автоматы от домашних компьютеров?;https://habr.com//ru/post/426291/;"Что я узнал об аркадном автомате Bomb Jack в процессе создания его эмулятора   Недавно я написал небольшой эмулятор автомата Bomb Jack, в основном для того, чтобы разобраться, чем эти первые 8-битные аркадные автоматы отличались по конструкции от 8-битных домашних компьютеров.  Как я узнал намного позже, встреча на летней ярмарке в моём родном городе с аркадными автоматами наподобие Bomb Jack стала одним из тех моментов, которые переменили мою судьбу. Обычным летним днём, потратив весь свой запас монет на аркадные автоматы, я возвращался домой, и голова моя была заполнена цветами и звуковыми эффектами. Я пытался понять, как работали эти игры. А затем до конца года я тратил всё своё время после школы на создание довольно блеклых копий этих аркадных игр на домашнем компьютере. Я походил на поклонника карго-культа с островов Тихого океана, желавшего создать американскую военную радиостанцию из палок.  Сначала я думал над идеей создания эмулятора Pengo, потому что мой подростковый мозг эта игра впечатлила гораздо сильнее, чем Bomb Jack (кстати, вот моя карго-культовая версия Pengo). Но аркадное оборудование Pengo потребовало бы создания эмуляторов новых чипов для звука и видео, а для Bomb Jack оказалось достаточно уже имевшихся у меня частей (Z80 в качестве ЦП и AY-3-8910 для звука), поэтому первым я взялся за Bomb Jack. "
SamProf;Компиляция и запуск C# и Blazor внутри браузера;https://habr.com//ru/post/433818/;Введение  Если вы Web-разработчик и ведете разработку для браузера, то вы точно знакомы с JS, который может исполняться внутри браузера. Существует мнение, что JS не сильно подходит для сложных вычислений и алгоритмов. И хотя в последние годы JS cделал большой рывок в производительности и широте использования, многие программисты продолжают мечтать запустить системный язык внутри браузера. В ближайшее время игра может поменяться благодаря WebAssembly. Microsoft не стоит на месте и активно пытается портировать .NET в WebAssembly. Как один из результатов мы получили новый фреймворк для клиенской разработки — Blazor. Пока не совсем очевидно, сможет ли Blazor за счет WebAssembly быть быстрее современных JS — фреймворков типа React, Angular, Vue. Но он точно имеет большое преимущество — разработка на C#, а так же весь мир .NET Core может быть использован внутри приложения. 
glebmachine;Программный комитет FrontendConf: фреймворки, горизонты, мировой опыт и миссия конференции;https://habr.com//ru/company/oleg-bunin/blog/450820/;"Привет, Хабр!  Я руковожу Программным комитетом конференции FrontendConf и хочу рассказать как все работает изнутри, объяснить, что мы вложили в программу, почему выбрали те или иные доклады. Почему, при всем обилии информации в интернете, конференции — не просто тематическая тусовка, а реально полезное мероприятие. Рассказать, зачем, в конце концов, мы этим занимаемся, и кто это мы, потому что конференция — это, в первую очередь, люди.    Спикеры — «лицо» конференции: по заявленным и принятым докладам участники судят о полезности события и решают пойти или нет. Но за «кулисами» присутствуют и другие незримые участники мероприятия, которые и определяют, каким будет это лицо. Это Программный комитет. У нас на FrontendConf подобрался коллектив очень классных, активных ребят. Всех, конечно, упомянуть не получится, но постараюсь рассказать и о тех, и о других."
otstanie;От Babel до GraphQL: доклады HolyJS 2019 Moscow;https://habr.com//ru/company/jugru/blog/499722/;"Если вы JS-разработчик, то браузер для вас — дом родной, но можете ли вы описать пошагово все действия браузера для отрисовки вашей прекрасной страницы? И вы наверняка уже слышали про WebAssembly, но знаете ли, что «внутри» у этой технологии?    Углубиться в эти и многие другие JS-темы помогут доклады. В ноябре прошла HolyJS 2019 Moscow, а теперь её видеозаписи открыты для всех, и мы традиционно публикуем на Хабре подборку — в общем, есть чем занять выходные на самоизоляции. "
grvelvet;Armory Engine. Введение;https://habr.com//ru/post/529784/;" Привет! Расскажу вам о движке Armory, совершенно случайно наткнулся на него в сети. И знаете, он хорош. Чем, расскажу под катом."
fomiash;Поиск альтернатив для Flash Player на примере реального проекта;https://habr.com//ru/post/533798/;"Надпись “Поддержка Flash Player будет прекращена в декабре 2020 года” в браузере способна вызвать различные эмоции у пользователей, начиная от облегчения, что де уязвимости решены, до осознания некоего предательства со стороны технологических гигантов. Первые, возможно, пострадали от вируса, некогда внедренного на сомнительном сайте, последние же вынуждены прикрывать проект, почти полностью зависящий от этой технологии. В начале 2016 года, когда перспективы Flash все еще были радужными, автору этой заметки пришла идея реализовать контент сайта с применением встраиваемых SWF-роликов. К тому времени уже были звоночки, наподобие претензий Стива Джобса к Adobe в 2010, заключающиеся в том, что проприетарный продукт не достоин быть внедрен в проприетарные ОС. Здесь должен быть ироничный смайлик. В то время мобильный трафик не был таким заметным (а трава зеленее) и всерьез такие заявления мало кто воспринимал."
sahsAGU;Обновления ASP.NET Core в .NET 6 Preview 1;https://habr.com//ru/company/microsoft/blog/543564/;Новая версия .NET, 6 Preview 1, уже доступна и готова к вашей оценке. Это первая предварительная версия .NET 6, следующего крупного обновления платформы .NET. Ожидается, что .NET 6 поступит в полноценный доступ в ноябре этого года и будет выпуском с долгосрочной поддержкой (LTS).Если вы работаете с Windows и используете Visual Studio, мы рекомендуем установить последнюю предварительную версию Visual Studio 2019 16.9. Если вы используете macOS, мы рекомендуем установить последнюю предварительную версию Visual Studio 2019 для Mac 8.9.
nixxa;Сочиняя ПО: Почему стоит изучать ФП на JavaScript?;https://habr.com//ru/post/552674/;"Эта статья - часть серии статей ""Составляя ПО"" про функциональное программирование и различные техники создания программ на JavaScript ES6+, начиная с азов.  Предыдущая часть: Сочиняя ПО: Введение / ХабрЗабудьте все, что вы знали о JavaScript, и постарайтесь воспринять эту статью так, будто вы начинающий программист. Чтобы помочь вам, мы рассмотрим JavaScipt начиная с самых основ, так, как будто вы никогда не видели JavaScript. Ну а если вы начинающий, то вам повезло. Наконец-то попробуем изучить ES6 и функциональное программирование с нуля! К счастью, все новые концепты будут изучены по ходу дела - но не рассчитывайте слишком уж сильно на это.  "
Polina_Averina;Эволюция распределённых систем в Kubernetes;https://habr.com//ru/company/southbridge/blog/565164/; Фото Cenk Batuhan Özaltun, Unsplash.com Обзор  Облачные платформы должны предоставлять современным распределённым приложениям возможности, связанные с управлением жизненным циклом, взаимодействием, привязками и состояниями. Kubernetes хорошо поддерживает управление жизненным циклом, но для остального использует другие платформы с помощью концепции sidecar-контейнеров и операторов. В будущем распределённые системы на базе Kubernetes будут состоять из нескольких сред выполнения, где бизнес-логика будет ядром приложения, и «меха»-компоненты (прим. переводчика: «меха» — сокращение от mechanics) в виде сайдкаров будут предлагать большие возможности в виде распределённых примитивов «из коробки». Такая разделённая меха-архитекура связывает элементы бизнес-логики и улучшает операции второго дня, вроде патчинга, апгрейдов и долгосрочной поддержки.  На конференции QCon в марте я рассказывал об эволюции распределённых систем в Kubernetes. Главный вопрос: что будет после микросервисов? У вас наверняка есть мнение на этот счет. У меня оно тоже есть. В конце вы узнаете, что я думаю. Но для начала давайте обсудим потребности распределённых систем. Как эти потребности развиваются с годами, начиная с монолитных приложений до Kubernetes и таких новых проектов, как Dapr, Istio, Knative, и как они меняют наши методы работы с распределёнными системами. Попробуем сделать несколько прогнозов на будущее.
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №167 (29 июня — 4 июля 2015);https://habr.com//ru/company/zfort/blog/261811/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости  
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №181 (12 — 18 октября 2015);https://habr.com//ru/company/zfort/blog/269033/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости.   
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №189 (6 — 13 декабря 2015);https://habr.com//ru/company/zfort/blog/273021/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №190 (13 — 20 декабря 2015);https://habr.com//ru/company/zfort/blog/273557/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №201 (1 — 6 марта 2016);https://habr.com//ru/company/zfort/blog/278711/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №202 (6 — 13 марта 2016);https://habr.com//ru/company/zfort/blog/279163/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №209 (25 апреля — 1 мая 2016);https://habr.com//ru/company/zfort/blog/282836/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
x2bool;.NET Core: релиза не будет, но вы держитесь, здоровья вам, хорошего настроения;https://habr.com//ru/post/302012/;"Пост о том как не надо вести разработку фреймворков, и о том, почему жизненный цикл программного обеспечения это не пустые слова, особенно, если на вас полагаются миллионы разработчиков по всему миру. Далее следует критика подхода к разработке платформы .NET Core, и, тесно связанного с ним фреймворка, ASP.NET Core.  История версий .NET Core (шутка с просторов Интернета): * Alpha * Beta * RC1 * 2RC 2Furious * RC: Tokyo Drift * RC4: The Big RC * 7 * RC8 "
semen_grinshtein;Какие перспективы у Node.js после воссоединения — мнения экспертов;https://habr.com//ru/post/311448/;"  Когда-то PHP, Apache и MySQL в сочетании с JavaScript через AJAX был идеальной парой для веб-разработчика. Казалось, этот набор инструментов может позволить решить любую задачу. Однако требования повышались, исходный код разрастался на глазах, нагрузка возрастала и привычные инструменты перестали справляться.   Эксперты были уверены, что всему виной классическая схема «запрос-ответ». Запрос страницы заставлял веб-сервер поднять некоторый скрипт, выполнить его линейно, а результат возвратить браузеру клиента. И лишь только после этого перейти к обработке следующего запроса.  В поисках выхода из этой ситуации, светлые головы вспомнили, что сервер можно написать и на JavaScript."
elena_voronina;RailsClub 2016: интервью со Steve Klabnik;https://habr.com//ru/company/railsclub/blog/312746/;"RailsClub 2016 22 октября, билетов осталось совсем мало. Не откладывайте регистрацию, если собираетесь идти! Мы публикуем разговоры с нашими спикерами, и сегодня это Steve Klabnik — член Rust core team, активный open source контрибьютер и очень интересный собеседник! Автор книг “The Rust Programming Language”, “Rails 4 in Action” и “Designing Hypermedia APIs”. Живет в Бруклине, сам о себе пишет, что «проводит слишком много времени на GitHub».  Стив уже выступал на RailsClub в 2012 году. И мы также публиковали интервью с ним (любопытным можно посмотреть тут). С тех пор Стив плотно занялся Rust, сделал много интересных штук и мы поняли, что нужно обязательно пригласить его снова :)  Думаю, эта наша публикация будет интересна не только рубистам, но и поклонникам Rust, которых в России становится все больше. На последнем митапе к нам подошли ребята из русскоязычного Rust-сообщества rustycrate.ru . Приглашают всех, кто после RailsClub заинтересуется Rust, не стесняться присоединяться и задавать вопросы.   Доклад на нашей конференции — Exploring Ruby through Rust. Ruby написан на C. Многие классы, которые мы знаем и любим, написаны на Ruby, некоторые нет. Изучая, как работает MRI мы можем узнать о Ruby много интересного. В докладе Стив покажет веселый хак: перепишет куски Ruby-интерпретатора на Rust. В процессе много узнаем о внутреннем устройстве Ruby и о том, как начать хакать код на С.  Под катом приводим наши вопросы, ответы Стива в оригинале и нашем вольном переводе: "
Eligar;Краткая история развития игровых движков;https://habr.com//ru/company/miip/blog/314502/;"О разработке игр и становлении игровой индустрии   Вместе с созданием первых игр программисты пришли к тому, что каждая игра содержит общие компоненты, даже несмотря на различие аппаратных платформ. А первые игры имели место на игровых автоматах размером с холодильник.  Общая для игр функциональность — графические решения, игровые механики, расчет физики и другое — стала выделяться в отдельные библиотеки, но, для того чтобы быть «игровым движком» было еще далеко. Во многом это было связано с серьезным различием программно-аппаратных платформ и неопределенности в самих играх. Ведь жанры и типы игр еще предстояло изобрести, при том, что многие первые игры были текстовыми. Собственно, именно для ранних адвенчур и платформеров и стали возникать игровые движки, особенно с развитием графики — хорошим примером можно назвать Adventure Game Interpreter (AGI). При разработке King’s Quest в далеком 1984 году, программисты Sierra On-Line столкнулись с неудобством низкоуровневой разработки столь сложной и перспективной по графике в те времена игры — и разработали набор решений, которым и стал AGI. Всего на нем было выпущено 14 различных игр за 5 лет на 7 различных платформах, поэтому понятие “кроссплатформенность” было важным уже тогда.  Однако, движки того времени редко выходили за пределы изначальной компании-разработчика и, как правило, были достаточно узкоспециализированными под конкретный жанр игры. "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №245 (9 — 15 января 2017);https://habr.com//ru/company/zfort/blog/319578/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №246 (16 — 22 января 2017);https://habr.com//ru/company/zfort/blog/320166/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №249 (6 — 12 февраля 2017);https://habr.com//ru/company/zfort/blog/321670/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №266 (5 — 11 июня 2017);https://habr.com//ru/company/zfort/blog/330694/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
ARG89;Анонс конференции HolyJS 2017 Moscow: Два дня чистого JS;https://habr.com//ru/company/jugru/blog/332414/;"В этом году JavaScript обошел PHP в рейтинге TIOBE. Важно это или нет? Наверное, не очень. Более важно то, что язык продолжает активно расти и развиваться, несмотря на то, что кому-то вектор развития может не нравиться.   Вообще, делать HolyJS всегда приятно. Пока в мире Java мы уже на протяжении четырех конференций (два Joker и две JPoint) ждем релиза новой версии, JS продолжает обрастать новыми фичами и хайповыми фреймворками, да так быстро, что наш программный комитет с трудом поспевает. Хорошо, что программа конференции строится не столько вокруг хайповых продуктов, сколько вокруг вещей, полезных в жизни, а их выходит существенно меньше.     Прошедшая в этом году HolyJS в Питере разрослась до полутысячи участников и двух дней, а о том, что будет с HolyJS 2017 Moscow, которая пройдет 10-11 декабря в Radisson Славянская, читайте под катом. "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №275 (7 — 13 августа 2017);https://habr.com//ru/company/zfort/blog/335562/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
m1rko;Что последует за вебом?;https://habr.com//ru/post/339112/;"В первой части я утверждал, что пришло время подумать, как заменить современную веб-платформу для приложений. Причины — её низкая производительность и в принципе нерешаемые проблемы безопасности.  Кое-кто решил, что я пишу слишком в негативном ключе и не обращаю внимания на положительные стороны веба. Так и есть: первая часть была в стиле «Обсудим факт, что мы попали в глубокую яму», а вторая часть — «Как разработать кое-что получше?» Это огромная тема, так что она на самом деле двумя частями не ограничится.  Назовём нашего конкурента вебу NewWeb (э, брендингом можно заняться потом). Для начала нужно понять, почему веб изначально стал успешным. Веб обошёл другие технологии создания приложений с лучшими инструментами для разработки GUI, так что у него явно есть какие-то качества, которые перевешивают недостатки. Если мы не будем соответствовать этим качествам, мы обречены."
tth;FrontFest.Kvartirniki — говорим о будущем JavaScript и судьбе фронтенд-разработчика;https://habr.com//ru/company/2gis/blog/341512/;"  На FrontFest будет много общения — живых неформальных разговоров в формате, который мы называем квартирником. На квартирниках мы спорим с экспертами и другими участниками, обсуждаем важные и острые темы. Все проходит в формате прямого диалога, потому получается динамично и увлекательно. По-умному это называют дискуссионными панелями. Но это как «лекция» и «делегат» — звучит скучно, а у нас будет улетно.  Каждый квартирник проходит на определенную тему, которую задают и разгоняют наши эксперты. Первый квартирник — о будущем JavaScript глазами Владимира Дашукевича и Евгения Гусева. На втором обсуждаем с Владиславом Козулей профессию фронтендера с разных сторон. И на финал рефлексируем на тему происходящего в мире фронтенд-разработки с Никитой Прокоповым и Виктором Грищенко. Квартирники переходят в виски-энд, где дискуссии идут еще в более неформальной плоскости.   Рассказываем в статье, почему эти темы важнее других и чем хороши эксперты. "
ozkriff;Выпуск Rust 1.22 (и 1.22.1);https://habr.com//ru/post/343058/;Команда Rust рада сообщить о двух новых версиях Rust: 1.22.0 и 1.22.1. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Подождите, две версии? В последний момент мы обнаружили проблему с новой macOS High Sierra в версии 1.22.0 и по разным причинам выпустили версию 1.22.0 как обычно, но так же выпустили 1.22.1 с исправлением. Ошибка была найдена в менеджере пакетов Cargo, а не в rustc, и затронула только пользователей macOS High Sierra.Если у вас установлена предыдущая версия Rust, для обновления достаточно выполнить: $ rustup update stable Если же у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.22.0 и 1.22.1 можно ознакомиться на GitHub. Что вошло в стабильную версии 1.22.0 и 1.22.1 Самое главное изменение в этой версии, которого многие долго ждали: теперь вы можете использовать ? с Option<T>! Около года назад, в Rust 1.13, мы ввели оператор ? для работы с Result<T, E>. С тех пор ведутся дискуссии о том, как далеко оператор ? должен зайти: Должен ли он остаться только для Result? Разрешать ли пользователям расширять его? Должен ли он использоваться с Option<T>? В Rust 1.22, основное использование оператора ? с Option<T> стабилизировано. Теперь такой код соберется:
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №299 (22 — 28 января 2018);https://habr.com//ru/company/zfort/blog/347728/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
ru_vds;Как работает JS: веб-воркеры и пять сценариев их использования;https://habr.com//ru/company/ruvds/blog/348424/;"[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы Публикуем перевод седьмой части часть серии материалов об особенностях работы различных механизмов JavaScript. Наша сегодняшняя тема — веб-воркеры. В частности, речь пойдёт о различных типах веб-воркеров, о том, как организована совместная работа тех частей, из которых они состоят, а также об их возможностях и об ограничениях, с которыми можно столкнуться в разных сценариях их использования. Здесь же будет показано 5 вариантов практического применения веб-воркеров.   "
ru_vds;Как работает JS: сервис-воркеры;https://habr.com//ru/company/ruvds/blog/349858/;"[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы Перед вами перевод восьмой части серии материалов об особенностях работы различных механизмов JavaScript. Сегодняшняя статья посвящена сервис-воркерам. Здесь мы рассмотрим их особенности, поговорим об их жизненном цикле, об их поддержке в браузерах, и о сценариях их использования.   "
justboris;Возможно, вам не нужен Rust, чтобы ускорить ваш JS;https://habr.com//ru/post/350018/;"Несколько недель назад я обнаружил пост ""Окисляем Source Maps с Rust и WebAssembly"" распространяющийся по Твиттеру и расказывающий о выигрыше в производительности от замены обычного JavaScript в библиотеке source-map на Rust, скомпилированный в WebAssembly. Пост возбудил мой интерес не потому, что я большой фанат Rust или WASM, скорее потому что я всегда интересовался фичами языков и оптимизациями, которых не хватает Javascript для того чтобы достичь аналогичной производительности. Так что я скачал библиотеку с GitHub и отправился в небольшое исследование производительности, которое я документирую здесь практически дословно."
ru_vds;Как работает JS: веб push-уведомления;https://habr.com//ru/company/ruvds/blog/350486/;"[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы Сегодня публикуем перевод девятой части серии статей, посвящённых применению веб-технологий и JavaScript. В этом материале мы исследуем веб push-уведомления. А именно, поговорим о механизмах, лежащих в их основе, и о том, как осуществляется подписка на уведомления, как устроены процессы их отправки и получения.    Сложилось так, что push-уведомления, весьма распространённые в мире мобильных приложений, довольно поздно добрались до веба, хотя они являются одной из тех возможностей, которыми хотели бы пользоваться многие разработчики."
ru_vds;Как работает JS: отслеживание изменений в DOM с помощью MutationObserver;https://habr.com//ru/company/ruvds/blog/351256/;"Сегодня, в переводе десятого материала из серии, посвящённой особенностям работы механизмов JavaScript, мы расскажем о том, как отслеживать изменения в DOM с помощью API MutationObserver.  Клиентские части веб-приложений становятся всё сложнее, требуют всё больше системных ресурсов. Происходит это по разным причинам, в частности из-за того, что таким приложениям нужны продвинутые интерфейсы, благодаря которым раскрываются их возможности, и из-за того, что им приходится выполнять сложные вычисления на стороне клиента.    Всё это ведёт к усложнению задачи контроля состояния интерфейсов приложений в процессе их жизненного цикла. Эта задача становится ещё масштабнее в том случае, если речь идёт о разработке чего-то вроде фреймворка или даже обычной библиотеки, когда, например, нужно реагировать на то, что происходит со страницей и выполнять какие-то действия, зависящие от DOM."
ru_vds;Как работает JS: движки рендеринга веб-страниц и советы по оптимизации их производительности;https://habr.com//ru/company/ruvds/blog/351802/;"Сегодня, в переводе одиннадцатой части серии материалов, посвящённых JavaScript, мы поговорим о подсистемах браузера, ответственных за рендеринг веб-страниц. Они играют ключевую роль в деле преобразования описаний документов, выполненных с помощью HTML и CSS, в то, что мы видим на экране.     Автор материала говорит, что в компании SessionStack приходится уделять рендерингу огромное внимание. В этой статье он поделится советами, касающимися оптимизации веб-страниц с учётом особенностей их визуализации."
ru_vds;Как работает JS: анимация средствами CSS и JavaScript;https://habr.com//ru/company/ruvds/blog/354438/;"[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы Анимация — неотъемлемая часть современных веб-интерфейсов. От того, насколько она уместна, привлекательна и производительна, зависит немалая доля впечатлений пользователя от работы с сайтом или веб-приложением. Сегодня, в переводе тринадцатой части серии материалов, посвящённых особенностям JavaScript и связанных с ним технологий, мы поговорим об анимации, выполняемой средствами CSS и JS, а также обсудим подходы к её оптимизации.  "
NIX_Solutions;Анонс митапа Sync.NET #6 в Харькове;https://habr.com//ru/company/nix/blog/358586/;"  Шестая встреча Sync.NET-комьюнити уже ждет вас, друзья! А вместе с ней и крутые доклады, общительные и опытные спикеры, подарки и подарки-поступки, а также бесконечный запас вкуснейшего кофе и угощений :)."
phillennium;Открытая трансляция главного зала HolyJS;https://habr.com//ru/company/jugru/blog/358660/;"  Послезавтра в Петербурге начнётся двухдневная конференция HolyJS. Мы будем рады видеть всех на мероприятии, но и для отсутствующих тоже кое-что припасли: доклады первого зала можно будет смотреть бесплатно в прямом эфире на YouTube.  Хотя это только часть от общей программы конференции, попало много интересного для самых разных слушателей: тут и «приключения во фронтенде», и производительность Node.js, и мобильный веб, и так далее вплоть до майнинга крипты в браузере.  Сразу сообщаем заветную ссылку: holyjs-piter.ru/online-free. А под катом приводим описания докладов, попавших в бесплатную трансляцию — можно пробежаться по ним и быстро понять, что из этого вам интересно."
grey_rat;Старый компьютер, Windows XP, 512 Мб оперативки, Firefox и интернет;https://habr.com//ru/post/373803/;"Несмотря на пройденное время, многие по прежнему ещё пользуются Windows XP. Кто-то вынужден работать на этой ОС или обслуживать такие компьютеры, у кого-то может быть хобби восстановления старых ПК, некоторых полностью устраивает Windows XP или же из-за своих финансовых или прочих убеждений они не хотят менять старого верного «друга» на нового.  Эта статья, возможно поможет многим обладателям старых компьютеров открыть «второе дыхание» своим музейным экспонатам.  Так как оптимизация такого старого оборудования носит комплексный характер, статья будет состоять из нескольких глав:  — Firefox — Дополнения к браузеру — Драйверы — WindowsXP — BIOS — Советы по аппаратной части"
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №321 (25 июня — 1 июля 2018);https://habr.com//ru/company/zfort/blog/415871/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
grigoryvp;Почему Moscow Python Conf теперь ++;https://habr.com//ru/company/oleg-bunin/blog/418447/;"Собрались мы с Олегом Буниным (olegbunin) и Валентином Домбровским поговорить про то, как к осени вместе подготовим классную конференцию про Python, и записали видео.  Под катом наша беседа в текстовом виде. В частности, ответ на самый главный вопрос, зачем вообще нужны конференции. И хочу заметить, не для того, чтобы чему-нибудь научиться – учатся сейчас в интернете (например на Хабре :).  Мы немного поговорили о трендах в экосистеме Python, о темах будущей конференции и организационных фишках. Кстати, обсуждение тем открытое, и каждый может предложить нам позвать конкретного спикера или подсказать направление. Посмотрите, что у нас уже есть, и включайтесь.  "
Kate_Milovidova;Доклады с весенней конференции С++ Russia 2018;https://habr.com//ru/company/pvs-studio/blog/418645/;" С 19 по 21 апреля в Санкт-Петербурге прошла конференция С++ Russia 2018. Из года в год организация и проведение становится на уровень выше, что не может не радовать. Спасибо бессменному организатору С++ Russia Сергею Платонову за его вклад в развитие этого направления."
eztiger;Зачем писать свой игровой движок?;https://habr.com//ru/company/socialquantum/blog/423175/;В декабре прошлого года, на конференции Games Gathering 2017, мы сделали доклад, в котором рассказали о том, надо ли компаниям, работающим в игровой индустрии, писать собственные движки.  
ValdikSS;Аудио через Bluetooth: максимально подробно о профилях, кодеках и устройствах;https://habr.com//ru/post/427997/;"  This article is also available in English  Из-за массового выпуска смартфонов без аудиоразъема 3.5 мм беспроводные Bluetooth-наушники для многих стали основным способом прослушивания музыки и общения в режиме гарнитуры. Производители беспроводных устройств не всегда пишут подробные характеристики товара, а статьи о Bluetooth-аудио в интернете противоречивы, местами некорректны, не рассказывают о всех особенностях, и часто копируют одну и ту же не соответствующую действительности информацию. Попробуем разобраться с протоколом, возможностями Bluetooth-стеков ОС, наушников и колонок, Bluetooth-кодеков для музыки и речи, выясним, что влияет на качество передаваемого звука и задержку, научимся собирать и декодировать информацию о поддерживаемых кодеках и других возможностях устройств.  TL;DR:  SBC — нормальный кодек У наушников есть свой эквалайзер и пост-процессинг на каждый кодек отдельно aptX не настолько хорош, как о нём говорят рекламные анонсы LDAC — маркетинговое фуфло Качество звука в режиме разговора всё ещё низкое В браузер можно встроить аудиоэнкодеры на C, скомпилировав в WebAssembly через emscripten, и они не будут особо тормозить.  "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №337 (29 октября — 4 ноября 2018);https://habr.com//ru/company/zfort/blog/428766/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
Volgafe87;.NET гуру Дино Эспозито: «Не будь пассажиром поезда, идущего под откос»;https://habr.com//ru/company/epam_systems/blog/429766/;Дино приезжал в Минск лишь однажды, и нам удалось пообщаться с ним между лекциями, которые он давал для .Net-чиков. Мы решили не быть банальными и поговорили с Дино не только о работе, но и о книгах, о будущем и о том, какой становится жизнь после 40. 
freecoder_xx;Выпуск Rust 1.31 и Rust 2018;https://habr.com//ru/post/432640/;"Команда разработчиков Rust рада сообщить о выпуске новой версии Rust, 1.31.0, а также ""Rust 2018"". Rust — это язык программирования, который дает возможность каждому создавать надежное и эффективное программное обеспечение. Если у вас установлена предыдущая версия Rust с помощью rustup, то для обновления Rust до версии 1.31.0 вам достаточно выполнить: $ rustup update stable Если у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.31.0 можно ознакомиться на GitHub. Что вошло в стабильную версию 1.31.0 Rust 1.31, возможно, самый значительный выпуск со времен Rust 1.0! В данный выпуск включена первая итерация «Rust 2018», но это не единственное нововведение! Обзор улучшений будет длинный, поэтому вот оглавление:  Rust 2018  Нелексические времена жизни Изменения системы модулей  Дополнительные правила вывода времен жизни const fn Новые инструменты Инструментальные проверки качества кода Документация Предметные рабочие группы Новый веб-сайт Стабилизация стандартной библиотеки Улучшения в Cargo Разработчики выпуска "
KvanTTT;Universal C# Code for NET and JavaScript;https://habr.com//ru/post/440342/;In 2013, while working at GFRANQ photo service, I participated in the development of an eponymous web service for publishing and processing photos. Filters and transformations were defined in the file with parameters, and all processing was carried out on the server. During service development, there was a need to support these transformations on the client side for the preview. According to Larry Wall, one of the virtues of a programmer is laziness. Therefore, as truly lazy programmers, we thought about the possibility of using the same code on both the server and client sides. The entire development was conducted in C#. After researching the libraries and a couple of attempts, we proudly concluded that this was possible and began to write the universal code.  Why is this article needed? Indeed, 6 years have passed since 2013, and many technologies have lost their relevance, for example, Script#. On the other hand, new ones have appeared. For example, Bridge.NET or Blazor based on the fancy WebAssembly. Nevertheless, some ideas can still be used. In this article I tried to describe them as detailed as possible. I hope that the mention of Silverlight and Flash will cause a smile with a hint of nostalgia, and not a desire to criticize the old solutions. Anyway, they have contributed to the development of the web industry.
powerman;Умеренный Hardening для Firefox;https://habr.com//ru/post/445124/;" Современный веб состоит из множества разных технологий, которые предоставляют самые разные возможности… но ещё и создают немалое количество угроз. Современные браузеры давно стали самыми сложными приложениями на компе, обогнав по сложности даже ядро ОС (в Firefox в несколько раз больше строк кода, чем в ядре Linux или офисных пакетах). Мы проводим в браузере большую часть своего времени, так что не удивительно, что браузер находится под прицелом: его постоянно пытаются взломать, использовать в ботнете, пытаются украсть из него наши данные, прослушать его трафик, отслеживать посещаемые нами сайты и наши действия на этих сайтах. Сейчас самое время сказать, что всё не так уж плохо, и со всеми этими проблемами можно справиться… но это не так. Из коробки браузеры уже делают немало: регулярно обновляются, стараются затыкать дыры в безопасности, внедряют новые технологии для защиты, предоставляют возможность расширять их функционал сторонними расширениями. Но серьёзной защиты из коробки нет, и вряд ли она когда-нибудь появится: она идёт в комплекте с усложнением интерфейса браузера и частичным отключением его функционала, что ""ломает"" сайты и вряд ли понравится обычным пользователям. Но самое печальное, что даже такой ценой невозможно полноценно защитить браузер — слишком уж он стал сложным. Тем не менее, для усиления защиты браузера можно много чего сделать. "
phillennium;JS со всех сторон: топ-10 докладов HolyJS 2018 Moscow;https://habr.com//ru/company/jugru/blog/445862/;"   В декабре мы провели очередную HolyJS, и поначалу видеозаписи её докладов были доступны только для зрителей, а теперь открыты для всех. Для Хабра мы традиционно сделали подборку из 10 докладов, получивших от зрителей самые высокие оценки. Они идут по возрастанию рейтинга, так что чем дальше, тем интереснее.  Под катом — и сами видеозаписи докладов, и их короткие описания с сайта конференции, и ссылки на слайды. "
BoogerWooger;Случайные числа и децентрализованные сети: имплементации;https://habr.com//ru/post/452340/;"Введение function getAbsolutelyRandomNumer() {         return 4; // returns absolutely random number! } Как и в случае с концепцией абсолютно стойкого шифра из криптографии, реальные протоколы “Publicly Verifiable Random Beacon” (далее PVRB) лишь пытаются максимально приблизиться к идеальной схеме, т.к. в реальных сетях в чистом виде она неприменима: договариваться надо строго об одном бите, раундов должно быть много, а все сообщения должны быть идеально быстрыми и всегда доставляться. Разумеется, в реальных сетях это не так. Поэтому, при проектировании PVRB под конкретные задачи в современных блокчейнах, помимо невозможности контроля получаемого рандома и криптографической стойкости, возникает еще много чисто архитектурных и технических проблем."
phillennium;«Там надо знать и веб-стек, и C++»: интервью с Алексеем Козятинским о разработке Chrome DevTools и не только;https://habr.com//ru/company/jugru/blog/452990/;"  Как разрабатывать с помощью Chrome DevTools, всем известно. А как выглядит разработка самих Chrome DevTools? Алексей Козятинский ранее работал в Google и занимался именно этим, а теперь перешёл в Netflix, но от прежней деятельности далеко не ушёл.   Чем именно он занимается сейчас? Насколько реально для обычного разработчика не из Google законтрибьютить что-то полезное в DevTools? Какие компьютеры используют инженеры Chrome?   У нас сейчас идёт конференция HolyJS 2019 Piter, где Алексей уже выступил с новым докладом «Протокол Chrome DevTools» (запись можно увидеть в бесплатной трансляции). И по такому случаю его подробно расспросили двое участников программного комитета HolyJS: Дмитрий DmitryMakhnev Махнёв и Алексей zolotyh Золотых."
derSmoll;Frontend Weekly Digest (20 – 26 May 2019);https://habr.com//ru/post/453576/;This week we issue a really huge selection of all the essential news you might have missed on Front-end development. Make sure to check the latest updates on CSS, HTML, and JavaScript.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №366 (20 — 26 мая 2019);https://habr.com//ru/post/453580/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
ValdikSS;Audio over Bluetooth: most detailed information about profiles, codecs, and devices;https://habr.com//ru/post/456182/;"  This article is also available in Russian / Эта статья также доступна на русском языке  The mass market of smartphones without the 3.5 mm audio jack changed headphones industry, wireless Bluetooth headphones have become the main way to listen to music and communicate in headset mode for many users. Bluetooth device manufacturers rarely disclose detailed product specifications, and Bluetooth audio articles on the Internet are contradictory and sometimes incorrect. They do not tell about all the features, and often publish the same false information. Let's try to understand the protocol, the capabilities of Bluetooth stacks, headphones and speakers, Bluetooth codecs for music and speech, find out what affects the quality of the transmitted audio and the delay, learn how to capture and decode information about supported codecs and other device features.  TL;DR:    SBC codec is OK Headphones have their own per-codec equalizer and post processing configuration aptX is not as good as the advertisements say LDAC is a marketing fluff Voice audio quality is still low Browsers are able to execute audio encoders compiled to WebAssembly from C using emscripten, and they won't even lag.  "
derSmoll;Frontend Weekly Digest (24 – 30 June 2019);https://habr.com//ru/post/458302/;This week we issue a really huge selection of all the essential news you might have missed on Front-end development. Make sure to check the latest updates on CSS, HTML, and JavaScript.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №371 (24 — 30 июня 2019);https://habr.com//ru/post/458306/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
olegchir;Почти всё о будущей HolyJS 2019 Moscow;https://habr.com//ru/company/jugru/blog/472658/;"  8-9 ноября в Москве состоится HolyJS 2019 Moscow — большая конференция для JavaScript-разработчиков. Раньше мы публиковали на Хабре длинные списки с формальным описанием докладов, но кажется, всё это и так можно прочитать на сайте.   Вместо этого мы собрали почти полный состав программного комитета и обсудили самые важные вещи: что сейчас интересного происходит в мире JavaScript, браузерного фронтенда, серверного бэкенда и в других областях, что про это стоит послушать и как это влияет на программу конференции. Добавили кучу интересных ссылок и красивых фотографий. Заходите под кат, располагайтесь, мы начинаем."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №389 (11 — 17 ноября 2019);https://habr.com//ru/post/476230/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
olegchir;Java-дайджест за 10 декабря;https://habr.com//ru/company/jugru/blog/479588/;  Вышла четвертая альфа-версия «Remnants of the Precursors» — написанного на Java бесплатного аналога «Master of Orion» (это игра 1993 года). Пятую альфу обещают 5-го сентября. Автор обещает выложить исходники после перехода в бету. Скачать четвертую альфу можно по ссылке.  Вышла NestedJ — библиотека, которая в виде репозитория Spring Data реализует сортированное дерево, оптимизированное на чтение. Логика обхода в этой библиотеке стоит O(n) и позволяет делать такие штуки, как поиск узлов-детей и узлов-родителей. 144 коммита и 31 звездочка на GitHub. 
Dartess;Прогрессивные веб-приложения в 2020;https://habr.com//ru/post/482772/; На КДПВ — стикер, созданный командой браузера Samsung Internet Больше 12 лет прошло с тех пор, как Стив Джобс впервые представил идею веб-приложений, «которые выглядят и ведут себя точно так же, как и нативные приложения». Больше 4 лет прошло с момента появления термина «PWA». Что из себя представляют прогрессивные веб-приложения в начале 2020 года? Что из того, что было добавлено в экосистему в 2019 году, вы могли упустить? Давайте выясним.
kate_shlyakhova;Особенности региональных конференций. Зачем спикеру выезжать за МКАД?;https://habr.com//ru/company/it_people/blog/489240/;"Прошлым летом мы проводили встречу программных директоров DUMP, которые, к тому же, часто являются спикерами разных IT-конференций. И один из них сказал: «Раньше ты сам искал конференции и подавал заявки, года 3 назад уже ездил туда, куда тебя позвали, а теперь каждую неделю приходит приглашение где-то выступить».   Конференций и митапов в Москве достаточно, чтобы стать знаменитым спикером, не покидая пределов МКАД. Ну, хорошо, можно съездить на зарубежные конференции, если позовут :) Какой профит ехать на Урал, в Сибирь или Поволжье? Хм. Спросили у тех, кто уже знаменит, но всё ещё ездит  "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №403 (17 — 23 февраля 2020);https://habr.com//ru/post/489652/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
nin-jin;Tree — единый AST чтобы править всеми;https://habr.com//ru/post/503240/;Здравствуйте, меня зовут Дмитрий Карловский и я… рассекаю на велосипедах… по бездорожью… против ветра… в гору… на лыжах. И сегодня я приглашаю вас прокатиться со мной вдоль и поперёк текстовых форматов данных и вместе спроектировать идеальный формат. Я уже рассказывал о нём 5 лет назад, что привело к жарким дебатам, повлёкшим за собой небольшие изменения синтаксиса. Поэтому позвольте рассказать с чистого листа что он представляет из себя на текущий момент. Спикер \Дмитрий Карловский Место \PiterJS #47 Время 2020-05-20 Это — расширенная текстовая версия одноимённого выступления на PiterJS#47. Вы можете читать её как статью, либо открыть в интерфейсе проведения презентаций, либо посмотреть видео.
alyssashch;Горячая летняя пора митапов: список из 32 событий на неделе и как получать его обновления;https://habr.com//ru/post/506582/;Привет! Собрали события недели в один список, и сами немного удивились количеству митапов про микросервисы и про данные. А еще собрали способы получать обновления, потому что список мероприятий ниже станет неполным уже буквально завтра, когда команда сайта https://meetups-online.ru/ найдет и добавит еще пару ивентов. Так вот, обновления можно получать из RSS, если есть привычка пользоваться ими. Перетаскивать события из RSS в телеграм может этот бот: @EventMonkeyBot Еще один бот, но с другой механикой — может присылать мероприятия по выбранным тэгам: @meetup_finder_bot его сделали ребята-подростки, пока учились работать в команде. 
sahsAGU;Бесплатная электронная книга на русском: Blazor для разработчиков ASP.NET Web Forms;https://habr.com//ru/company/microsoft/blog/515340/;"Привет, Хабр! Как многие знают, мы очень активно развиваем платформу Blazor, клиентскую платформу веб-интерфейса, основанную на C#, а не на JavaScript. С помощью Blazor вы можете писать собственную клиентскую логику и компоненты пользовательского интерфейса на C#, компилировать их в обычные сборки .NET, а затем запускать их непосредственно в браузере с помощью нового открытого веб-стандарта WebAssembly.  Для лучшего понимания принципов работы с платформой мы создали бесплатную книгу ""Blazor для разработчиков ASP.NET Web Forms"". Сейчас она еще находится в процессе доработки, но уже доступна на многих языках. Оригинал на английском можно скачать как PDF, а перевод на русский доступен на нашем сайте с документацией.  Под катом вы найдете все полезные ссылки, а также сможете прочитать введение. Присоединяйтесь!  "
vistoyn;Концепция Облачной операционной системы;https://habr.com//ru/post/526680/;Привет Хабр! Меня зовут Ильдар. Хочу поделиться с сообществом своими идеями разработки Облачной ОС. Начну с рассказа простого кейса, почему я начал задумываться о создании Облачной ОС. В прошлом году я решал бизнес задачи по настройке CRM+телефония+сайт+почта+вебинары+email рассылка. Решение есть, оно настраиваемое и рабочее. Но есть нюансы, которые я заметил в процессе настройки.
pronskiy;PHP Дайджест № 197 (11 – 25 января 2021);https://habr.com//ru/post/539034/;" Свежая подборка со ссылками на новости и материалы. В выпуске: объекты в качестве ключей массивов и другие RFC предложения для PHP 8.1, запуск WebAssembly в PHP, о коллизиях в массивах, порция полезных инструментов, статьи, видео, PHP Дайджест Live.  Приятного чтения! "
RPG18;Запускаем AssemblyScript в Go;https://habr.com//ru/company/ozontech/blog/540472/;Пока одни обсуждают что не так с WebAssembly, я думаю как его можно использовать вне браузера. Например написание wasm фильтров для Envoy. AssemblyScript был взят потому, что это не C++ и не Rust, т.е. ожидается более низкий порог вхождения. Под катом будет дико примитивный код и пару бенчмарков. Картинка взята из бенчмарка. 
Gim6626;FOSS News №61 – дайджест материалов о свободном и открытом ПО за 15-21 марта 2021 года;https://habr.com//ru/post/548194/;"  Всем привет!  Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Signal перестал работать в Китае; Фонд СПО объявил обладателей ежегодной премии за вклад в развитие свободного ПО; Википедия хочет взимать плату с Google, Amazon и Apple за использование своего контента; проект OpenHW Accelerate потратит 22.5 млн долларов на развитие открытого оборудования; Python исполняется 30 лет: интервью с Пабло Галиндо, которому поручено поддерживать язык программирования в нужном русле; заря бытовых меш-сетей, или Интернет будущего (об Yggdrasil Network); новый способ поиска совместимых компонентов для компьютера на основе Linux-телеметрии; как пандемия, экономика, эффективность и доверие привели к подъёму Open Source и многое другое."
dolpheen;Flutter: слоёный пирог с интересной начинкой. Графика;https://habr.com//ru/company/ligastavok/blog/548662/;Write once, run anywhereПредлагаю заглянуть под капот, и погрузиться в детали реализации движка Flutter, чтобы понять, как он решает вопрос кроссплатформы с точки зрения отрисовки UI
Leono;Как померить Node.js-приложение, если у тебя лапки. Доклад Яндекса;https://habr.com//ru/company/yandex/blog/553030/;"Неважно, каких размеров ваше приложение на Node.js. Неважно, как хорошо вы написали код. Вам просто необходимо знать, как он работает в продакшене. Разработчик интерфейсов в поисковом портале Яндекса Алексей Попков сделал доклад о том, как выяснить, что происходит внутри запущенного процесса.   Что нужно, чтобы заглянуть в этот чёрный ящик? Ответ — опенсорс, все бесплатно, бери и внедряй.  — Всем привет. Немножко про то, кто я такой. Меня зовут Лёша, я разрабатываю внутренние сервисы Яндекса. Уже третий год делаю всякие Node.js-приложения, менторю разработчиков в Яндекс.Практикуме и измеряю все, до чего дотягиваются руки, потому что это весело. "
host_m;Портируем DOOM на serverless-платформу;https://habr.com//ru/company/vdsina/blog/553802/;" Благодаря своей открытой кодовой базе и чистым абстракциям DOOM компании id Software стал одной из самых портируемых в истории игр. Мне показалось, что это идеальный проект для портирования на платформу Compute@Edge, созданную в нашей вычислительной serverless-среде, для экспериментов с различными способами применения нашего продукта.  Демонстрация интерактивной работы DOOM на Compute@Edge позволила бы расширить границы производительности продукта и показать его удивительные возможности. В этой статье я расскажу, как мы этого добились."
Gim6626;FOSS News №68 – дайджест материалов о свободном и открытом ПО за 26 апреля – 2 мая 2021 года;https://habr.com//ru/post/555480/;  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  Продолжение истории с Университетом Миннесоты, исследователи которого отправили вредоносный код в Linux — учёные объяснились и попросили прощения, а разработчики потребовали выполнения ещё ряда требований чтобы восстановить доверие к Университету. Есть ли жизнь после CentOS? Разбор альтернатив. Можно ли быть немножко беременным, или Российское проклятье Open Source. Босс Red Hat о Линусе Торвальдсе: «Он изменил мир». Кто есть кто в кампании за отмену Столлмана. Готовится к выходу красивый комикс — «Tux Stories: Приключения пингвина Тукса и его друзей». Компас, указывающий направление до ближайшей пиццерии.  И многое другое...
arttom;Энтузиаст портировал Doom 3 и другие игры id Software на iOS, но так просто их не запустить;https://habr.com//ru/news/t/450328/;"В 2009 году id Software выпустила Wolfenstein 3D и Doom на iOS, когда операционная система была 32 битной. Сейчас она 64 битная и начиная с версии iOS 10.3, которая вышла в 2017 году, 32 битные приложения не поддерживаются. Поскольку id Software давно перестала обновлять мобильные релизы, на новых девайсах игры уже не запустить. Но мобильный разработчик Том Кидд решил это исправить. А после портировал на платформу и другие шутеры компании.  Тем не менее, купить их в App Store и просто так поиграть не получится. "
maybe_elf;Mozilla сократила 70 сотрудников из 1000. Не исключены новые увольнения;https://habr.com//ru/news/t/484190/;"Фото: Carissa/Flickr  Mozilla провела массовое сокращение сотрудников с целью оптимизации средств. Компанию покинут 70 человек из чуть более чем 1000 сотрудников, работающих по всему миру. Освободившиеся деньги хотят направить на приоритетные цели, в том числе защиту приватности и борьбу с трекингом пользователей.  Не исключено, что компанию ждут новые сокращения: пока нет решения об оптимизации штата в Великобритании и Франции. "
maybe_elf;Разработчики открыли сервис Google Earth для браузеров помимо Chrome;https://habr.com//ru/news/t/490272/;"  Разработка картографического сервиса Google Earth заявила, что теперь он может нормально работать не только в собственным браузере Google Chrome, но и в Firefox, Microsoft Edge и Opera."
MarcusAurelius;Встречайте Node.js 14.0.0;https://habr.com//ru/news/t/498408/;" Вышла версия Node.js 14.0.0. Эта версия будет жить долго, до апреля 2023 года, и сейчас в ней еще не появилось всех ожидаемых нами новшеств. Они будут постепенно появляться летом, а 19 октября 14 версия станет LTS."
maybe_elf;Microsoft прекратит поддерживать Adobe Flash в своих браузерах до конца года, но некоторые смогут пользоваться им дольше;https://habr.com//ru/news/t/518186/;"  Microsoft заявила, что её браузеры окончательно лишатся поддержки Flash 31 декабря 2020 года. Однако некоторые пользователи смогут пользоваться плагином и после этого. "
maybe_elf;Тесты Microsoft Edge на Linux показали хорошие результаты;https://habr.com//ru/news/t/525104/;"  На днях вышел браузер Microsoft Edge на основе Chromium для Linux. Первый выпуск предназначен для разработчиков, которые хотят создавать и тестировать свои сайты. Версия включает основные функции веб-платформы и инструменты, которые должны работать так же, как в Edge на macOS и Windows.  Разработчики протестировали Edge на Dell Precision Tower 3431 с Linux Mint 20."
maybe_elf;Adobe выпустила последнее обновление Flash Player;https://habr.com//ru/news/t/532354/;"  Adobe выпустила последнее обновление Flash Player перед прекращением поддержки 31 декабря. После 31 декабря будут удалены страницы загрузки Flash Player, а с 12 января Adobe начнет блокировать воспроизведение мультимедийного контента через Flash Player."
maybe_elf;Adobe начала показывать предупреждения об удалении Flash Player в Windows 10;https://habr.com//ru/news/t/536060/;"Фото: www.bleepingcomputer.com  Adobe начала отображать предупреждения на компьютерах с Windows 10, рекомендуя пользователям удалить Flash Player. Компания благодарит пользователей за использование продукта и напоминает, что он не будет работать с 12 января 2021 года."
maybe_elf;В обновлении для Chrome 88 исправили уязвимость «нулевого дня»;https://habr.com//ru/news/t/541100/;Для версии Chrome 88, которая сейчас развертывается для Windows, Mac и Linux (88.0.4324.150), выпустили патч активно эксплуатируемой уязвимости «нулевого дня». Исследователь безопасности Маттиас Буэленс сообщил об уязвимости в Chrome WebAssembly и движке JavaScript V8, которая может позволить злоумышленнику выполнить код на компьютере жертвы.  
maybe_elf;Уязвимость нулевого дня Google Chrome и Microsoft Edge опубликовали в Twitter;https://habr.com//ru/news/t/552284/;Исследователь безопасности Раджвардхан Агарвал обнаружил уязвимость нулевого дня для удаленного выполнения кода, которая работает в текущих версиях Google Chrome и Microsoft Edge.
denis-19;Вышел Chrome 90;https://habr.com//ru/news/t/552480/;"  14 апреля 2021 года Google выпустила Chrome 90 для Windows, Mac и Linux.   В новой версии браузера 90.0.4430.72 по умолчанию используется протокол HTTPS, чтобы повысить безопасность при просмотре веб-страниц. Кроме того, поскольку многие сайты перенаправляют HTTP-соединения на HTTPS, это нововведение повышает производительность, поскольку браузер больше не будет перенаправлять запрос пользователя на этих сайтах.  Также в Chrome 90 добавлен новый кодировщик AV1 и исправлены 37 различных уязвимостей безопасности, включая критические и нулевого дня. "
maybe_elf;Команда Edge экспериментирует с отключением JIT;https://habr.com//ru/news/t/571662/;Microsoft объявила, что группа по исследованию уязвимостей Edge экспериментирует с новой функцией, получившей название «Super Duper Secure Mode» и предназначенной для улучшения безопасности без значительных потерь производительности.
Prand;Почему в NASA отказались от Unity в пользу Blend4Web;https://habr.com//ru/post/264457/;Совсем недавно был опубликован пресс-релиз на сайте NASA, где говорилось об уникальной возможности «прогуляться» по Марсу. Я не утерпел и перешел по ссылке — открылась потрясающая интерактивная сцена, где можно «прокатиться» с марсоходом, просмотреть видео с «камеры» и даже узнать технические параметры агрегата. Но самой шокирующей была новость, что все это сделано с помощью движка Blend4Web… А где же Unity?    
loz;Интервью с Nenad Rakocevic о языке Red, преемнике Rebol;https://habr.com//ru/post/265685/;"После нашего последнего интервью с Brian McKenna для This is not a Monad tutorial мы взяли интервью у Nenad Rakocevic, создателя языка программирования Red.  С моей субъективной точки зрения Red и Rebol довольно странные создания! Но не поймите меня неправильно, это не значит ничего плохого. Например, я не знаю многих высокоуровневых языков с такими возможностями как встраиваемые DSL для стандартного низкоуровневого программирования или имеющего 50 встроенных типов. Вам следует попробовать его, вы найдете много интересных идеи в программировании на Red.  Пишите мне на твиттер @unbalancedparen свои комментарии или предложения по интервью для This is not a Monad tutorial. Оставайтесь с нами!    Расскажите нам немного о появлении Red. Для чего он был создан? "
Antelle;Как я делал веб-версию KeePass;https://habr.com//ru/post/269895/;"Как-то мне надо было добавить в админку просмотр списка паролей. База хранилась на сервере в формате KeePass (kdbx v2), сервер был на ноде — недолго думая, я взял первый попавшийся пакет и сделал. А потом понадобилось то же самое, но прямо у пользователя в браузере, без сервера. Ничего не нашлось. Первым желанием было форкнуть либу и заменить использование node api, но от первого просмотра кода желание пропало, решил сделать сам.    Под катом расскажу о проблемах, с которыми я столкнулся, и способах их решения "
kudzev;Выступи на CodeFest;https://habr.com//ru/company/codefest/blog/272715/;"  Конференции разработчиков CodeFest пять лет. Все пять лет мы формировали программу только силами программного комитета: искали спикеров, приглашали, подкупали, угрожали. Всё сами. Вы все пять лет попрекаете нас этим. Мол, в программу снаружи не пробиться. Мы всё осознали и хотим сделать предстоящую конференцию более открытой. Поэтому приглашаем вас выступить на CodeFest."
kichik;Исходный код JavaScript-движка Microsoft Edge будет открыт в январе;https://habr.com//ru/company/microsoft/blog/272809/;"В конце прошлой недели на конференции JSConf US Last Call (Флорида, США) мы анонсировали, что откроем исходный код ключевых компонентов нашего JavaScript-движка Chakra, используемого в Microsoft Edge, в виде проекта ChakraCore. Исходный код будет доступен на GitHub под MIT лицензией в следующем месяце.   Gaurav Seth на сцене JSConf US Last Call анонсирует ChakraCore. Слайды доступны на GitHub.  Chakra – один с лучших движков JavaScript с самым большим покрытием возможностей ES2015 и предсказуемыми производительностью, надежностью и масштабируемостью. Мы предполагаем, что ChakraCore может использоваться в тех сценариях, где эти факторы играют большую роль: от облачных сервисов и до интернета вещей и в других средах.  Сегодня мы вкладываемся в улучшение Chakra больше, чем когда-либо, и мы рады возможности развития сотрудничества с сообществом для внедрения дальнейших улучшений. Несколько организаций уже рассказали о своем интересе вносить вклад в Chakra, включая Intel, AMD и NodeSource – мы смотрим с оптимизмом на нашу будущую совместную работу.  "
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №193 (3 — 10 января 2016);https://habr.com//ru/company/zfort/blog/274785/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
rumkin;Chakra официально принят Node.js;https://habr.com//ru/post/276617/;Как уже сообщалось ранее, Microsoft сделал пулл реквест с добавлением поддержки открытого JS-движка Chakra собственной разработки в Node.js. Разработчики Microsoft предложили сделать весьма спорное изменение, что вызвало ожесточенную дискуссию среди участников проекта: звучали обвинения в адрес MS, с последующими блокировками ветки обсуждения, а трезвая критика местами тонула среди чрезмерно восторженных комментариев. И несмотря на то, что сам пулл реквест до сих пор не был принят, Microsoft получил официальную поддержку сообщества Node.js. 
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №203 (14 — 20 марта 2016);https://habr.com//ru/company/zfort/blog/279709/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №205 (28 марта — 3 апреля 2016);https://habr.com//ru/company/zfort/blog/280788/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №206 (4 — 10 апреля 2016);https://habr.com//ru/company/zfort/blog/281308/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
akava;GECOn 2016: Первая Гомельская IT-конференция (24 апреля);https://habr.com//ru/post/281775/;"Признайтесь себе, когда вы в последний раз были на IT конференции? Такой, чтобы от профессионалов и для профессионалов? А такой, чтоб взять и никуда не ехать, а сходить на нее прямо в Гомеле? То то же. Значит, у меня есть, что вам предложить :) Первая Гомельская IT-конференция!  Что это Минимум воды, максимум технической начинки:  24 апреля – это уже совсем скоро; ОКЦ, ул. Ланге 17 – самый центр города; 13 докладов – на актуальные темы, затрагивающих все аспекты разработки программного обеспечения; 3 потока – докладов много, часов в сутках мало, а рассказать хочется обо всем; 17 экспертов – и я не вру, когда называю их экспертами – это было доказано и подтверждено годами опыта и количеством успешных проектов; 250 участников, среди которых вас до сих пор нет?! Цена – бесплатно, нужна только регистрация. "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №218 (27 — 3 июля 2016);https://habr.com//ru/company/zfort/blog/304630/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда    
ARG89;HolyJS в Москве: первые доклады и CallForPapers;https://habr.com//ru/company/jugru/blog/307972/;"Вселенная JavaScript прекрасна: язык растет и развивается огромными темпами, фреймворки плодятся (возможно, даже слишком:)), коммьюнити цветет и пахнет, в России появляются профессиональные конференции.    Если вы следите за событиями, то знаете, что в июне в Питере прошла первая в России масштабная профессиональная конференция по JavaScript – HolyJS. Все тогда прошло хорошо, а сама конференция 11 декабря приедет в Москву, об этом и поговорим. "
kahi4;Векторные вычисления в JS, есть ли смысл, когда и как можно использовать SIMD в браузере;https://habr.com//ru/post/308696/;Все больше и больше область применения языка программирования javascript отходит от движения кнопочками в браузере да перекраски фона в сторону сложных и объемных веб-приложений. Уже во всю по миру шагает технология WebGL, позволяющая отображать трехмерные сцены в браузере прямо на языке js, а вместе с ней и усложняются задачи. Производительность пользовательских машин продолжает расти, а вместе с ней и язык обзаводится новыми выразительными средствами, позволяющими ускорять вычисления. И пока WebAssembly где-то там в далеком и светлом будущем, asm.js застрял в болоте и свернул с пути, в ближайшее время изначально как часть es2015, ныне как отдельный стандарт выходит поддержка векторных операций в JS. Все, кому интересно, что такое SIMD и векторные исчисления, как ими пользоваться в js, а так же что дает их использование — прошу под кат. 
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №226 (29 августа — 4 сентября 2016);https://habr.com//ru/company/zfort/blog/309174/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.  
Gbdrm;Каково оно учить JavaScript в 2016;https://habr.com//ru/post/312022/;"  — Эй, я получил новый веб-проект, но, если честно, я не занимался веб-кодингом в течение нескольких лет, и я слышал, все немного поменялось. Ты же самый современный веб-разработчик, правда?  — Это теперь называется Front-End инженер, но да, я — именно он. Я работаю с вебом в 2016. Визуализации, музыкальные плееры, летающие дроны, которые играют в футбол, все что угодно. Я только что вернулся из JsConf и ReactConf, так что я знаю новейшие технологии для создания веб-приложений.  — Круто. Мне нужно создать страницу, которая отображает последние действия со стороны пользователей, так что мне просто нужно получить данные от REST и отобразить их в какой-то фильтруемой таблице, ну и обновлять её, если что-то изменится на сервере. Я думал, может быть, использовать JQuery для извлечения и отображения данных?  — О, Мой Бог! Нет! Никто больше не использует JQuery. Ты должен попробовать React: это — 2016! "
phillennium;«Обучаем специалистов всех уровней»: EPAM о Java-разработке и конференциях;https://habr.com//ru/company/jugru/blog/312210/;"  Название EPAM известно практически всем. Но не все знают о том, что компания среди прочего занимается биоинформатикой, что в ней ценят full-stack разработчиков, а её внутренняя система обучения/переквалификации рассчитана не только на джуниоров, и в качестве менторов там порой выступают архитекторы.  В преддверии конференции Joker, на которой EPAM будет активно присутствовать, мы задали сотрудникам компании вопросы о Java-разработке и всём, что вокруг неё. Нашими собеседниками стали:   Марианна Округина, директор офиса в Санкт-Петербурге Алексей Зиновьев, тренер по Java/Big Data (спикер Joker 2016 и не только) Вячеслав Лапин, senior developer (спикер Joker 2015 и не только) Полина Панюкова, специалист по маркетингу  "
xuexi;Концепция жизни программы;https://habr.com//ru/post/313934/;Как можно определить понятие жизни программы? Жизнь программы можно описать повторяющейся последовательностью конечных процессов в компьютере выполненных в контексте выбранной предметной области. Обязательно конечных, в каком-то разумном временном отрезке.  design Когда появляется программа? Скорее всего, программа появляется в голове у проектировщика/разработчика, можно назвать это design-time. Но так как этот момент не поддаётся контролю компьютера (пока), то предположим, что моментом появления программы является момент создания минимального запускаемого (о подробном смысле этого термина стоит поговорить отдельно) исходного кода. 
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №235 (1 — 6 ноября 2016);https://habr.com//ru/company/zfort/blog/314552/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.   
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №236 (7 — 13 ноября 2016);https://habr.com//ru/company/zfort/blog/315180/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.  
x512;Через тернии к облакам: создание облачного сервиса для 3D проектирования и дизайна помещений на базе ядра C3D и WebGL;https://habr.com//ru/post/319406/;Нынче в интернетах только и говорят об облаках, как они бесконечны и прекрасны… о серверах, которые они там видели… А ты? Вот и я решил поделиться с читателями своим опытом разработки онлайн сервиса проектирования помещений и интерьеров в 3D. Здесь я постараюсь рассказать об архитектуре проекта в целом и о деталях реализации.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №251 (20 — 26 февраля 2017);https://habr.com//ru/company/zfort/blog/322646/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.   
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №253 (6 — 12 марта 2017);https://habr.com//ru/company/zfort/blog/323748/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.   
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №256 (27 марта — 2 апреля 2017);https://habr.com//ru/company/zfort/blog/325462/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №257 (3 — 9 апреля 2017);https://habr.com//ru/company/zfort/blog/326034/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.   
phillennium;Два сапога Java: как прошли JBreak и JPoint 2017;https://habr.com//ru/company/jugru/blog/326542/;"  Новосибирская конференция JBreak и московская JPoint — два сапога пара: обе проходят весной, обе проводятся JUG.ru, обе — главные Java-конференции своего региона. А в этом году мы и вовсе устроили их на одной неделе (и даже выжили после такого). Поэтому рассказы «как всё прошло» для JBreak и JPoint решили объединить в один, скажем так, «breakpoint». Под катом — подробности и о Новосибирске, и о Москве. "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №258 (10 — 16 апреля 2017);https://habr.com//ru/company/zfort/blog/326700/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда. Кстати, на прошедшей неделе дайджесту исполнилось 5 лет. Спасибо, что читаете.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №259 (17 — 24 апреля 2017);https://habr.com//ru/company/zfort/blog/327200/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.  
CoolCmd;Пытаемся управлять освобождением памяти в JavaScript;https://habr.com//ru/post/327426/;"  В JavaScript есть тысячи способов выделить память, но разработчики языка лишили нас права её освобождать. Этим занимается сборщик мусора (Garbage collector, GC), функций управления которым также нет. В большинстве случаев он неплохо справляется со своей работой, однако когда в программе непрерывно освобождаются большие объёмы данных, порядка мегабайта в секунду, сборщик мусора может тупить, из-за чего процесс браузера разрастается в памяти до невменяемых размеров. В этой статье я покажу пару грязных трюков, с помощью которых можно ускорить освобождение памяти."
comerc;2017: Автостопом по галактике JavaScript;https://habr.com//ru/post/328570/;Расшифровка доклада Ильи Климова на конференции JavaScript fwdays.  Мы с вами попробуем отследить некоторые тренды в развитии JS, как сообщества, как движения, в 2017-ом году. Я очень постараюсь избежать оценочных суждений. Хотя кого я обманываю, все равно не получится. И где-то через год вы сможете с радостью открыть эту презентацию на YouTube, и понять, насколько я был не прав.  Поэтому давайте перенесёмся в 2015 год. Посмотрим, как развивался JS.   
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №264 (22 — 28 мая 2017);https://habr.com//ru/company/zfort/blog/329658/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
MaxJoint;WebVR: второе рождение виртуальной реальности;https://habr.com//ru/company/jugru/blog/329786/;Виртуальная реальность (VR) снова вышла на передний план и становится одним из основных направлений развития индустрии. Все активнее развивается направление WebVR — технологии и средства, которые встраиваются напрямую в веб-браузеры и позволяют строить трехмерные объекты без использования собственных аппаратных и программных платформ. Насколько это удобно, хорошо ли проработаны решения и каково будущее технологий VR, узнаем у экспертов.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №265 (29 мая — 4 июня 2017);https://habr.com//ru/company/zfort/blog/330190/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.   
stargrave2;NNCP: лечение online- и цензуро- зависимости store-and-forward методом;https://habr.com//ru/post/330712/;В этой статье поднят вопрос удручающей ситуации с доступностью данных в Интернете, злоупотреблением цензурой и тотальной слежкой. Власти ли или корпорации в этом виноваты? Что поделать? Создавать собственные соцсети, участвовать в сетях анонимизации, строить mesh-сети и store-and-forward решения. Демонстрация NNCP утилит для создания этих store-and-forward friend-to-friend решений. 
ru_vds;ArrayBuffer и SharedArrayBuffer в JavaScript, часть 2: знакомство с новыми объектами языка;https://habr.com//ru/company/ruvds/blog/331760/;В прошлый раз мы, в качестве подготовки к разговору об ArrayBuffer и SharedArrayBuffer, рассмотрели разные подходы к управлению памятью. Как вы, должно быть, помните, JS-движок играет роль посредника при работе с памятью, однако, новые объекты дают программисту некоторые ручные инструменты. Для чего это может понадобиться?   
ru_vds;ArrayBuffer и SharedArrayBuffer в JavaScript, часть 3: гонки потоков и Atomics;https://habr.com//ru/company/ruvds/blog/332194/;"→ ArrayBuffer и SharedArrayBuffer в JavaScript, часть 1: краткий курс по управлению памятью → ArrayBuffer и SharedArrayBuffer в JavaScript, часть 2: знакомство с новыми объектами языка → ArrayBuffer и SharedArrayBuffer в JavaScript, часть 3: гонки потоков и Atomics    В прошлый раз, рассматривая SharedArrayBuffer, мы говорили о том, что работа с этим объектом может привести к состоянию гонки потоков. Это усложняет разработку, поэтому мы ожидаем, что этим средством будут пользоваться создатели библиотек, имеющие опыт в многопоточном программировании. Они смогут применить новые низкоуровневые API для создания высокоуровневых инструментов, с которыми будут работать обычные программисты, не касаясь ни SharedArrayBuffer, ни Atomics."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №274 (1 — 6 августа 2017);https://habr.com//ru/company/zfort/blog/335034/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
Kaspersky_Lab;Security Week 33: Flash, давай до свидания, расширения Chrome крадут трафик, выложен ключ от прошивки Apple SEP;https://habr.com//ru/company/kaspersky/blog/335928/;"Нет, вы только вдумайтесь в эту цифру: 1033 (тысяча тридцать три) уязвимости в Flash Player законопачено с 2005 года! Это больше, чем в Internet Explorer, больше, чем в Windows XP — в общем, через него «теперь хорошо вермишель отбрасывать», поскольку тема закрыта.  В свое время Flash Player стал настоящей революцией для веба – благодаря ему на сайтах буйно заколосилась анимация, поперли видосики, свистелки, игры для секретарей на ресепшене, ну и, конечно, убойные баннеры (хотел повесить тут пару примеров, но от воспоминаний глаз задергался). Были даже сайты, полностью сделанные на флеше.  Больше всех любили Flash «черные шляпы». Благо, его уязвимости – ходовой товар, и недостатка в них никогда не наблюдалось. Особенно урожайным выдался 2015 год, когда в «решете» насчитали еще 329 новеньких дыр. А ведь еще в 2010 году Джобс предупреждал, что Flash пора вынести на помойку. Причем главным аргументом была его закрытость. Ну да, глава Apple признал, что у его компании полно собственных проприетарных стандартов, но не для веба же! При этом, кстати, Adobe всячески препятствует появлению и развитию альтернативных проигрывателей Flash. В результате имеем свободный выгул для эксплойтов, раздолье для крупного и мелкого рогатого зловреда."
azymohliad;Внутри супер-быстрого CSS-движка: Quantum CSS (aka Stylo);https://habr.com//ru/post/336722/;Привет, Хабр! Представляю вашему вниманию перевод статьи Inside a super fast CSS engine: Quantum CSS (aka Stylo) автора Лин Кларк. Вы возможно слышали о Project Quantum… Это проект по существенной переработке внутренностей Firefox с целью ускорить браузер. По частям мы внедряем наработки нашего экспериментального браузера Servo и значительно улучшаем остальные элементы движка. Проект сравнивался с заменой самолетного двигателя на лету. Мы вносим изменения в Firefox компонент за компонентом, так что оценить их эффект можно в очередном релизе браузера сразу по готовности.   Прим. переводчика: под катом много иллюстраций. Все они кликабельные (для просмотра в большем разрешении). Если Вы наткнетесь на неточности перевода и другие ошибки — буду благодарен, если сообщите об этом в комментариях или в личку.
ru_vds;Как работает JS: обзор движка, механизмов времени выполнения, стека вызовов;https://habr.com//ru/company/ruvds/blog/337042/;"Популярность JavaScript растёт, его возможности используют на разных уровнях применяемых разработчиками стеков технологий и на множестве платформ. На JS делают фронтенд и бэкенд, пишут гибридные и встраиваемые приложения, а также многое другое.  Анализ статистики GitHub показывает, что по показателям активных репозиториев и push-запросов, JavaScript находится на первом месте, да и в других категориях он показывает довольно высокие позиции.   Статистические сведения по JavaScript с GitHub  С другой системой статистических сведений по GitHub можно ознакомиться здесь, она подтверждает то, что было сказано выше.  Если множество проектов плотно завязаны на JavaScript, значит, разработчикам необходимо как можно более эффективно использовать всё, что даёт им язык и его экосистема, стремясь, на пути разработки замечательных программ, к глубокому пониманию внутренних механизмов языка.  Как ни странно, существует множество разработчиков, которые регулярно пишут на JavaScript, но не знают, что происходит в его недрах. Пришло время это исправить: этот материал посвящён обзору JS-движка на примере V8, механизмов времени выполнения, и стека вызовов."
ru_vds;Как работает JS: о внутреннем устройстве V8 и оптимизации кода;https://habr.com//ru/company/ruvds/blog/337460/;"[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы Перед вами — второй материал из серии, посвящённой особенностям работы JavaScript на примере движка V8. В первом шла речь о механизмах времени выполнения V8 и о стеке вызовов. Сегодня мы углубимся в особенности V8, благодаря которым исходный код на JS превращается в исполняемую программу, и поделимся советами по оптимизации кода.  "
akimovpro;Конкурс идей от ABBYY – как выиграть новый iPhone;https://habr.com//ru/company/abbyy/blog/337756/;Всем привет. Меня зовут Игорь Акимов, я руководитель направления мобильных продуктов ABBYY. Наверное, многие знают ABBYY по лучшим словарям Lingvo и помощнику любого студента FineReader, но кроме этого мы занимаемся ещё много чем интересным в сфере интеллектуальной обработки информации и лингвистики. За 28 лет накопили огромный багаж в сфере машинного обучения и нейросетей, а новых проектов и идей так много, что кажется, нам нужна помощь :) Поэтому мы приглашаем вас принять участие в конкурсе. Мы ищем идеи по применению новых технологий в мобильной разработке, которые будут близки большому числу людей. И назвали конкурс мы смело – mABBYYlity (тут и ABBYY, и мобильность, и ability – способность). Короче, всё основное тут – mobility.abbyy.com. А в статью за подробностями.
ru_vds;Как работает JS: управление памятью, четыре вида утечек памяти и борьба с ними;https://habr.com//ru/company/ruvds/blog/338150/;"[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементыВ третьем материале из серии, которая посвящена особенностям работы JavaScript, мы поговорим о памяти. Эта тема крайне важна, однако, разработчики нередко игнорируют её. В основе этой ситуации лежат разные причины, среди которых — всё возрастающая сложность современных языков программирования и прогресс в развитии средств автоматического управления памятью. Помимо рассказа о модели памяти JS, мы поделимся с вами несколькими советами, направленными на борьбу с утечками памяти.    По словам автора статьи, в компании SessionStack используют приёмы предотвращения утечек памяти для того, чтобы не допустить неоправданно высокого потребления памяти в веб-приложениях, в которые интегрированы их разработки."
anz;Зачем в 2017 году писать свой движок для мобильных игр?;https://habr.com//ru/post/338214/;В наши дни существует много игровых движков. Двумерные, трехмерные, нативные и на скриптах. На первый взгляд уже сделано все что нужно и можно просто делать игру. Однако по статистике около половины из топ 100 мобильных игр сделаны на своих движках. Почему многие крупные студии делают проекты исключительно на своих технологиях? Что их не устраивает в тех движках, что сейчас есть? Чтобы ответить на этот вопрос нужно понять зачем нужен движок, какие они вообще бывают и чем отличаются. 
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №281 (18 — 24 сентября 2017);https://habr.com//ru/company/zfort/blog/338632/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #223 (25 сентября — 1 октября);https://habr.com//ru/company/productivity_inside/blog/339082/;Подводим итоги очередной недели мобильным дайджестом. В нем мы рассказываем про разработку прибыльной игры школьниками, про iOS-релизы в Badoo, про новые правила App Store и победителей Google Play, иллюзии скорости и движения, анонимность и многое другое.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №282 (25 сентября — 1 октября 2017);https://habr.com//ru/company/zfort/blog/339098/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
Fil;[CppCon 2017] Matt Godbolt: Что мой компилятор сделал для меня?;https://habr.com//ru/post/339962/;"Продолжение цикла обзорных статей с конференции CppCon 2017.  Содержание цикла  Бьёрн Страуструп: Изучение и преподавание современного C++ Ларс Кнолл: C++ фреймворк Qt: История, Настоящее и Будущее Herb Sutter: Метапрограммирование и кодогенерация в C++ Matt Godbolt: Что мой компилятор сделал для меня?   На этот раз очень интересное выступление от автора Compiler Explorer (godbolt.org). Обязательно читать всем, кто для быстроты умножает на 2 с помощью сдвига (по крайней мере, на x86-64). Если вы знакомы с ассемблером x86-64, то можете перемотать до разделов с примерами (""Умножение"", ""Деление"" и т.д). Далее слова автора. Мои комментарии в квадратных скобках курсивом. Моя цель сделать так, чтобы вы не боялись ассемблер, это полезная вещь. И использовали его. Не обязательно все время. И я не говорю, что вы должны все бросить и учить ассемблер. Но вы должны уметь просмотреть результат работы компилятора. И когда вы это сделаете, то оцените, как много работы проделал компилятор, и какой он умный. "
m1rko;Весь веб на 60+ FPS: как новый рендерер в Firefox избавился от рывков и подтормаживаний;https://habr.com//ru/post/340176/;"До релиза Firefox Quantum остаётся всё меньше времени. Он принесёт множество улучшений в производительности, в том числе сверхбыстрый движок CSS, который мы позаимствовали у Servo.  Но есть ещё одна большая часть технологии Servo, которая пока не вошла в состав Firefox Quantum, но скоро войдёт. Это WebRender, часть проекта Quantum Render.     WebRender известен своей исключительной скоростью. Но главная задача — не ускорить рендеринг, а сделать его более плавным.  При разработке WebRender мы поставили задачу, чтобы все приложения работали на 60 кадрах в секунду (FPS) или лучше, независимо от размера дисплея или от размера анимации. И это сработало. Страницы, которые пыхтят на 15 FPS в Chrome или нынешнем Firefox, летают на 60 FPS при запуске WebRender.  Как WebRender делает это? Он фундаментальным образом меняет принцип работы движка рендеринга, делая его более похожим на движок 3D-игры."
ru_vds;Как работает JS: цикл событий, асинхронность и пять способов улучшения кода с помощью async / await;https://habr.com//ru/company/ruvds/blog/340508/;"[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы Перед вами четвёртая часть серии материалов, посвящённых внутренним особенностям работы JavaScript. Эти материалы, с одной стороны, направлены на изучение базовых элементов языка и экосистемы JS, с другой, содержат рекомендации, основанные на практике разработки ПО в компании SessionStack. Конкурентоспособное JS-приложение должно быть быстрым и надёжным. Создание таких приложений — та цель, к которой, в конечном счёте, стремится любой, интересующийся механизмами JavaScript.  "
gatoazul;Привет из мезозоя;https://habr.com//ru/post/341692/; Парадный портрет автора, заодно иллюстрирующий идею современной веб-разработки Сразу честно признаюсь: я существо отсталое. Ну чтобы потом меня пальцами на этот счет не тыкали. Программировать я начал чуть позже изобретения палки-копалки, но намного раньше постройки пирамид — в общем, когда еще птеродактили по небу летали. Несмотря на некоторые недостатки — в виде ревматизма и отсиженного перед монитором зада — такой опыт дает и отдельные преимущества. Можно уютно расположившись в теплом болоте с умилением смотреть, как перед глазами мельтешат молодые и прогрессивные, неистово изобретая очередной велосипед с квадратными колесами.
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №287 (30 октября — 5 ноября 2017);https://habr.com//ru/company/zfort/blog/341740/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №288 (6 — 12 ноября 2017);https://habr.com//ru/company/zfort/blog/342222/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
matvey_travkin;Приглашаем на iOS-meetup SuperJob;https://habr.com//ru/company/superjob/blog/342240/;"30 ноября приглашаем iOS-разработчиков на meetup в офис Superjob.  Спикеры и темы:  Алексей Коньшин, старший разработчик мобильных приложений SuperJob, с докладом «Построение iOS-приложения из переиспользуемых модулей». Расскажет о том, как в SuperJob ускорили разработку экранов приложения, разделив их на самостоятельные блоки, как использовали для этого библиотеку IGListKit, как сделали её ещё лучше и как удалось ускорить разработку и унифицировать code style, внедрив генерацию кода.  Ольга Выростко, iOS-разработчик «Яндекса», с докладом «Адаптация приложений под iOS 11 и iPhone X». Расскажет о том, какие вопросы встали перед разработчиками после недавней презентации Apple. Например, как сделать, чтобы приложение гармонично смотрелось в новой версии операционной системы и стабильно работало на iPhone X, какие новые возможности можно использовать, чтобы процесс разработки шёл быстрее, проще и приятнее. Ещё мы поговорим о том, как изменилось UI-тестирование после перехода на xCode 9 и что в нём нового."
ru_vds;Как работает JS: WebSocket и HTTP/2+SSE. Что выбрать?;https://habr.com//ru/company/ruvds/blog/342346/;"[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы Перед вами — перевод пятого материала из серии, посвящённой особенностям JS-разработки. В предыдущих статьях мы рассматривали основные элементы экосистемы JavaScript, возможностями которых пользуются разработчики серверного и клиентского кода. В этих материалах, после изложения основ тех или иных аспектов JS, даются рекомендации по их использованию. Автор статьи говорит, что эти принципы применяются в ходе разработки приложения SessionStack. Современный пользователь библиотек и фреймворков может выбирать из множества возможностей, поэтому любому проекту, для того, чтобы достойно смотреться в конкурентной борьбе, приходится выжимать из технологий, на которых он построен, всё, что можно. "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №289 (13 — 19 ноября 2017);https://habr.com//ru/company/zfort/blog/342740/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №290 (19 — 26 ноября 2017);https://habr.com//ru/company/zfort/blog/343238/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
Boyd_Rice;Разработка инструмента веб-дизайнера на основе веб-приложения (Figma). Перевод;https://habr.com//ru/post/343442/;" Наше представление о будущем инструментов дизайна таково, что и инструменты, и контент должны быть легко доступны.  Вот почему мы создали Figma, командный инструмент работы над дизайном интерфейсов, как облачный сервис, распространяемый в виде веб-приложения.  Когда мы решились создать Figma, мы знали, что это будет серьезный вызов. Чтобы действительно преуспеть, необходимо предоставить высокоточный инструмент редактирования, который будет принят профессионалами, а так же будет работать одинаково хорошо в любом окружении. Дорога к результату была очень непроста; в итоге, мы практически создали браузер внутри браузера. "
olegchir;«Блендер на 28 докладов, каждый из которых равен десяти статьям» — интервью с Программным комитетом HolyJS 2017 Moscow;https://habr.com//ru/company/jugru/blog/343454/;"Для обычного пользователя программы, которые мы пишем — это магия. Фронт, бэк — неважно. Человек нажимает на кнопку в браузере, и вдруг случается чудо. Но мы-то знаем, что это не чудо, а результат упорной работы. Когда приходишь на конференцию, кажется, что всё работает само собой. Всегда есть интересный доклад. В нём есть конкретные места, которые можно использовать в работе прямо сейчас, которые стоит обсудить с друзьями и коллегами или которые просто почему-то цепляют тебя лично. Это происходит само собой, просто по статистике? Если набрать достаточное количество докладов, всё получится автомагически? Как бы не так. Всё подстроено. Как программу на JS проектируют архитекторы, так и за каждой конференцией стоит команда отличных инженеров, которые проектируют её специальным образом. Они проектируют не только структуру, но и вместе с докладчиками «отлаживают» каждый доклад, строчка за строчкой, раз за разом. Проводят кросс-ревью, оценку, починку багов. Пишутся специальные инструменты и выкладываются на GitHub. И так до тех пор, пока не скомпилируется хорошо работающая, безбажная конференция. Наверное, каждый иногда хотел пообщаться с разработчиками тех инструментов, которыми мы все пользуемся. К примеру, кто хотел бы сказать пару ласковых создателям React или Node.js? А кто хотел бы узнать от них парочку тайн о внутренней кухне проекта? Это интервью — с разработчиками конференции HolyJS 2017 Moscow, с её Программным комитетом. Мы будем обсуждать:  какие сложности возникают при разработке программы конференции и как их побеждают; кто допущен к сакральному процессу отбора докладов и нужно ли для этого быть богом JavaScript; совместима ли работа в ПК с обычной жизнью; какие доклады стоит послушать и на какие ни в коем случае не стоит приходить хипстерам; кучу рандомных интересных фактов.  "
matvey_travkin;iOS-meetup SuperJob (видеоотчет);https://habr.com//ru/company/superjob/blog/343582/;"Смотрите доклады с iOS-meetup в офисе SuperJob.  Алексей Коньшин, старший разработчик мобильных приложений SuperJob, с докладом «Построение iOS-приложения из переиспользуемых модулей».  О том, как в SuperJob ускорили разработку экранов приложения, разделив их на самостоятельные блоки, как использовали для этого библиотеку IGListKit, как сделали её ещё лучше и как удалось ускорить разработку и унифицировать code style, внедрив генерацию кода.    Ольга Выростко, iOS-разработчик «Яндекса», с докладом «Адаптация приложений под iOS 11 и iPhone X».  О том, какие вопросы встали перед разработчиками после недавней презентации Apple. Например, как сделать, чтобы приложение гармонично смотрелось в новой версии операционной системы и стабильно работало на iPhone X, какие новые возможности можно использовать, чтобы процесс разработки шёл быстрее, проще и приятнее. Ещё мы поговорим о том, как изменилось UI-тестирование после перехода на xCode 9 и что в нём нового. "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №291 (27 ноября — 3 декабря 2017);https://habr.com//ru/company/zfort/blog/343806/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
olegchir;Дуглас Крокфорд, Азат Мардан, Виталий Фридман и все-все-все: анонс бесплатной YouTube-трансляция HolyJS 2017 Moscow;https://habr.com//ru/company/jugru/blog/343952/;"Коротко о событии Конференция: HolyJS 2017 Moscow Дата: 10-11 декабря 2017 года  Бесплатная трансляция (только первый зал): страница трансляции на официальном сайте.  Любой JavaScript-разработчик однажды задается вопросом: на какую конференцию по JavaScript сходить? Интересные доклады послушать, людей посмотреть, себя показать. В 2016 году мы пошли по тому же пути и обнаружили, что в России ничего подходящего на эту тему нет. Всевозможные митапы по фронту — пожалуйста. Но ведь JS давно уже не только фронт. Короче, мы решили исправить эту несправедливость и создали главную и единственную в России JavaScript-конференцию, HolyJS. На Холи бывает не только фронт, но и бэкенд, десктоп, и даже работа с железом. Теперь нам всем есть куда ходить, но это не конец истории. В JavaScript-мире есть важнейшая особенность, которая отличает его от миров типа Java и .NET: технологии и фреймворки развиваются стремительно. Не попавшие на конференцию люди оказываются в невыгодном положении — мало кому хочется смотреть записи, устаревшие на 4 месяца. Обычно есть несколько фундаментальных докладов, которыми можно гордиться и пересматривать еще пару лет, но большая часть материала интересна и полезна в моменте: посмотрел, послушал, пошел использовать на работе. Всё это останется за пэйволлом? А как же комьюнити и чувство локтя? Нет ли в этом чего-то неправильного? Теперь трансляцию первого зала можно смотреть бесплатно, с нашего сайта и на YouTube. Это позволяет всем желающим присоединиться к конференции и провести на ней все два дня. Прийти вживую было бы круче, но на этой полномасштабной трансляции можно по-настоящему погрузиться в тему и ощутить атмосферу происходящего."
anastasiak2512;Релиз CLion 2017.3: существенные улучшения поддержки C++, интеграция с Valgrind Memcheck и Boost.Test и многое другое;https://habr.com//ru/company/JetBrains/blog/344076/;"Привет, Хабр!  Наша команда приготовила всем разработчикам на C и C++ новогодний подарок под елку – новый релиз CLion 2017.3! В этом посте постараемся рассказать, чем он хорош, прикинуть дальнейшие направления для развития продукта и, конечно, ответить на все интересующие вас вопросы в комментариях.    Коротко об основных улучшениях для тех, кто не хочет много читать:   Поддержка языка C++   Улучшения в таких подсистемах парсера, как list initialization и name lookup  Поддержка расширений специфичных для компилятора Microsoft Visual C++  Поддержка макроса __COUNTER__  И не только!  Новые инструменты и фреймворки   Valgrind Memcheck  Boost.Test  CMake 3.9, GDB 8.0, LLDB 5.0  Существенные переработки и расширение возможностей в настройке компилятора, окружения, CMake, отладчика, и пр. Возможность запуска почти произвольной функции main, иконки для запуска функций main и тестов Возможность разрабатывать на Kotlin/Native в CLion  Можно прямо сейчас скачать бесплатную 30-дневную версию с нашего сайта и попробовать новые возможности (для этого мы даже подготовили специальный небольшой демо-проект). А ниже мы поговорим об улучшениях более подробно."
olegbunin;Оптимизация производительности фронтенда;https://habr.com//ru/company/oleg-bunin/blog/345498/;Тормозящий сайт — это боль не только пользователя, но и разработчика. Как можно исправить ситуацию, в каких случаях нужно делать ставку на кэширование, а где можно довериться процессору, и как все это может помочь оптимизировать производительность сложного фронтенд-приложения, на практике готов объяснить эксперт по JS и преподаватель Академии HTML Игорь Алексеенко (@iamo0). Под катом — расшифровка его доклада с Frontend Conf 2017.   
bmusin;Rust: «Назад к корням»;https://habr.com//ru/post/346644/;Мне приходит в голову множество разных целей для Rust в текущем 2018 году, к слову, 2017 год прошел для меня очень быстро, так что я задался следующим вопросом: если бы я мог выбрать одну-единственную цель для Rust в 2018 году, то что бы я выбрал? Я буду пристрастен, и вот мое мнение:
vitaliy2;Майнер на сайте — зло (хотя может стать и добром);https://habr.com//ru/post/347868/;"Часто на Хабре можно встретить комменты в духе «Майнер — хороша замена/дополнение к рекламе на сайте» или «Я лучше отдам 10-40% CPU». Данная статья приведёт аргументы, почему такие утверждения в корне неверны. Также статья выдвинет предположение, как можно решить приведённые проблемы (не все), позволив майнерам стать дополнительным источником монетизации, что может положительно сказаться на вебе.  Справка: майнер — это программа для майнинга криптовалюты. Может встраиваться в сайты, принося автору сайта прибыль. Майнинг может использовать как мощности процессора, так и видеокарты (javascript может запускать шейдеры с помощью WebGL)."
Cloud4Y_user;Внимание, обновите Firefox до версии 58.0.1 для закрытия критической уязвимости;https://habr.com//ru/company/cloud4y/blog/348080/;"  Mozilla выпустила важное обновление веб-браузера Firefox для исправления критической уязвимости, которая позволяет злоумышленникам удаленно выполнять вредоносный код на компьютерах, на которых установлена ​​уязвимая версия браузера.  Критическая уязвимость (CVE-2018-5124) может привести к выполнению кода в системе при открытии определённым образом подготовленных HTML-фрагментов, в которых используются дополнительные атрибуты управления интерфейсом. Суть уязвимости в возможности inline-подстановки JavaScript-кода через данные элементы, который будет выполнены на привилегированном уровне, отвечающем за формирование интерфейса браузера (chrome-privileged). «Успешное использование уязвимости может позволить злоумышленнику выполнить произвольный код с привилегиями пользователя. Если пользователь имеет повышенные привилегии, злоумышленник может полностью скомпрометировать систему», — говорится в рекомендациях по безопасности от компании Cisco.Злоумышленник может получить возможность устанавливать программы, создавать новые учетные записи с полными правами пользователя, просматривать, изменять или удалять данные."
IsaNesquik;Эксперимент с бинарным кодом в Glimmer;https://habr.com//ru/post/348586/;"Перевод статьи об эксперименте с бинарным кодом в Glimmer, соавторы публикации: Сара Клаттербак, Чад Хиетала и Том Дейл.  Чуть более года назад Ember.js претерпел значительные изменения. В тесном сотрудничестве между инженерами LinkedIn и Open Source сообществом, мы заменили у Ember движок для рендиранга на новую библиотеку, Glimmer VM, что улучшило производительность и значительно уменьшило размер скомпилированных шаблонов.  Glimmer относится к Handlebars шаблонам как функциональный язык программирования и компилирует их в последовательность инструкций, которые могут быть выполнены в браузере. Эти инструкции, или опкоды (прим. переводчика коды операций) кодируются в компактную структуру данных в виде JSON.  Когда мы перенесли наше веб приложение linkedin.com на Glimmer, мы увидели значительные улучшения во времени загрузки. В дополнении к уменьшению размера файлов на 40%, мы также сократили время, затрачиваемое браузером на анализ JavaScript, благодаря компиляции шаблонов в JSON. Более того, это изменение улучшило время загрузки в 90% случаев более чем на 1 секунду.  В этой статье мы обсудим недавний эксперимент по еще большему улучшению времени загрузки, полностью исключив время необходимое для синтаксического анализа скомпилированных шаблонов."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №302 (12 — 18 февраля 2018);https://habr.com//ru/company/zfort/blog/349406/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
olemskoi;tdlib-ruby: как сделать Telegram-клиент на Ruby;https://habr.com//ru/company/southbridge/blog/349504/;" Одна из особенностей мессенджера Telegram — широкие возможности API (Bot API и Telegram API). Команда Telegram пошла ещё дальше и выпустила библиотеку TDLib (Telegram Database Library), позволяющую разрабатывать альтернативные клиенты Telegram и не задумываться о низкоуровневых деталях реализации (работа с сетью, шифрование и локальное хранение данных).  TDLib работает на Android, iOS, Windows, macOS, Linux, Windows Phone, WebAssembly, watchOS, tvOS, Tizen, Cygwin и других *nix системах, а так же интегрируется с любым языком программирования, поддерживающим выполнение C-функций. В этой статье мы рассмотрим использование TDLib в Ruby и создание gem'а для взаимодействия с JSON-интерфейсом библиотеки."
alinatestova;Краткая история Rust: от хобби до самого популярного ЯП по данным StackOverflow;https://habr.com//ru/company/bitfury/blog/349786/;"Rust — это язык системного программирования, создатели которого уделили внимание трем вещам: параллелизму, скорости и безопасности. И хотя Rust считается молодым языком программирования — его первая стабильная версия вышла в 2015 году — он разрабатывается уже более десяти лет.  Сегодня мы бы хотели заглянуть в прошлое и рассказать историю языка Rust, показать, как изменились его функции и возможности за время разработки и привести конкретные примеры внедрения этого ЯП на практике.   "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №303 (19 — 25 февраля 2018);https://habr.com//ru/company/zfort/blog/349930/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
lahmatiy;Unit-тестирование скриншотами: преодолеваем звуковой барьер. Расшифровка доклада;https://habr.com//ru/company/avito/blog/350604/;Тестировать регресс верстки скриншотами модно, этим никого не удивишь. Мы давно хотели внедрить этот вид тестирования у себя. Всё время смущали вопросы простоты поддержки и применения, но в большей степени — пропускная способность решений. Хотелось, чтобы это было что-то простое в использовании и быстрое в работе. Готовые решения не подошли, и мы взялись делать свое. Под катом расскажем, что из этого вышло, какие задачи решали, и как мы добились того, чтобы тестирование скриншотами практически не влияло на общее время прохождения тестов. Этот пост — расшифровка доклада, который прозвучал на HolyJS 2017 Moscow. Видео можно посмотреть по ссылке, а почитать и посмотреть слайды — далее.  
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #249 (9 апреля — 15 апреля);https://habr.com//ru/company/productivity_inside/blog/353540/;В новом дайжесте у нас Флаппи Бёрд с Короной, GDPR, поиск квадрокруга, лучшие открытые проекты, плоские иконки и измерения программистов, рекламные сети и основы науки о данных.  
olegchir;JavaScript, Java, какая теперь разница?;https://habr.com//ru/company/jugru/blog/353624/;  На прошлом JPoint пообещал написать статью про использование GraalVM для смешивания Java и JS. Вот она.  В чем проблема? В повседневной практике часто встречаются приложения, состоящие из двух частей: JavaScript-фронтенд и Java-бэкенд. Организация интеропа между ними требует усилий. Как правило, делают их люди с разных сторон баррикад, и при попытке залезть в чужую область они начинают страдать. Еще есть фуллстек веб-разработчики, но про них всё понятно: они должны страдать всегда. В этой статье мы рассмотрим новую технологию, которая может сделать процесс немного менее болезненным. Точнее, способ существует довольно давно, но как-то прошел мимо внимания широких народных масс.
olegchir;Обзор программы конференции DotNext 2018 Piter;https://habr.com//ru/company/jugru/blog/353844/;"  Конференция: DotNext 2018 Piter Дата: 22-23 апреля 2018 года Место: Санкт-Петербург, Гостиница «Park Inn by Radisson Пулковская»  Всего пара дней осталась до следующего DotNext. Над программой и докладами была проведена колоссальная работа — ранее мы уже писали об этом в анонсе конференции и отдельной статье.   В этом хабрапосте мы свели воедино всю-всю программу в виде одного большого списка, с описаниями докладов и докладчиков. Можно уже сейчас начинать думать, на какие доклады стоит пойти — ведь придется выбирать между тремя параллельными треками. Кроме того, все еще остается возможность приобрести билеты.  Подробное описание программы — под катом."
phillennium;Анимации в мире состояний;https://habr.com//ru/company/jugru/blog/354550/;"Многие уже научились строить чистые интерфейсы и писать «undo-redo» в несколько строчек. Но как быть с анимациями? Часто их обходят стороной, и они не всегда вписываются в подход (state) ↦ DOM. Есть отличные решения вроде React Motion, но что если вам нужно делать сложные анимации или работать с Canvas, используя физический движок?  В нашем тексте рассказывается, как работать с анимациям в React-приложениях, и сравнивается несколько подходов (D3, React-Motion, «грязные компоненты»). А также о том, как «запускать» анимации в Redux-приложениях. Материал основан на расшифровке доклада Алексея Тактарова с нашей декабрьской конференции HolyJS 2017 Moscow. Прилагаем заодно видеозапись этого доклада:   Осторожно, трафик: под катом много картинок и гифок (сами понимаете, материал про анимации). "
olegchir;Оптимизируем веб с Виталием Фридманом, — компрессия, картинки, шрифты, фичи HTTP/2 и Resource Hints;https://habr.com//ru/company/jugru/blog/354890/;"Предлагаем вашему вниманию подборку всевозможных лайфхаков и трюков по оптимизации объема загружаемого кода и файлов, а также общего ускорения загрузки веб-страниц.   В основе статьи расшифровка выступления Виталия Фридмана из Smashing Magazine на декабрьской конференции Holy JS 2017 Moscow. "
abagnale;Новости Qt, июнь 2017 — май 2018;https://habr.com//ru/post/354972/;Что нового появилось/произошло в Qt за полгода почти год с прошлой статьи. Релизы 5.9 и 5.10, а также новые инструменты, аддоны, платформы и переход на подписочную модель лицензирования. 
Prand;Названа точная дата «смерти» Flash;https://habr.com//ru/post/355156/;Сколько раз его хоронили — это не счесть. Однако новость, прозвучавшая из «уст» самих разработчиков, поистине достойна внимания. Предлагаю прочесть одну любопытную запись, которая появилась недавно в блоге Khronos Group – извечного конкурента Flash. Похоже, на противостоянии двух технологий ставится жирная точка. Далее вольный перевод… 
phillennium;UI-компоненты на пиксельных шейдерах: пишем ваш первый шейдер;https://habr.com//ru/company/jugru/blog/358250/;"Кого можно назвать «пиксельных шейдеров начальник и пикселов командир»? Дениса Радина, работающего в Evolution Gaming над фотореалистичными веб-играми с использованием React и WebGL: он известен многим как раз под именем Pixels Commander.  В декабре на нашей конференции HolyJS он выступил с докладом о том, как использование GLSL может улучшить работу с UI-компонентами по сравнению с «обычным джаваскриптом». А теперь для Хабра мы подготовили текстовую версию этого доклада — добро пожаловать под кат! Заодно прикладываем видеозапись выступления:  "
zdanevich-vitaly;Как я год строил расширениe для браузера которое читает статьи голосом (с синхронизацией в подкаст);https://habr.com//ru/post/358374/;Не один раз я пробовал использовать сторонние API для получения голоса из текста который мне интересно прочитать — можно переключить чтение на уши когда глаза устали, или слушать во время комьюта. Знаю я такой не один, даже люди далекие от айти бывает загружают куда-то текст и скачивают mp3. И подкасты/аудиокниги становятся все популярнее, и голосовые интерфейсы. Очевидно что аудитория есть, топовые экстеншены в маркете Хрома на эту тематику имеют сотни тысяч пользователей. Но голоса от Амазона обычно у них нет (лучший из доступных, лучше нового от Гугла), а где есть нет чего-то другого, например возможности слушать в экстеншене — а не только добавлять в свой подкаст. Предложил идею проекта внутри компании — был получен апрув — пошла разработка.  
bunopus;Как я съездил на Google I/O и вернулся живым (почти);https://habr.com//ru/company/wrike/blog/358392/;"Конференции бывают большие, маленькие, тематические и не очень, но в целом, каждая из них живет по своим законам. Логично, что для того чтобы их (законы) понять, надо присутствовать на конференции лично. Сегодня я хотел бы рассказать о том, что такое Google I/O, как там всё устроено и что я понял, когда был в самом сердце корпорации Google.  Конечно же, информации в сети полно, но я и не претендую на уникальность. Думаете, из семи тысяч человек я один сподобился написать пост на Хабре? Пускай воронка и сужается, так как ресурс русскоязычный (пока), но тем не менее нашего брата там было полно, а тем более Google аккредитовывает целый пул журналистов для своих событий. Как бы то ни было, каждый видит слона с разной стороны, и я попробую обрисовать, какую часть разглядел я. Кстати, какой-никакой опыт у меня есть: как спикера, так и организатора (минутка неприкрытой рекламы WrikeTechClub — регулярных митапов по различным темам и HolyJS — одной из самых лучших frontend конференций и ).  Внимание, это не детальный разбор программы, а чисто субъективное мнение участника конференции. Все записи доступны на YouTube, в том числе и recap версии, поэтому не вижу смысла пересказывать материал слово в слово, это не технический обзор  "
phillennium;Поиск и устранение неисправностей Node.js-приложений под капотом;https://habr.com//ru/company/jugru/blog/358680/;"С момента появления Node.js диагностика совершенствовалась в несколько этапов, от отладки приложений до глубокого анализа производительности. В этот раз речь пойдет о стратегиях использования таких инструментов, как core dump debuggers, flame graphs, ошибках в production и утечке памяти.   В основе материала — расшифровка доклада Николая Матвиенко из Grid Dynamics с нашей декабрьской конференции HolyJS 2017 Moscow. "
wirex;Сотня криптовалют, описанных не более чем четырьмя словами;https://habr.com//ru/company/wirex/blog/408535/;"  В этом списке каждая из криптовалют описана всего в четырех словах. Их много, и среди них есть как исключительные и знаковые, так и откровенное мошенничество.  Название        | Токен | Описание                               ----------------|-------|------------------------------------------ Bitcoin         | BTC   | Цифровое золото                              Ethereum        | ETH   | Программируемые контракты и деньги         Bitcoin Cash    | BCH   | Клон Биткоина                             Ripple          | XRP   | Сеть корпоративных платежей и взаиморасчетов Litecoin        | LTC   | Ускоренная версия Биткоина                            Dash            | DASH  | Клон Биткоина с акцентом на приватность           NEO             | NEO   | Ethereum китайского рынка                   NEM             | XEM   | Готовые цифровые активы из коробки        Monero          | XMR   | Анонимные цифровые деньги                     Ethereum Classic| ETC   | Клон Ethereum                           IOTA            | MIOTA | Платежи в сфере Интернета вещей               Qtum            | QTUM  | Биткоин со смарт-контрактами Ethereum              OmiseGO         | OMG   | Банкинг, переводы и биржа Zcash           | ZEC   | Анонимные цифровые деньги BitConnect      | BCC   | Пирамида Мейдоффа в мире криптовалют  Lisk            | LSK   | Децентрализованные приложения на Javascript Cardano         | ADA   | Академический подход к умным контрактам Tether          | USDT  | Стоит 1 доллар                             Stellar Lumens  | XLM   | Цифровые долговые расписки                             EOS             | EOS   | Децентрализованные приложения на WebAssembly Hshare          | HSR   | Коммутатор для разных блокчейнов                   Waves           | WAVES | Децентрализованная биржа и краудфандинг"
pronskiy;PHP-Дайджест № 132 (27 мая – 10 июня 2018);https://habr.com//ru/company/zfort/blog/413813/; Свежая подборка со ссылками на новости и материалы. В выпуске: PHP 7.3.0 alpha 1, Yii 3.0 alpha 1 и другие релизы, свежая книга по асинхронному PHP, видеозаписи докладов, порция полезных инструментов, и многое другое. Приятного чтения!
ru_vds;Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация;https://habr.com//ru/company/ruvds/blog/415269/;" [Советуем почитать] Другие 19 частей цикла Часть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы  Все мы знаем о том, что JavaScript-код веб-проектов может разрастаться до прямо-таки огромных размеров. А чем больше размер кода — тем дольше браузер будет его загружать. Но проблема тут не только во времени передачи данных по сети. После того, как программа загрузится, её ещё надо распарсить, скомпилировать в байт-код, и, наконец, выполнить. Сегодня мы представляем вашему вниманию перевод 14 части серии материалов об экосистеме JavaScript. А именно, речь пойдёт о синтаксическом анализе JS-кода, о том, как строятся абстрактные синтаксические деревья, и о том, как программист может повлиять на эти процессы, добившись повышения скорости работы своих приложений.  "
ru_vds;Как работает JS: классы и наследование, транспиляция в Babel и TypeScript;https://habr.com//ru/company/ruvds/blog/415377/;В наши дни использование классов являются одним из самых популярных способов структурирования программных проектов. Этот подход к программированию применяется и в JavaScript. Сегодня мы публикуем перевод 15 части серии материалов, посвящённых экосистеме JS. В этой статье речь пойдёт о различных подходах к реализации классов в JavaScript, о механизмах наследования и о транспиляции. Начнём мы с рассказа о том, как работают прототипы и с анализа различных способов имитации наследования, основанного на классах, в популярных библиотеках. Далее мы поговорим о том, как, благодаря транспиляции, можно писать JS-программы, использующие возможности, которые либо отсутствуют в языке, либо, хотя и существуют в виде новых стандартов или предложений, находящихся на разных стадиях согласования, пока не реализованы в JS-движках. В частности, речь пойдёт о Babel и TypeScript и о классах ECMAScript 2015. После этого мы разберём несколько примеров, демонстрирующих особенности внутренней реализации классов в JS-движке V8. 
ru_vds;Как работает JS: системы хранения данных;https://habr.com//ru/company/ruvds/blog/415505/;"При проектировании веб-приложения чрезвычайно важно выбрать подходящие средства для локального хранения данных. Речь идёт о механизме, который позволит надёжно хранить информацию, будет способствовать снижению объёма данных, передаваемых между серверной и клиентской частями приложения, и при этом не ухудшит скорость реакции приложения на воздействия пользователя. Хорошо продуманная стратегия локального кэширования данных является центральным звеном в разработке мобильных веб-приложений, которые могут работать без подключения к интернету. Современные пользователи всё чаще и чаще относятся к подобным возможностям как к чему-то привычному и ожидаемому.    Сегодня, в переводе 16 части серии материалов, посвящённых всему, что связано с JavaScript, мы поговорим о механизмах хранения данных на стороне клиента, которые могут использоваться в веб-разработке, и о выборе системы хранения данных для конкретного проекта."
ru_vds;Как работает JS: технология Shadow DOM и веб-компоненты;https://habr.com//ru/company/ruvds/blog/415881/;"[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы Сегодня, в переводе 17 части материалов, посвящённых особенностям всего, что так или иначе связано с JavaScript, речь пойдёт о веб-компонентах и о различных стандартах, которые направлены на работу с ними. Особое внимание здесь будет уделено технологии Shadow DOM.  "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №322 (2 — 8 июля 2018);https://habr.com//ru/company/zfort/blog/416533/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.   
ru_vds;Как работает JS: WebRTC и механизмы P2P-коммуникаций;https://habr.com//ru/company/ruvds/blog/416821/;"[Советуем почитать] Другие 19 частей циклаЧасть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы Сегодня мы публикуем перевод 18 части серии материалов, посвящённых всему, что связано с JavaScript. Здесь мы поговорим о технологии WebRTC, которая направлена на организацию прямого обмена данными между браузерными приложениями в реальном времени.   "
alexzfort;Дайджест свежих материалов из мира фронтенда за последние две недели №323 (8 — 22 июля 2018);https://habr.com//ru/company/zfort/blog/417881/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
ru_vds;Как работает JS: пользовательские элементы;https://habr.com//ru/company/ruvds/blog/419831/;" [Советуем почитать] Другие 19 частей цикла Часть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы  Представляем вашему вниманию перевод 19 статьи из серии материалов компании SessionStack, посвящённых особенностям различных механизмов экосистемы JavaScript. Сегодня речь пойдёт о стандарте Custom Elements — о так называемых «пользовательских элементах». Мы поговорим, о том, какие задачи они позволяют решать, и о том, как их создавать и использовать.  "
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #266 (13 августа— 19 августа);https://habr.com//ru/company/productivity_inside/blog/420577/;На этой неделе мы снова делали приложения для Ассистента Google, обсуждали Google Pay и плохих дизайнеров, разрабатывали смешанную реальность и PWA, погружались в геймдизайн и маркетплейс продуктов. Все это и многое другое в нашем новом дайджесте!  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №327 (13 — 19 августа 2018);https://habr.com//ru/company/zfort/blog/420609/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
YourDestiny;Android Jetpack: превращаем приложения в ракеты;https://habr.com//ru/company/oleg-bunin/blog/421665/;Война… Война никогда не меняется. Так, война за красивый и работающий код идет постоянно. И на каждую сложную задачу рождается свое оружие: кто-то делает его под себя, а кто-то пользуется готовыми инструментами. Разработка под Android не исключение. На нашей конференции AppsConf 2018 мы обсудим, как и чем сейчас интереснее всего пользоваться, где можно споткнуться и что интересного есть в огромном арсенале средств разработки, который Google наконец начал приводить в порядок. Основные темы докладов можно посмотреть на нашем сайте, а пока мы попросили рассказать Google Developer Expert Дениса Неклюдова и Александра Смирнова о новом инструментарии Android Jetpack, который был представлен в мае этого года.   
m1rko;Хватит разрабатывать софт с запасом;https://habr.com//ru/post/421895/;"Или делайте это правильно  Если выбрать одну идею, которая убивает больше всего продуктов, то это создание запаса на будущее (future proofing).  Обычно идея проявляется по схеме.  Нам нужен {X}, и хотя сделать {Y} гораздо легче, но при наступлении {Z} первый вариант упростит нам жизнь. Где {Z} — событие, которое может произойти в далёком будущем.  Вот несколько примеров:   Для инфраструктуры нужны Kubernetes и Docker, хотя один большой сервер гораздо проще, но когда придётся масштабироваться до 11-ти серверов, это упростит нам жизнь. Для обработки данных нужен распределённый дизайн, хотя централизованное решение гораздо проще, но когда клиент потребует 99,999% безотказной работы в SLA, это упростит нам жизнь. Нужно набрать команду разработчиков и создать собственное программное обеспечение, хотя Wordpress и Shopify гораздо проще, но когда клиентская база вырастет в 100 раз, это упростит нам жизнь. Нужно использовать дизайн на основе наследования типов, хотя композиция гораздо проще, но после 5 лет увеличения кодовой базы это упростит нам жизнь. Нужно написать код в C++ с кэшированием представлений, хотя Python-скрипт с прямыми запросами к Postgres гораздо проще, но при большом увеличении объёма данных это упростит нам жизнь.  Недавно я написал статью о воображаемых проблемах, которые люди придумывают себя со скуки, а не для пользы. Создание запаса на будущее обычно относится к этой категории. Я бы даже сказал, что это самая популярная ошибка в большинстве маленьких компаний."
MaxEdZX;Более эффективная запись массивов в постоянную память смарт-контракта в Solidity;https://habr.com//ru/post/423639/;"В последнее время, мне пришлось немного поработать с блокчейном Ethereum. Идея, над которой я работал, требовала хранить прямо в блокчейне некоторое достаточно большое количество целых чисел, так, чтобы смарт-контракт имел к ним удобный доступ. Большинство уроков по разработке смарт-контрактов говорят нам «не храните много данных в блокчейне, это дорого!». Но сколько это «много», и с какого количества цена становится слишком высокой для практического использования? Это мне надо было выяснить, потому что нам наши данные выносить офф-чейн было никак нельзя, рушилась вся затея.  Я только начинаю работать с Solidity и EVM, поэтому эта статья не претендует на истину в последней инстанции, но других материалов по этой теме ни на русском, ни на английском мне найти не удалось (хотя очень плохо, что вот эта статья мне не попалась раньше), поэтому я надеюсь, что она может оказаться кому-то полезна. Ну или в крайнем случае, она может оказаться полезна мне, если опытные товарищи расскажут, насколько и где именно я в ней не прав.  Для начала, я решил быстро прикинуть — получится ли у нас? Давайте возьмём стандартный, широко распространённый тип контракта — токен ERC20. По крайней мере, такой контракт хранит в блокчейне соответствие адресов людей, который купили токены, их балансам. В реальности, хранятся только балансы, каждый из которых занимает 32 байта (на деле здесь экономить не имеет смысла из-за особенностей Solidity и EVM). У более-менее успешного токена легко могут быть десятки тысяч обладателей, и таким образом получаем, что хранить в блокчейне около 320000 байт — вполне допустимо. А нам больше и не надо!  Наивный подход Ну что же, попробуем наши данные сохранить. Значительная их часть — 8-битные целые беззнаковые числа, поэтому передадим их массив в контракт, и попробуем записать их в постоянную память:"
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №334 (7 — 14 октября 2018);https://habr.com//ru/company/zfort/blog/426389/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
advertka;Kotlin 1.3 с поддержкой корутин, бета-версией Kotlin/Native и не только;https://habr.com//ru/company/JetBrains/blog/428291/;"На днях вышел Kotlin 1.3 с комплектом сопутствующих библиотек, инструментов сборки и учебных материалов.  Мы делаем Kotlin как инструмент для разработки приложений любого масштаба на любых платформах. В Kotlin 1.3, благодаря корутинам, читать и писать неблокирующий асинхронный код стало легко и удобно. Масштабируемость стала гораздо доступнее. В новом релизе мы также выпустили бета-версию Kotlin/Native, позволяющую компилировать код Kotlin непосредственно в машинный код. Мультиплатформенные возможности Kotlin теперь работают на всех поддерживаемых платформах, что позволяет, например, использовать одну и ту же бизнес-логику в приложениях для Android и iOS. Общую логику можно также использовать для серверов и мобильных и веб-клиентов. Кроме того, появилась возможность писать легко переносимые мультиплатформенные библиотеки, которые возьмут на себя большинство повседневных задач.    В ближайшее время мы проведем серию вебинаров по основным возможностям версии 1.3, записывайтесь здесь."
olegchir;Джеффри Рихтер, Павел Йосифович, Грег Янг и все-все-все. Хардкор и архитектура на DotNext 2018 Moscow;https://habr.com//ru/company/jugru/blog/428624/;"Совсем скоро, 22-23 ноября пройдёт следующий московский DotNext. Программа стала более определенной, поэтому хотелось бы поделиться несколькими наблюдениями про хардкорные и архитектурные доклады.  Во-первых, есть часть докладчиков «без категории». Это те люди, которые сами по себе могли бы заполнить отдельную конференцию. Их имена вы знаете: Джеффри Рихтер, Павел Йосифович и Грег Янг.  Обычно в статьях на Хабре рядом со спикером мы сразу приводим его фотографию. В случае с Джеффри и Павлом случай особый — вы лучше вспомните этих людей по обложкам книг:   "
phillennium;«Я просто энтузиаст проекта и пользователь языка Dart» — интервью с Ari Lerner, автором знаменитой ng-book;https://habr.com//ru/company/jugru/blog/429564/;"  Как написать девять книг по совершенно разным технологиям, включая Angular, Vue, React, React Native и другим? Что самое важное в обучении, что такое «hallway chat» и вообще, при чём тут Dart и Flutter?  Сегодня у нас в гостях автор множества книг и статей по программированию, включая ng-book — Ari Lerner. Какой будет дальнейшая книга, что автор думает о таком… противоречивом языке, как Dart, и почему на конференциях так важно общаться, спрашивают ребята из программного комитета конференции HolyJS (Дмитрий DmitryMakhnev Махнёв и Евгений bunopus Кот). "
sahsAGU;Что нового в Blazor 0.7.0;https://habr.com//ru/company/microsoft/blog/430166/;"Blazor 0.7.0 теперь доступен! В этом обновлении основное внимание уделяется ADRs (ancestor-descendent relationships). Кроме того, мы добавили некоторые улучшения в процесс отладки. Подробнее под катом!   Немного про Blazor: фреймворк для браузерных приложений, написанный на .NET и запускающийся с помощью WebAssembly. Он даёт вам все преимущества современных одностраничных приложений (SPA), позволяя при этом использовать .NET от начала и до конца, вплоть до общего кода на сервере и клиенте. [1]  "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №339 (12 — 18 ноября 2018);https://habr.com//ru/post/430326/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
divan0;Передача данных через анимированные QR на Gomobile и GopherJS;https://habr.com//ru/post/430688/;В данной статье я хочу рассказать о небольшом и забавном проекте выходного дня по передаче файлов через анимированные QR коды. Проект написан на Go, с использованием Gomobile и Gopherjs – последний для веб-приложения для автоматического замера скорости передачи данных. Если вам интересна идея передачи данных через визуальные коды, разработка веб-приложений не на JS или настоящая кроссплатформенность Go — велкам под кат. 
pronskiy;PHP-Дайджест № 144 (12 – 26 ноября 2018);https://habr.com//ru/post/431042/;" Свежая подборка со ссылками на новости и материалы. В выпуске: PHP 7.3.0RC6, PhpStorm 2018.3 и другие релизы, Symfony покидает PHP-FIG, свежие предложения и новости PHP Internals, порция полезных инструментов, видеозаписи с прошедших митапов и конференций и многое другое. Приятного чтения! "
phillennium;Итерации цикла: как прошла конференция HolyJS, и что насчёт следующей;https://habr.com//ru/company/jugru/blog/431322/;"  В спорте есть выражение «after the game is before the game»: с того момента, когда заканчивается матч, игрокам уже пора готовиться к следующему. Цикл подготовки конференций выглядит похоже. Только на этих выходных отгремела HolyJS 2018 Moscow — а мы уже анонсируем майскую HolyJS 2019 Piter (и сейчас, на старте продаж, билеты дешевле всего).   Из-за этого мы решили совместить обе темы: расскажем вам, как прошла московская HolyJS, и по этому рассказу вы сможете понять, хочется ли вам на петербургскую. В чём были отличия этой HolyJS от предыдущих? Как прошли доклады, и что было интересного, помимо них? Наконец, за что на JS-конференции могли торжественно вручать футболку «ДЖАВА»? Все ответы — под катом. "
3loyMark;Фреймворк: анализ DLT-систем;https://habr.com//ru/post/433246/;"Данная работа нацелена на определение, является ли анализируемый объект DLT-системой. Полученные результаты, хорошо подходят для сравнительного анализа разных проектов, начиная от структуры управления, заканчивая определением ссылок, на которые ссылаются транзакции.  Distributed ledger technology — это технология хранения информации, ключевыми особенностями которой является совместное использование и синхронизация цифровых данных согласно алгоритму консенсуса, географическое распределение равнозначных копий в разных точках по всему миру, отсутствие центрального администратора.  "
glebmachine;garbage.collect();https://habr.com//ru/company/oleg-bunin/blog/433318/;"Браузеру для исполнения JavaScript нужно немножко памяти, нужно же где-то хранить объекты, примитивы, функции, которые создаются на все действия пользователя. Поэтому браузер сначала выделяет нужный объем RAM, а когда объекты не используются — чистит её самостоятельно.  В теории звучит хорошо. На практике пользователь открывает 20 вкладок с YouTube, соцсетями, что-то читает, работает, браузер ест память, как Hummer H2 — бензин. Сборщик мусора, как этот монстр с шваброй, бегает по всей памяти и добавляет неразберихи, все тормозит и падает.    Чтобы таких ситуаций не происходило и производительность наших сайтов и приложений не страдала, фронтенд-разработчику стоит знать, как мусор влияет на приложения, как браузер его собирает и оптимизирует работу с памятью и как это все отличается от суровой реальности. Как раз об этом доклад Андрея Роенко (flapenguin) на Frontend Conf 2018.  Мы пользуемся сборщиком мусора (не дома — во фронтенд-разработке) каждый день, но особо не задумываемся, что он вообще есть, чего это нам стоит и какие у него есть возможности и ограничения.  Если бы в JavaScript действительно работала сборка мусора, большинство npm-модулей удаляли бы сами себя сразу после установки.  Но пока это не так, и мы поговорим про то, что есть — про сборку ненужных объектов.  "
5aava;Уязвимости EOS Blockchain на ZeroNights 2018;https://habr.com//ru/company/dsec/blog/433552/;"  В рамках данной статьи будут рассмотрены несколько реальных уязвимостей в EOS blockchain (одном из конкурентов Ethereum) и то, как они были встроены в конкурс New-Generation Secure Slot Machine на ZeroNights 2018. Если вам интересно познакомиться с тем, как обстоят дела с безопасностью в этой сети blockchain, то welcome под кат."
VanquisherWinbringer;Изучаю Rust: Как я UDP чат сделал c Azul;https://habr.com//ru/post/433624/;"  Я продолжаю изучать Rust. Я еще много не знаю, поэтому делаю много ошибок. В прошлый раз я попробовал сделать игру Змейка. Попробовал циклы, коллекции, работу с 3D Three.rs. Узнал про ggez и Amethyst. В этот раз я попробовал сделать клиент и сервер для чата. Для GUI использовал Azul. Так же смотрел Conrod, Yew и Orbtk. Попробовал многопоточность, каналы и работу с сетью. Учел ошибки прошлой статьи и постарался сделать эту более развернутой. За подробностями добро пожаловать под кат."
Jabher;Почему веб такой сложный?;https://habr.com//ru/post/433918/;"Обсуждение итогов года во фронтэнде внезапно стало предметом дискуссии. Добавлю свое мнение, и буду рад услышать мнение других. Как мне кажется, имеет смысл поговорить о том, что то, что творится в современном вебе, воспринимается снаружи и внутри совершенно иначе. Да и ""внутри"" имеет несколько уровней. Взгляд ""они опять усложняют верстку"" с одной стороны абсолютно корректен, а с другой — ошибочен и порочен, но и взгляд ""не мешайте нам строить абстракции"" тоже неэффективен. Когда кто-то жалуется на то, что современный веб стал слишком сложным, мне каждый раз хочется напомнить этому человеку, что этому современному вебу он доверяет свои деньги в интернет-банках и формах покупки, личную переписку в социальных сетях и веб-версиях мессенджеров, и личные файлы в облаках. И скорее всего он на самом деле хочет, чтобы процесс разработки этих систем был сложным, тяжелым, но надежным и не дающим сбоев.  источник картинки"
abagnale;Новости Qt, май 2018 — декабрь 2018;https://habr.com//ru/post/434338/;Очередной сборник новостей Qt, на этот раз за последние полгода с прошлой статьи. Релизы 5.11 и 5.12, реинкарнация PySide, внезапные похороны Qbs, выход Qt Design Studio и значительное улучшение условий лицензий для стартапов. 
m1rko;Rust в 2019 году и далее: ограничения на рост;https://habr.com//ru/post/434684/;"Как и просили, вот мои предложения по развитию Rust в 2019 году и далее.  Должен отметить, что говорю только за себя, а я даже не очень активный участник проекта. Более того, эти предложения в значительной степени относятся ко многим проектам. Rust — частный случай, но именно он сейчас наводит на некоторые размышления.  Ещё должен отметить, что я в целом доволен развитием Rust, и это предложение делается только ради сохранения дальнейшего благополучия, чтобы избежать некоторых проблем, которые я сейчас наблюдаю со стороны.  TL;DR: Важно осознать проблему и запланировать явные механизмы по ограничению роста двух вещей:   Обязательные общие технические артефакты, особенно само определение языка. Нагрузка на людей, участвующих в обсуждении этих артефактов. "
zerocost;Тесты на C++ без макросов и динамической памяти;https://habr.com//ru/post/434906/;"Многие популярные библиотеки для тестирования, например Google Test, Catch2, Boost.Test тяжело завязаны на использование макросов, так что в качестве примера тестов на этих библиотеках вы обычно увидите картину вроде такой: namespace {  // Tests the default c'tor. TEST(MyString, DefaultConstructor) {   const MyString s;   EXPECT_STREQ(nullptr, s.c_string());   EXPECT_EQ(0u, s.Length()); }  const char kHelloString[] = ""Hello, world!"";  // Tests the c'tor that accepts a C string. TEST(MyString, ConstructorFromCString) {   const MyString s(kHelloString);   EXPECT_EQ(0, strcmp(s.c_string(), kHelloString));   EXPECT_EQ(sizeof(kHelloString)/sizeof(kHelloString[0]) - 1,             s.Length()); }  // Tests the copy c'tor. TEST(MyString, CopyConstructor) {   const MyString s1(kHelloString);   const MyString s2 = s1;   EXPECT_EQ(0, strcmp(s2.c_string(), kHelloString)); } }  // namespace К макросам в C++ отношение настороженное, почему же они так процветают в библиотеках для создания тестов? "
ozkriff;Rust новости #4 (декабрь 2018);https://habr.com//ru/post/435614/;"Поскольку праздники кончились, предлагаю вашему вниманию субъективную подборку ржавых новостей за декабрь. В этой подборке: безумие с растом, страшен ли раст, волна пророчеств, Rust 2018, Rust Analyzer.  Rust 1.31 & Rust 2018 Самое важное событие декабря — выпуск Rust 1.31 и Rust 2018, конечно. Туда очень много всего вошло: редакция 2018, нелексические времена жизни, изменения системы модулей, дополнительные правила вывода времен жизни, const fn, новые инструменты, инструментальные проверки качества кода, документация, новый веб-сайт, улучшения в cargo.Изменений так много, что обзор всех не получилось запихнуть в один пост, так что через несколько дней были опубликованы вспомогательные заметки:  Procedural Macros in Rust 2018 (обсуждение) — о процедурных макросах; Tools in the 2018 edition (обсуждение) — о расширении инструментария;  Также, имеет смысл полистать мозиловский хорошо структурированный обзор/ликбез 2018й редакции языка: Rust 2018 is here… but what is it? (перевод, обсуждение)."
arttom;I am a useless idiot, so I want to quit my job: 10 questions to a software developer, a pilot episode;https://habr.com//ru/post/436012/;"  Hi there, Habr!  Remember the story of Steve Jobs and Dennis Ritchie? Without any intention to rekindle the debates or moralize on the subject, let’s face the truth: thousands of stellar techies live in the shadow, while their own stories are hidden in a dusty cupboard.  We, the Habr editorial team, are keen to tackle this injustice. From now on, we will regularly interview people who keep a low profile in media and social networks. So if you have anything to tell about yourself, get ready.  To give you an idea of what this will look like, we will lead the way. Click below to see 10 general questions we will ask every guest. For our pilot episode, the first guest to answer the questions was fillpackart. (This month I’ve had several quite good interview sessions with him, see articles one, two, three). Please read them, and if you make up your mind on telling your own story in a similar way, just send me or baragol a message."
artch;Под капотом Screeps — виртуализация в MMO-песочнице для программистов;https://habr.com//ru/post/437836/;"В этой статье я расскажу про одну малоизвестную технологию, которая нашла ключевое применение в нашей онлайн-игре для программистов. Чтобы долго не тянуть резину, сразу спойлер: кажется, что такого шаманства в нативном коде Node.js, к которому мы пришли после нескольких лет разработки, до нас еще никто не делал. Движок изолированных виртуальных машин (опенсорсный), который работает под капотом проекта, был написан специально для его нужд, и на данный момент используется в продакшене нами и еще одним стартапом. А возможности изоляции, которые он дает, не имеют аналогов и заслуживают, чтобы о них рассказали. Но давайте обо всем по порядку. Предыстория Вы любите программирование? Не тот рутинный энтерпрайз-кодинг, которым многие из нас вынуждены заниматься 40 часов в неделю, борясь с прокрастинацией, вливая в себя литры кофе и профессионально выгорая; а программирование — ни с чем не сравнимый волшебный процесс трансформирования мыслей в работающую программу, получение наслаждения от того, что только что написанный тобой код воплощается на экране и начинает жить той жизнью, которой велит ему создатель. В такие моменты слово ""Создатель"" хочется написать с большой буквы — настолько чувство, возникающее в процессе, иногда бывает близко к благоговению.  Жаль лишь, что совсем немного реальных проектов, связанных с каждодневным заработком, могут предложить своим разработчикам такие чувства. Чаще всего для того, чтобы не терять страсть к программированию, энтузиастам приходится затевать интрижку на стороне: программистское хобби, пет-проект, модный open-source, просто скрипт на питоне по автоматизации своего умного дома… или поведения персонажа в какой-нибудь популярной онлайн-игре."
kate_shlyakhova;Конференция DUMP-2019 пройдёт 19 апреля. Приглашаем выступить в секциях Frontend, Backend и Science;https://habr.com//ru/company/it_people/blog/438458/;"Всем привет!  Девятая конференция DUMP пройдёт 19 апреля в Екатеринбурге. Доклады будут идти в 8 потоков: Backend, Frontend, Mobile, Тестирование и QA, Devops, Design, Science и Management. Плюс мастер-классы и афтепати.   В этом посте — темы, которые мы хотим обсудить в секциях Frontend, Backend, Science и инструкция, как стать докладчиком. А еще мы придумали кое-что интересное для спикеров, которые хотят не просто выступить, но еще дополнительно пообщаться с другими докладчиками и посмотреть Екатеринбург. Под катом все подробности.   Маленький ролик о том, как прошел прошлогодний DUMP"
dimansny;Почему мы выбрали Electron;https://habr.com//ru/post/439946/;"Предыстория Мы небольшая команда разработчиков, занимаемся созданием нового инструмента для работы с API Testmace. По факту это продвинутый rest клиент с возможностью создавать автоматизированные тесты API с помощью графического интерфейса, оснащенный такими приятными штуками как продвинутый механизм переменных, автокомплит во всех полях ввода и тотальная подсветка синтаксиса.  Хочу вам рассказать о том, как мы пришли к Electron как технологии для написания нашего приложения."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №353 (17 — 24 февраля 2019);https://habr.com//ru/post/441570/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
youROCK;NoVerify: линтер для PHP от Команды ВКонтакте теперь в открытом доступе;https://habr.com//ru/company/vk/blog/442284/;"  Расскажу, как нам удалось написать линтер, который получился достаточно быстрым, чтобы проверять изменения во время каждого git push и делать это за 5−10 секунд при кодовой базе в 5 миллионов строк на PHP. Мы назвали его NoVerify.  NoVerify поддерживает базовые вещи вроде перехода к определению и поиску использований и умеет работать в режиме Language Server. В первую очередь наш инструмент ориентирован на поиск потенциальных ошибок, но умеет проверять и стилистику. Сегодня его исходные коды появились в open-source на GitHub. Ищите ссылку в конце статьи."
1div0;Обзор JavaScript-сканнеров штрихкодов;https://habr.com//ru/post/442770/;"Недавно появилась идея сэкономить на ТСД на складе и попробовать использовать вместо них обычные дешёвые мобильники (даже без пылезащиты). Интерфейс планирую реализовать в виде веб-приложения (обычные веб-странички, HTML + CSS + JS).   Для того, чтобы всё получилось, необходимо научить веб-странички сканировать штрихкода через камеру телефона. Получить данные с камеры достаточно просто. Основная работа состоит в обработке кадра. Под катом обзор существующих готовых решений и много картинок.  "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №358 (25 — 31 марта 2019);https://habr.com//ru/post/446202/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
merdenchik;Облачное будущее;https://habr.com//ru/post/446754/;"Мы сейчас стоим на пороге новой эры облачных вычислений Не совсем понимаю, почему мы называем удалённые серверные вычисления — облачными. Конечно, сейчас стоит вспомнить ruvds, которые запустили сервер на воздушном шаре и Microsoft с дата-центром под водой, но, на деле, мы живём ""рядом"" с серверами, которые уже скоро станут нашим основным способом вычисления. Что же такое облачные вычисления? "
pronskiy;PHP-Дайджест № 153 (25 марта – 8 апреля 2019);https://habr.com//ru/post/447130/;" Свежая подборка со ссылками на новости и материалы. В выпуске: принят PSR-14 Event Dispatcher, JIT в PHP 8, тройка RFC-предложений из PHP Internals, порция полезных инструментов, и многое другое.  Приятного чтения!"
m1rko;V8: один год со Spectre;https://habr.com//ru/post/449546/;"3 января 2018 года Google Project Zero и другие раскрыли первые три из нового класса уязвимостей, которые затрагивают процессоры со спекулятивным выполнением. Их назвали Spectre (1 и 2) и Meltdown. Используя механизмы спекулятивного выполнения CPU, злоумышленник может временно обойти как явные, так и неявные программные проверки безопасности, которые не позволяют программам читать недоступные данные в памяти. В то время как спекулятивное выполнение разработано как деталь микроархитектуры, невидимая на архитектурном уровне, тщательно разработанные программы могли считывать недоступную информацию в спекулятивном блоке и раскрывать её через побочные каналы, такие как время выполнения фрагмента программы.  Когда было показано, что атаки Spectre возможны средствами JavaScript, команда V8 приняла участие в решении проблемы. Мы сформировали группу реагирования на чрезвычайные ситуации и тесно сотрудничали с другими командами в Google, нашими партнёрами из числа разработчиков других браузеров и партнёрами по оборудованию. Совместно с ними мы проактивно вели как наступательные исследования (конструирование атакующих модулей для доказательства концепции), так и оборонительные (смягчение потенциальных атак)."
tormozedison;Соскучились по КПК?;https://habr.com//ru/post/451310/;"Сделайте его сами!    Устройство выполнено на микроконтроллере STM32F4 и работает под управлением специально разработанной для него ОС. Приложения для неё можно писать на скриптовом языке и помещать на карту памяти. В режиме ожидания зарядки хватает примерно на пять дней, при включённом дисплее с яркостью подсветки в 60% — более чем на шесть часов.  В ПО применены сторонние наработки под лицензией MIT, готовый результат выложен под ней же. Если вы всё ещё не уверены, что вам нужен такой гаджет, поменяйте своё мнение на противоположное, воспользовавшись симулятором (требует WebAssembly, у переводчика заработало):    Да, а ещё у него нет даже намёка на безрамочность."
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #297 (6 — 12 мая);https://habr.com//ru/company/productivity_inside/blog/451432/;После длинных выходных возвращаемся с новым дайджестом. В нем новинки I/O и Build, PWA, Flutter и React Native, ограничения и переработки, UX и анимации.  
phillennium;«То, что мы обсуждаем в России, актуально и на Западе»: интервью с Денисом Неклюдовым;https://habr.com//ru/company/jugru/blog/451614/;"  Денис Неклюдов интересен Android-разработчикам по целому ряду причин. Он занимается «Android Dev Подкастом», выступает на конференциях, посещает саммиты GDE — в общем, вовлечён в жизнь сообщества самыми разными способами. А поскольку сейчас живёт в США и работает в Lyft, может сравнить западную ситуацию с российской.  И в преддверии Mobius 2019 Piter, где он расскажет об «архитектуре с прицелом на масштабирование», мы расспросили его обо всём этом понемногу. Чем российский подкаст может быть интересен западным слушателям? Каково работать там, где счёт мобильных разработчиков идёт на сотни? Что не так с решениями от Google для Android-разработчиков? А что не так с использованием смартфонов в целом?"
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №365 (13 — 19 мая 2019);https://habr.com//ru/post/452556/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
olegbunin;Открытая трансляция главного зала РИТ++ 2019;https://habr.com//ru/company/oleg-bunin/blog/453350/;"РИТ++ — это профессиональный фестиваль для тех, кто делает Интернет. Прямо как на музыкальном фестивале у нас много потоков, только вместо музыкальных жанров — IT-тематики. Мы, как организаторы, стараемся угадать тренды и найти новое звучание. В этом году это «качество» и конференция QualityConf. Не обходим стороной любимые мотивы в новых интерпретациях: распил монолита и микросервисы, Kubernetes и CI/CD, CSS и JS, рефакторинг и performance. Конечно, представляем новые и хитовые темы. Всё как у людей, включая горы сложного оборудования, мерч и выпивку!  Последние два — только для гостей фестиваля. А вот оборудование пойдет в дело для трансляции. И по хорошей традиции Главный зал — то есть как раз самые востребованных «исполнителей» — мы бесплатно транслируем на нашем youtube-канале.    Подключайтесь к трансляции 27 мая в 9:30, увидите и услышите много айтишно интересного, расписание под катом."
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #299 (20 — 26 мая);https://habr.com//ru/company/productivity_inside/blog/453524/;Этот выпуск нашего дайджеста затрагивает вопросы деления пиццы, работы CarPlay, обсуждает Google I/O, развитие приложений в 2019, консоль-шарманку и ошибки пуш-уведомлений.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №367 (27 мая — 2 июня 2019);https://habr.com//ru/post/454540/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
RubaXa;Производительность фронтенда: разбираем важные метрики;https://habr.com//ru/company/mailru/blog/454920/;"Обычно под производительностью понимают количество операций за определенный интервал времени и чем их больше, тем лучше. Но такое определение, да и подход в целом, мало применим к фронтенду, потому что у каждого пользователя будет свой «фронтенд». Именно об этом я и хочу поговорить, что же происходит «там», у пользователя, на другой стороне, в реальности, а не на вашем топовом MacBook.  Кроме это, я постараюсь вскользь рассмотреть общие правила оптимизации кода и некоторые ошибки на которые стоит обратить внимание. Ещё расскажу про инструмент, который помогает не только в профилировании, но и «из коробки» собирает кучу базовых метрик о производительности вашего приложения (и надеюсь, вы дочитаете этот пост до конца)."
ru_vds;Готовимся к 2020 году: 8 трендов клиентской JavaScript-разработки, о которых нужно знать;https://habr.com//ru/company/ruvds/blog/455144/;"Автор материала, перевод которого мы сегодня публикуем, говорит, что хочет поделиться с читателями прогнозом, который касается развития веб-технологий на ближайшие годы. В частности, здесь речь пойдёт о том, что, по мнению автора, фронтенд-разработчикам, вероятно, стоить начать изучать уже сегодня.  Всё, что связано с JavaScript, очень быстро развивается. Это касается и того, что можно отнести к сфере веб-разработки. В наши дни те, в основе чьих проектов не лежат самые современные технологии, начинают особенно сильно ощущать разрыв между тем, чем они пользуются, и тем новым, что появляется едва ли не ежедневно. К таким технологиям можно отнести Webpack, React, Jest, Vue, Angular в их современном состоянии. В то время как «население» мира фронтенд-разработки, включающее в себя технических специалистов и программистов, постоянно растёт, этот мир стремится к стандартизации. Появление новых технологий и инструментов уже меняет ситуацию.    Можно с изрядной долей уверенности говорить о том, что общим трендом развития фронтенд-технологий будет стандартизация разработки пользовательских интерфейсов. В частности, речь идёт о композиции, основанной на компонентах, о стремлении к модульности систем. Эта тенденция воздействует практически на всё — от стилизации до тестирования и даже до управления состоянием приложений. В этот тренд можно включить технологии, построенные вокруг веб-компонентов, ES-модулей, сюда же попадают соответствующие инструменты и многое другое."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №368 (3 — 9 июня 2019);https://habr.com//ru/post/455453/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №377 (19 — 25 августа 2019);https://habr.com//ru/post/464967/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
vesennjaja;ABBYY Mobile Web Capture: Качественные фотографии документов прямо в браузере смартфона;https://habr.com//ru/company/abbyy/blog/466019/;"  Наши клиенты часто используют мобильный телефон, чтобы сфотографировать документ и отправить его в каршеринговую компанию, визовый центр, оператору связи, финансовым и другим компаниям. Фото документа достаточно, чтобы получить машину в аренду, активировать SIM-карту, оформить заявку на кредит. Но иногда получить со смартфона изображение в хорошем качестве бывает непросто. Тем не менее, нам удалось решить эту задачу.  Сейчас существует немало приложений на iOS и Android для «мобильного сканирования» документов. Но сколько у вас на телефоне мобильных приложений? Зачем тратить время и устанавливать еще новые, если этого можно и не делать?   Гораздо проще сфотографировать документ прямо в мобильном браузере, который уже есть на любом смартфоне. Поэтому мы и создали ABBYY Mobile Web Capture. Это JavaScript API, то есть SDK, который мы предлагаем нашим клиентам встраивать в свои web-странички и web-based приложения. Он позволяет захватить хорошую картинку прямо в web-браузере на самых популярных мобильных ОС и отправить ее для дальнейшей обработки на сервер или в облако. О том, как эта технология работает, мы сегодня и расскажем."
SLY_G;Питон, пожирающий мир: как побочный проект одного разработчика стал популярнейшим языком программирования;https://habr.com//ru/post/466807/;"Разочаровавшись в недостатках существовавших языков программирования, Гвидо Ван Россум создал язык Python. Сейчас этот язык используют миллионы людей, и Ник Хит беседует с ван Россумом о прошлом и будущем языка.  Гвидо Ван Россум в штаб-квартире Dropbox в 2014 году  В конце 1994 года группа избранных программистов с разных концов США собралась для обсуждения своего нового секретного оружия.  Барри Уорсо был одним из двух десятков разработчиков, собравшихся на самый первый воркшоп, посвящённый новому языку программирования Python, и вспоминает, насколько явным было радостное возбуждение его первых пользователей.  «Особенно мне запомнился один человек, сказавший: ’Не говорите никому, что я здесь, потому что то, что мы используем питон, является конкурентным преимуществом’. Это было их секретное оружие»."
Source;Пять перспективных языков программирования со светлым будущим (3 года спустя);https://habr.com//ru/post/467207/;" В 2016-м году я опубликовал перевод статьи про 5 перспективных языков программирования, в которой прогнозировался их рост в ближайшие 2-3 года. Зачастую прогнозы так и остаются прогнозами, без последующего анализа. Но я решил, что это непорядок. И посколько 3 года уже пролетели, пора подвести промежуточные итоги и посмотреть, что произошло с этими языками за это время.  Однако, прежде чем мы перейдём к пятёрке наших героев, хочется уделить немного внимания предсказанному в той же статье переходу Swift и Go из второго эшелона в первый.  про эшелоныВ исходной статье языки программирования условно делятся на 3 эшелона по популярности. Первый эшелон включает мейнстрим-языки, такие как Java, JavaScript, Python, Ruby, C# и т.д. Языки второго эшелона пытаются пробиться в мейнстрим, но ещё не добились этого. Они доказали свою состоятельность путем создания сильных сообществ, но они до сих пор не используются большинством консервативных IT-компаний. Большинство языков в первом эшелоне прочно укоренились на своих позициях. Поэтому выпадение языка с лидирующих позиций занимает ощутимое время, а для языка второго эшелона очень трудно пробиться в первый. К третьему эшелону относятся непопулярные языки, а также относительно новые перспективные языки (о которых пойдёт речь), которые только начинают свой путь наверх. Некоторые языки пребывают в третьем эшелоне на протяжении многих лет, не получая популярности, в то время как другие врываются на сцену всего за пару лет."
DmitrySpb79;Хабрастатистика: исследуем наиболее и наименее посещаемые разделы сайта;https://habr.com//ru/post/467429/;"Привет, Хабр.  В предыдущей части была проанализирована посещаемость Хабра по основным параметрам — количеству статей, их просмотрам и рейтингам. Однако вопрос популярности разделов сайта остался не рассмотренным. Стало интересно рассмотреть это более подробно, и найти самые популярные и самые непопулярные хабы. Наконец, я рассмотрю «geektimes-эффект» более подробно, и в завершении читатели получат новую подборку лучших статей по новым рейтингам.    Кому интересно что получилось, продолжение под катом."
bulgakova92;Блоги по frontend-разработке, которые стоят того, чтобы их читали;https://habr.com//ru/post/468175/;"Каждый называющий себя веб-разработчиком должен быть в курсе трендов и актуальных событий которые происходят в отрасли. На этой основе ловите подборку интересных блогов по frontend разработк. Стоит отметить, что бОльшая часть подборки — блоги на английском языке.  Англоязычные блоги Новостные ленты и тематические аккаунты   Smashing Magazine — онлайн-журнал для профессионалов веб-дизайна и разработки. CSS-Tricks — официальный аккаунт ресурса CSS-Tricks.com, объединяющего веб-дизайнеров. CSS {IRL} — советы, лайфхаки, хитрости и ссылки на тему CSS. Web Platform News — ежедневные новости веб-разработки с одноименного ресурса. A Book Apart — издательство книг на темы адаптивного веб-дизайна, Git и JavaScript, контент-стратегии, принципов дизайна, публичных выступлений и многого другого.  "
1cloud;Зачем Mozilla, Coil и Creative Commons выделяют для open source проектов 100 млн долларов;https://habr.com//ru/company/1cloud/blog/469375/;Расскажем, как компании планируют разделить сумму гранта, и поговорим о других ситуациях, когда open source разработчики получили существенную финансовую и материальную поддержку.  
1cloud;Экономим время при работе с командной строкой;https://habr.com//ru/company/1cloud/blog/469689/;Инструменты для автоматизации работы с операторами и повышения читабельности кода.  
dbelob;Митя Александров и Дмитрий Константинов на встрече jug.msk.ru;https://habr.com//ru/company/jugru/blog/473332/;23 октября 2019 года, за пару дней до конференции Joker 2019, состоялась встреча московского сообщества Java-разработчиков jug.msk.ru. С докладами выступили Митя Александров (про MicroProfile) и Дмитрий Константинов (про Cassandra).  
forkyforky;Создание плагина для Clang Static Analyzer для поиска целочисленных переполнений;https://habr.com//ru/company/dsec/blog/473412/; Автор статьи: 0x64rem Вступление Полтора года назад у меня появилась идея реализовать свой фазер в рамках дипломной работы в университете. Я начала изучать материалы про графы потока управления, графы потока данных, символьное исполнение и т.д. Далее шёл поиск тулз, проба разных библиотек (Angr, Triton, Pin, Z3). Ничего конкретного в итоге не получилось, пока этим летом я не отправилась на летнюю программу Summer of Hack 2019 от Digital Security, где в качестве темы проекта мне было предложено расширение возможностей Clang Static Analyzer. Мне показалось, что эта тема поможет мне расставить по полкам мои теоретические знания, приступить к реализации чего-то существенного и получить рекомендации от опытных менторов. Далее я расскажу вам, как проходил процесс написания плагина и опишу ход своих мыслей в течение месяца стажировки.
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #322 (11 — 17 ноября);https://habr.com//ru/company/productivity_inside/blog/476174/;В этом дайджесте материалы о пользовательских интерфейсах и UX, Droidcon London и XCFrameworks, реверсинге мобильной 1С, проблемах монетизации и многих других вопросах разработки, маркетинга и монетизации приложений.   
ReDev1L;Как спихнуть на соседа счёт за пользование услугами Yandex Maps API или для чего IT гиганту нужен контроль качества;https://habr.com//ru/post/476754/;С 10 июня 2019 (а технически с ноября 2019), Яндекс прекратил поддержку анонимного использования сервисов JS API & HTTP Geocoder — тарифицируемые запросы к API (поиск, геокодирование, панорамы и т.д.) перестали работать. Но адекватного биллинга и трекинга запросов Яндекс — не предоставил. Если интересно как спихнуть счёт за геокодирование на гигантов рунета (перечисленных партнёров на заглавной странице сервиса), а так же — как трекинг запросов делается «по уму» — прошу под кат.
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №390 (18 — 24 ноября 2019);https://habr.com//ru/post/477266/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
AcckiyGerman;О структуре параллельных вычислений или доводы против оператора «Go»;https://habr.com//ru/post/479186/;" Каждый язык, поддерживающий параллельные (конкурентные, асинхронные) вычисления, нуждается в способе запуска кода параллельно. Вот примеры из разных API: go myfunc();                                // Golang  pthread_create(&thread_id, NULL, &myfunc);  /* C with POSIX threads */  spawn(modulename, myfuncname, [])           % Erlang  threading.Thread(target=myfunc).start()     # Python with threads  asyncio.create_task(myfunc())               # Python with asyncio Есть много вариантов нотации и терминологии, но одна семантика — запустить myfunc параллельно основной программе и продолжить родительский поток выполнения (англ. ""Control Flow"")"
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №392 (2 — 8 декабря 2019);https://habr.com//ru/post/479262/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №393 (9 — 15 декабря 2019);https://habr.com//ru/post/480414/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
byko3y;О проблемах транслятора Python и переосмысление языка;https://habr.com//ru/post/481782/;"— Сколько нужно архитекторов, чтобы реализовать язык программирования? — Сто. Один будет писать реализацию, а 99 — говорить, что могут сделать лучше. В этой статье я хочу затронуть не столько сам язык, сколько детали реализации CPython и его стандартной библиотеки, которые гарантируют, что у вас не будет никаких простых способов сделать приложение на питоне ни многопоточным, ни быстрым, ни легко поддерживаемым, и почему было создано столько альтернативных реализаций (PyPy, Cython, Jython, IronPython, Python for .NET, Parakeet, Nuitka, Stackless, Unladen Swallow), половина из которых уже умерла; и мало кто понял, почему у альтернатив не было шансов победить в борьбе за выживание против других языков. Да, есть GDScript, который призван решить проблемы с производительностью, есть Nim, который призван решить вообще все проблемы, не обязывая при этом пользователя чрезмерно явно объявлять типы. Однако, учитывая огромную инертность индустрии, я осознаю, что в ближайшие 10 лет новые языки точно не займут значимой ниши. Однако, я верю в то, что питон возможно сделать эффективным, изменив стиль написания кода, по большей части сохранив оригинальный синтаксис, и полностью сохраняя возможность взаимодействия кода нового и старого стиля. Я буду концентрироваться на проблемах CPython, а не ближайшего его конкурента, PyPy, поскольку PyPy на самом деле прыгает вокруг всё тех же проблем CPython. "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №395 (23 — 29 декабря 2019);https://habr.com//ru/post/482440/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
zuzzas;Взгляд на технологии последнего десятилетия;https://habr.com//ru/company/flant/blog/482664/;"Прим. перев.: Эта статья, ставшая хитом на Medium, — обзор ключевых (за 2010-2019 годы) изменений в мире языков программирования и связанной с ними экосистемы технологий (особое внимание уделяется Docker и Kubernetes). Её оригинальным автором является Cindy Sridharan, которая специализируется на инструментах для разработчиков и распределённых системах — в частности, она написала книгу «Distributed Systems Observability» — и достаточно популярна в интернет-пространстве среди IT-специалистов, особенно интересующихся темой cloud native.    2019-й подошел к концу, поэтому я хотела бы поделиться своими мыслями о некоторых наиболее важных технологических достижениях и инновациях прошедшего десятилетия. Кроме того, я попытаюсь немного заглянуть в будущее и обозначить основные проблемы и возможности предстоящего десятилетия.  Хочу сразу оговориться, что в этой статье я не охватываю изменения в таких областях, как наука о данных (data science), искусственный интеллект, frontend engineering и т.п., поскольку лично у меня отсутствует достаточный опыт в них."
ru_vds;Главные причины медленной работы Angular-приложений;https://habr.com//ru/company/ruvds/blog/485642/;"Angular — это быстрый фреймворк. Он даёт разработчикам обширные возможности по улучшению производительности за счёт тонких настроек. Правда, программистам практически никогда не требуется делать что-то особенное для того, чтобы создавать чрезвычайно производительный код, работая над обычными приложениями.  Но оказывается, что в некоторых особенных случаях проблемы с производительностью Angular-приложений всё же могут возникнуть. Во-первых — при разработке приложений, которые должны быть чрезвычайно производительными. Во-вторых — если это приложения, работающие с большими объёмами сложного контента. В-третьих — в приложениях, содержимое которых очень часто обновляется.    По поводу улучшения производительности Angular-приложений написано уже очень много всего. В бесчисленных публикациях даётся масса советов. И хотя большинство из этих советов могут принести пользу тому, кто их применит, автор статьи, перевод которой мы сегодня публикуем, говорит, что те проблемы, с которыми он столкнулся, обсуждаются не особенно часто.  Этот материал посвящён разбору основных причин того, что Angular-приложения становятся медленными по мере роста их масштабов. При этом приведённые здесь советы можно будет применить при разработке крупных проектов на любом фреймворке, а не только на Angular."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №400 (27 января — 2 февраля 2020);https://habr.com//ru/post/486674/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
Cloud4Y;Kaboom: необычный сапёр;https://habr.com//ru/company/cloud4y/blog/487052/;  В детстве я три раза в неделю по часу-полтора сидел на работе у отца. Меня пускали за компьютер, где из развлечений был лишь сапёр и Paint. Рисовать мне быстро надоедало, зато желание открыть всё поле и не взорваться мотивировало искать новые и новые способы прохождения этой игры. Спустя много лет я случайно наткнулся на интересную статью про клона сапёра, и не мог пройти мимо. Предлагаю и вам ознакомиться с ней. Это история о разработке Kaboom, клона легендарной игры Сапёр с собственной изюминкой.
saionaro;Разбираемся с управлением памятью в современных языках программирования;https://habr.com//ru/post/489360/;"Привет, Хабр! Представляю вашему вниманию перевод статьи «Demystifying memory management in modern programming languages» за авторством Deepu K Sasidharan.  В данной серии статей мне бы хотелось развеять завесу мистики над управлением памятью в программном обеспечении (далее по тексту — ПО) и подробно рассмотреть возможности, предоставляемые современными языками программирования. Надеюсь, что мои статьи помогут читателю заглянуть под капот этих языков и узнать для себя нечто новое.  Углублённое изучение концептов управления памятью позволяет писать более эффективное ПО, потому как стиль и практики кодирования оказывают большое влияние на принципы выделения памяти для нужд программы. "
Siemargl;И мышонок, и лягушка. Универсальный Компилятор;https://habr.com//ru/post/489708/;" В серии про надежное программирование [1], [2] остался незаслуженно забытым Swift. Я, честно говоря, просто не считал его кроссплатформенным, а работающим исключительно для macOS/iOS. Тут случайно выяснилось, что Swift также поддерживается такой средой разработки, как RemObjects Elements.   Оказалось, у неё Универсальный Компилятор. Умеет компилировать программы на C#, Go, Java, Oxygene Object Pascal, Swift для: Android, Cocoa (MacOS, iOS, tvOS), JVM, Linux (x64, armv6, aarch64), .NET/.NET Core/Mono, Native Windows(x86/x64), WebAssembly.   Причем делает это практически в любых комбинациях язык → целевая система! Например, можно написать программу на Java, которая будет использовать WPF для целевой платформы .NET, и это все есть в примерах, идущих в поставке.  Итак, представляю мини-заметку про RemObjects Elements, а заодно про надежность двух поддерживаемых в ней языков — Swift и Oxygene.  Рисунок с сайта radionetplus  "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №404 (24 февраля — 1 марта 2020);https://habr.com//ru/post/490616/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
Sildream;Новости из мира OpenStreetMap № 502 (25.02.2020-02.03.2020);https://habr.com//ru/post/492444/;  Сообщество OSM во Франции напоминает — «Атрибуция — это не опция!» 1 | Изображение Кристиана Квеста | map data OpenStreetMap contributors  Картографирование  Маркус Пелосо разработал схему тегирования, с помощью которой можно будет отмечать места, где люди обмениваются друг с другом излишками продуктов, а потому просит подписчиков списка рассылки «Тегирование» высказать свое мнение. Его предложение аналогично уже существующим тегам give_box (место обмена вещами) и public_bookcase (место обмена книгами), но только для продуктов питания. 
Leono;Картинки как коробки — что внутри? Доклад в Яндексе;https://habr.com//ru/company/yandex/blog/493616/;"Картинки и видео — это «чёрные ящики», внутри которых лежит много интересного и непонятного. Но можно заглянуть внутрь некоторых форматов, всё там поменять и посмотреть, что из этого получится.   Полина Гуртовая из компании «Злые марсиане» выступила на нашей конференции «Я  Фронтенд» в феврале. При помощи эксперимента Полина разобралась, как превращать простые картинки в «эффективные изображения» с метриками. Инструменты, которые могут делать это за нас, Полина рассмотрела ближе к концу доклада. Получился большой экскурс во внутренности и принципы работы разных форматов: от PNG и JPEG до AV1 и экзотики.    — Всем привет. Меня зовут Полина, я фронт в компании «Злые марсиане». "
olegchir;Java-дайджест за 13 апреля;https://habr.com//ru/company/jugru/blog/497016/;   Системе контроля версий Git исполнилось 15 лет.  Testcontainers исполнилось целых пять лет! Testcontainers — это Java-библиотека, позволяющая делать легкие одноразовые экземпляры популярных баз данных, веб-браузеров Selenium, или чего угодно ещё, что можно запустить в Docker-контейнере.  Вышел долгожданный Spring Graal Native 0.6.0. Вот здесь на GitHub есть огромное количество примеров использования вместе с разными технологиями, например, Kotlin и Netty.  
phillennium;Мир, код, май: проводим праздники с полезными докладами;https://habr.com//ru/company/jugru/blog/499714/; Автор оригинала diliago До этой недели слова про «саморазвитие на самоизоляции» были не очень актуальны для айтишников: они продолжали активно работать, у них не появилась прорва времени на книги или онлайн-курсы. Но на майских праздниках время будет, и при этом по-прежнему надо оставаться дома. Как провести их, чтобы не было мучительно больно за бесцельно прожитые дни? И как при этом освежить голову, переключившись с текущих рабочих задач на что-то другое? Мы считаем это подходящим моментом, чтобы получить знания не по своему основному профилю, а по смежным темам. Посмотреть по сторонам всегда интересно, но обычно до этого не доходят руки из-за горящих задач, а вот сейчас возможность есть. Поэтому мы взяли видеозаписи наших конференций и составили плейлисты по необычному принципу: решили показать различным специалистам доклады не со знакомого им мероприятия по их направлению, а с других. Что джавистам было бы особенно близко на конференции по тестированию? А что фронтендеры могут узнать от дотнетчиков?
Gim6626;FOSS News №14 – обзор новостей свободного и открытого ПО за 27 апреля – 3 мая 2020 года;https://habr.com//ru/post/500248/;"  Всем привет!  Продолжаем обзоры новостей свободного и открытого ПО и железа (и немного коронавируса). Всё самое главное про пингвинов и не только, в России и мире. Участие Open Source сообщества в борьбе с COVID-19, выход Canonical на самоокупаемость, холивар (или нечто большее) о годности GNU/Linux для десктопов, очередные нападки Роскомнадзора на мессенджеры, экскурс в историю консольных команд и сравнение с сегодняшним днём, выпуск флагманских ноутбуков Lenovo с предустановленной GNU/Linux и многое другое."
jamak;Deno v1.0: Безопасная среда выполнения для JavaScript и TypeScript. Обзор возможностей;https://habr.com//ru/post/501480/;  Вступление Установка Как это выглядит внутри Функциональность WASM, RUST, Плагины Debugging, IDE Тестирование Compiler API CI Разное  Вступление Если вы уже оказались за чтением этой статьи, то наверняка уже слышали про выступление Ryan Dahl, создателя NodeJS, на JSConf, где он выступил с докладом и рассказал о ключевых ошибках, которые были сделаны при проектировании NodeJS. В этом же докладе он обьявил о новом проекте: Deno, в котором будут учтены ошибки предыдущего проектирования. Вдохновившись этим анонсом, я внимательно стал следить за проектом и пробовать реализовывать на нем различные проекты.
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #346 (25 — 31 мая);https://habr.com//ru/company/productivity_inside/blog/504668/;В нашем новом посткосмическом дайджесте исследование багов iOS, старые иконки для iPhone через PWA, бета и авто тестирование, микровзаимодействия, доходы Match-3, простота Flutter и много других интересных материалов.  
feverqwe;HLS в MP4 с помощью ffmpeg в браузере;https://habr.com//ru/post/504722/;"Привет! Уже более двух месяцев я в свободное время пилю веб приложение для преобразования HLS и DASH в MP4, используя emscripten и ffmpeg, от чего хочется поделиться тем, как у меня это получилось сделать.  В этой статье я не буду приводить исходный код правок и патчей ffmpeg, т.к. большая их часть была сделана на коленке, а я не очень хорош в C. Но сейчас достаточно статей которые вам помогут."
arttom;Основатель F# сообщества: «ООП и ФП головного мозга должны умереть»// Мы обречены #7;https://habr.com//ru/post/505390/;Полтора года назад я писал статью про сообщество F# разработчиков. Мне казалось странным, что люди, у которых есть столько возможностей для карьерного развития, бросают гигантские силы на изучение странного не особо кому нужного языка. Но внутри я встретил самое дружелюбное и живое сообщество разработчиков из всех, с кем общался. Пацаны приводили много логичных доводов почему они выбрали F#, но у меня все равно осталось впечатление, что они выбирают не умом, а сердцем. Очень необычная фигня для такой прагматичной индустрии.Спустя полтора года после статьи я позвал Романа Мельникова на подкаст и обсудил, как все обстоит сейчас.
MaxRokatansky;Выбор зависимостей для проекта;https://habr.com//ru/company/otus/blog/507270/;"Салют, хабровчане. В преддверии старта курса «Fullstack разработчик JavaScript», подготовили для вас еще один полезный перевод.     Каждый веб-разработчик сталкивался с этой головоломкой: какую зависимость выбрать? Почему мы выбираем jQuery, а не Prototype, или Prototype, а не Mootools, или отдаем предпочтение Vue вместо React, или же предпочитаем Angular вместо Ember, или же Lodash, а не Underscore, и так получается неограниченное количество комбинаций.  Сам я принимаю решение настолько быстро, что оно может казаться неосознанным. Однако это не так, и я решил, что пришло время описать некоторые из моих рабочих процессов, как минимум, чтобы со временем скорректировать их или пересмотреть."
ru_vds;Прости, React, но я так больше не могу;https://habr.com//ru/company/ruvds/blog/508654/;"Недавно мне попалась фраза «усталость от JavaScript», «JavaScript fatigue», и я мгновенно понял, что это — про меня.  Последние несколько лет я делал всё возможное для того чтобы поспевать за новшествами экосистемы React, и, если брать выше, за новшествами JavaScript, где изменения происходят с умопомрачительной скоростью.    Я, большую часть этого времени, ещё и обещал себе выучить какие-нибудь новые языки, попробовать новые технологии, в общем — сделать что-то такое, что выведет меня из зоны комфорта, в центре которой был JavaScript.  Но я, почти всегда, ничем таким не занимался. Дело тут было в том, что React и JavaScript, если стремиться быть в курсе всего, что в этих сферах происходит, отнимают слишком много сил и времени. Иногда я по-настоящему опасался того, что мои знания и навыки могут устареть. Всё это оставляло мне очень мало времени на то, чтобы исследовать что-то новое."
kentavr009;Как решать капчи-слайдеры от GeeTest с помощь JS;https://habr.com//ru/post/508690/;Моя предыдущая статья на эту тему – «Как обходить капчи-слайдеры с помощью JS и Puppeteer» В данной же статье я пойду еще дальше и решу капчу-слайдер другим способом. Этот способ решает капчу-слайдер быстрее и эффективнее. Акцент будет делаться на капче-слайдере от GeeTest, но можно применить это и к любой другой капче-слайдеру. Я покажу вам, как обойти ее за несколько шагов. 
ru_vds;Wasm или не Wasm?;https://habr.com//ru/company/ruvds/blog/510904/;"Мы, в компании Linkurious, занимаемся работой над Linkurious Enterprise. Это — веб-платформа, которая, используя возможности графов и средства их визуализации, призвана помогать компаниям и органам власти, расположенным по всему миру, бороться с финансовыми преступлениями.  Одна из главных возможностей Linkurious Enterprise — это простой в освоении и использовании интерфейс визуализации графов, рассчитанный на неспециалистов.    В 2015 году, разочарованные возможностями существующих JavaScript-библиотек для визуализации графов, мы приступили к разработке собственной библиотеки — Ogma.  Ogma — это JS-библиотека, отличающаяся высоким уровнем производительности в плане рендеринга и выполнения вычислений, которая нацелена на визуализацию сетевых структур. Возможно, вы видели, как сетевые структуры визуализируются с помощью других JavaScript-инструментов, вроде D3.js или Sigma.js. Нам возможностей этих инструментов не хватало. Нам было важно, чтобы используемое нами решение обладало бы некоторыми специфическими возможностями, чтобы оно соответствовало бы определённым требованиям к производительности. Ни того, ни другого в сторонних библиотеках мы не нашли. Поэтому мы и решили разработать собственную библиотеку с нуля."
imaximova;Облачный гейминг с открытым исходным кодом на WebRTC: p2p, мультиплеер, zero latency;https://habr.com//ru/company/Voximplant/blog/511626/;" ПО как услуга, инфраструктура как услуга, платформа как услуга, коммуникационная платформа как услуга, видеоконференции как услуга, а что насчет облачных игр как услуги? Уже было предпринято несколько попыток создания облачных игр (Cloud Gaming), например, Stadia, недавно запущенная компанией Google. Stadia не новичок в WebRTC, но могут ли другие использовать WebRTC так же?"
arttom;Если ты видишь статью, что язык Х быстрее, чем язык Y – можешь закрывать статью;https://habr.com//ru/post/512872/;"  Я своими гуманитарными мозгами всегда думал так — если программист знает, как сделать перфоманснее — значит надо сделать перфоманснее. Производительное решение = правильное решение. Один язык программирования может быть медленнее другого, и если это выяснится — язык программирования отправляется на помойку.  Ну и уж точно — если разработчик — специалист в области перфоманса, он будет топить за все эти вещи, даже если они неверны.   Естественно, все это чушь, но не мне вам об этом говорить. Поэтому к нам в подкаст пришел Андрей Акиньшин — разработчик и математик, кандидат физико-математических наук, мейнтейнер BenchmarkDotNet и perfolizer, автор книги Pro .NET Benchmarking и просто очень, очень крутой инженер.﻿ "
ru_vds;Разработка инструмента командной строки: сравнение Go и Rust;https://habr.com//ru/company/ruvds/blog/515674/;"Эта статья посвящена разбору моего эксперимента по написанию небольшого инструмента командной строки с использованием двух языков, в программировании на которых у меня не особенно много опыта. Речь идёт о Go и Rust.    Если вам не терпится увидеть код и самостоятельно сравнить один вариант моей программы с другим — то вот репозиторий Go-варианта проекта, а вот — репозиторий его варианта, написанного на Rust."
redhatrussia;Red Hat Flatpak, DevNation Day, шпаргалка по программированию на Cи и пять вебинаров на русском;https://habr.com//ru/company/redhatrussia/blog/516818/;"  Полезные ссылки на живые мероприятия, видео, митапы, техтолки и книги – ниже в нашем еженедельном посте."
;;;Всем привет, на связи Microsoft! Мы давно обратили внимание, что читатели видят в Хабре образовательный ресурс и приходят сюда затем, чтобы повысить свой профессиональный уровень. Для тех хабравчан, кто пользуется инструментами и продуктами от Microsoft, мы решили систематизировать наши обучающие, справочные и триал-материалы. Итак, под катом наш виртуальный лекторий, где собраны ссылки по работе с Azure, последние курсы на платформе Learn и материалы для получения сертификатов от компании.
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №430 (24 — 30 августа 2020);https://habr.com//ru/post/517144/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
ru_vds;Сравнение Blazor и JavaScript-инструментов;https://habr.com//ru/company/ruvds/blog/517314/;"В последние несколько лет JavaScript был самым популярным и распространённым языком для разработки одностраничных приложений (Single Page Application, SPA). Это так и сегодня. Но недавно Microsoft выпустила новый фреймворк, который называется Blazor. Он позволяет писать браузерные приложения на C#.    В этом материале я хочу рассказать о том, что такое Blazor, хочу раскрыть причины того, что вокруг этого фреймворка поднято много шума, собираюсь сравнить его с инструментами из экосистемы JavaScript."
pronskiy;PHP-Дайджест № 188 (7 – 21 сентября 2020);https://habr.com//ru/post/519960/;" Свежая подборка со ссылками на новости и материалы. В выпуске: PHP 8 Beta 4, инициатива по консолидации PHP-сообщества, концепт PHP для GraalVM, предложение по дженерикам в Internals, полезные инструменты, видео, подкасты, статьи.  Приятного чтения! "
glebmachine;25 и 26 сентября — открытые дни на Frontend Live;https://habr.com//ru/company/oleg-bunin/blog/519986/;"В эти дни принять участие в конференции может любой желающий. Но нужно зарегистрироваться. Смотрите, что вам будет по душе в полном расписании Frontend Live.   Доклады будут общими по фронтенд-тематикам, в остальные дни конференции спикеры будут рассказывать более углубленно по каждой теме, с нюансами, деталями, практикой и обсуждениями. Мы уже рассказали о некоторых докладах, которые будут именно в эти 2 дня для всех желающих, и сегодня познакомим вас с остальными открытыми выступлениями.  Что нового есть во Frontend и что мы можем сделать лучше? "
tin_vsl;RubyGems Digest 2020·09;https://habr.com//ru/post/522648/;Большая подборка информации о библиотеках языка Ruby за сентябрь 2020 года. Новости, включая русскоязычные источники. А также полезные мнения и опыт разработки.  
nuald;Сравнение встраиваемых ЯП по размеру в исполняемом файле;https://habr.com//ru/post/524190/;В рамках одного из моих SDK-проектов нам понадобилось добавить скриптование, которое бы оказало наименьший эффект на размер конечного бинарного файла, но при этом предоставляло хорошую фунциональность. Это дало старт проекту, который описан в этой статье. Прошу заметить, что т.к. в SDK у нас есть определенные требования, они частично перенеслись на язык скриптования, поэтому в проекте не участвовали некоторые достаточно известные встраиваемые ЯП (но Lua включен для сравнения). Сайт проекта доступен по ссылке. Скажу сразу, что на данный момент для меня лично победителями являются Chibi-Scheme и Wasm3. Подробности для заинтересовавшихся под катом.
sahsAGU;Как выбрать движок для создания игр на .NET (рассматриваем 7 кандидатов);https://habr.com//ru/company/microsoft/blog/524972/;"Разработка игр многопрофильна по сравнению с разработкой бизнес-приложений и сервисов. Играм необходимы навыки дизайна, охватывающие интерфейс, звук, игровой процесс и художественное оформление. Это также требует инженерных навыков для графики, игрового процесса, звука, облачных сервисов и разработки. Иногда вам нужно перейти на более низкий уровень и поэкспериментировать с реестрами оборудования в сборке, чтобы оптимизировать производительность для конкретного устройства.  Вам нужно самостоятельно создавать все эти слои при создании игры, или есть способ лучше? Конечно, есть способ получше. Экосистема .NET предлагает множество вариантов для тех, кто хочет создавать игры, но не хочет создавать все с нуля. В предыдущей публикации я продемонстрировал разнообразный ландшафт разработки игр для .NET. В этом посте я рассмотрю некоторые из существующих игровых движков .NET и помогу вам выбрать, какой игровой движок подходит вам.  "
ZlodeiBaal;Как запихать нейронку в кофеварку;https://habr.com//ru/company/recognitor/blog/524980/;"Мир машинного обучения продолжает стремительно развиваться. Всего за год технология может стать мейнстримом, и разительно измениться, придя в повседневность.  За прошедший год-полтора, одной из таких технологий, стали фреймворки выполнения моделей машинного обучения. Не то, что их не было. Но, за этот год, те которые были — стали сильно проще, удобнее, мощнее.    В статье я попробую осветить всё что повылезало за последнее время. Чтобы вы, решив использовать нейронную сеть в очередном калькуляторе, знали куда смотреть. "
mclouds;FuturespLASH — а есть ли будущее?;https://habr.com//ru/company/mclouds/blog/525632/;Flash - это неотъемлемая часть в истории развития Интернета. Начиная с графического редактора, до размещения Flash-контента на 50% всех сайтов в сети Интернет, заканчивая дальнейшей борьбой с размещенным Flash-контентом и эксплуатированием уязвимостей в браузере - со всем этим столкнулся Flash. А как мир пришёл к этой технологии?
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #368 (26 октября — 1 ноября);https://habr.com//ru/company/productivity_inside/blog/526004/;В новом дайджесте проверка иконки сплеша, история одного рефакторинга и одного “однорукого” интерфейса, стандарты code review и обновление Firebase, сетевое мышление, Kotlin Developer Nanodegree, работа с Unity Asset Store и многое другое!  
lockywolf;SRFI-216: Поддержка курса SICP. Обсудим?;https://habr.com//ru/post/526596/;"TL;DR: Я написал и выложил на всеобщее обсуждение Scheme Request for Implementation 216. Он нацелен на то, чтобы одна из самых известных в мире учебных программ по Computer Science, Structure and Interpretation of Computer Programs, стала выполнимой в полном объёме не только на MIT/GNU Scheme, но и на других интерпретаторах и компиляторах, в частности, на вашем любимом.  И если раньше запрос в багтрекер ""сделайте, пожалуйста, поддержку SICP"" звучал бы расплывчато, то после принятия данного SRFI, поддержка SICP должна стать намного более общепринятой.Чтобы написать этот документ, я проработал SICP целиком (что потребовало более 700 рабочих часов и заслуживает отдельного поста), выделил части, до сих пор не вошедшие в стандарт, и сформулировал их в качестве двух документов, SRFI-203 (принят в сентябе 2020), и данного, SRFI-216, к которому я и приглашаю всех присоединиться.За техническими деталями и подробностями, "
Gim6626;FOSS News №42 – дайджест новостей и других материалов о свободном и открытом ПО за 9-15 ноября 2020 года;https://habr.com//ru/post/528132/;"  Всем привет!  Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Госорганы России начали переход на Astra Linux; Canonical Group Limited представила финансовые показатели за 2019 г.; ВКонтакте снова выкладывает KPHP; обсуждение факторов, улучшающих инновационный потенциал организации; описание попытки использовать Raspberry Pi 4 в качестве десктопа; произвол HP и многое другое."
MaxRokatansky;Разбираемся с доступом к атрибутам в Python;https://habr.com//ru/company/otus/blog/528304/;Интересно, сколько людей понимают, что в Python много синтаксического сахара? Я не говорю, что он похож на Lisp-подобные языки, где синтаксис настолько голый, насколько это возможно (хотя и сравнение с Lisp не совсем обосновано), но большая часть синтаксиса Python технически не нужна, поскольку под капотом в основном вызовы функций.Ну и что с того? Зачем думать о том, как Python за меньший синтаксис делает больше вызовов функций? На самом деле для этого есть две причины. Во-первых, полезно знать, как на самом деле работает Python, чтобы лучше понимать/отлаживать код, когда что-то идет не так как надо. Во-вторых, так можно выявить минимум, необходимый для реализации языка.Именно поэтому, чтобы заняться самообразованием и заодно подумать, что может понадобиться для реализации Python под WebAssembly или API bare bones на C, я решил написать эту статью о том, как выглядит доступ к атрибутам и что скрывается за синтаксисом.Теперь мы можете попытаться собрать воедино все, что относится к доступу к атрибутам, прочитав справочник по Python. Так вы можете прийти к выражениям ссылок на атрибуты и модели данных для настройки доступа к атрибутам, однако, все равно важно связать все вместе, чтобы понять, как работает доступ. Поэтому я предпочитаю идти от исходного кода на CPython и выяснять, что происходит в интерпретаторе (я специально использую тег репозитория CPython 3.8.3, поскольку у меня есть стабильные ссылки и я использую последнюю версию на момент написания статьи).В начале статьи вам встретится немного кода на С, но я не жду, что вы досконально поймете, что там происходит. Я напишу о том, что нужно будет из него понять, поэтому если у вас нет ни малейших знаний в С, то ничего страшного, вы все равно поймете все то, о чем я говорю. 
nevoroman;Вышел .NET 5. И что?;https://habr.com//ru/company/skbkontur/blog/531190/;Несколько недель назад вышел .NET 5. На сайте Microsoft можно найти подробный анонс со всеми изменениями, но главный вопрос для меня, как для разработчика — и что с того? Что мне с выхода пятого дотнета, как я могу его использовать, есть ли смысл переходить на новую версию прямо сейчас? На эти вопросы я постараюсь ответить дальше. 
grvelvet;Основы Armory. Traits;https://habr.com//ru/post/531670/;Traits, как вы уже успели догадаться из прошлых постов, это система скриптов в Armory. Если вы работали с движком  Source, то наверно помните такие розовые кубики - там они именовались Entities. Так и у нас, суть одна и та же. В нашем случае используемые traits можно посмотреть только в Outliner, переключившившись на режим просмотра Orphan Data в Collections. Это крайне неудобно, потому что нет визуального отображения.
AlexeyAB;Scaled YOLO v4 самая лучшая нейронная сеть для обнаружения объектов на датасете MS COCO;https://habr.com//ru/post/531786/;" Научная статья  Pytorch: YOLOv4-CSP, YOLOv4-P5, YOLOv4-P6, YOLOv4-P7 (main repository  — use to reproduce results) YOLOv4-CSP YOLOv4-tiny YOLOv4-large  Darknet: YOLOv4-tiny, YOLOv4-CSP, YOLOv4x-MISH Структура YOLOv4-CSP  Scaled YOLO v4 является самой лучшей нейронной сетью для обнаружения объектов — самой точной нейронной сетью (55.8% AP) на датасете Microsoft COCO среди всех опубликованных нейронных сетей на данный момент. А также является лучшей с точки зрения соотношения скорости к точности во всем диапазоне точности и скорости от 15 FPS до 1774 FPS. На данный момент это Top1 нейронная сеть для обнаружения объектов.  Scaled YOLO v4 обгоняет по точности нейронные сети:   Google EfficientDet D7x / DetectoRS or SpineNet-190 (self-trained on extra-data) Amazon Cascade-RCNN ResNest200 Microsoft RepPoints v2 Facebook RetinaNet SpineNet-190   Мы показываем, что подходы YOLO и Cross-Stage-Partial (CSP) Network являются лучшими с точки зрения, как абсолютной точности, так и соотношения точности к скорости.   График Точности (вертикальная ось) и Задержки (горизонтальная ось) на GPU Tesla V100 (Volta) при batch=1 без использования TensorRT:  "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №445 (7 — 13 декабря 2020);https://habr.com//ru/post/532826/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
Caiiiycuk;DOS Cloud Gaming;https://habr.com//ru/post/533480/; Давным давно я занялся разработкой JavaScript API для запуска DOS игр в браузере. После стольких потраченных сил с удовлетворением могу сказать, что многие сайты со старыми игрушками перешили и используют именно мое API. Но, прогресс не стоит на месте и я занялся разработкой следующей версии js-dos.
oleggromov;Попасть в FAANG недостаточно, или 9 шагов к карьере мечты;https://habr.com//ru/post/533764/;Привет, с вами Громов. Недавно я провёл стрим про карьеру для студентов Школы 21, который получился очень насыщенным — и я успел коснуться только около трети запланированного. Ниже его основные мысли, если у вас нет времени смотреть часовую запись.
EXL;Опыт сопряжения Java, JavaScript, Ruby и Python в одном проекте посредством GraalVM;https://habr.com//ru/post/534044/;"В прошлом месяце вышла стабильная LTS-версия многоязычной среды выполнения GraalVM 20.3.0 от корпорации Oracle и мне захотелось испробовать её для решения какой-нибудь интересной практической задачи. Для тех кто не в курсе, приведу краткое описание этой новой платформы. GraalVM позволяет использовать в едином окружении различные популярные языки программирования и обеспечивает их разностороннее взаимодействие в рамках некоторой общей среды выполнения.   Схематическое изображение архитектуры GraalVM из официальной документации.  Добавление новых языков в GraalVM осуществляется с помощью специального фреймворка Truffle, выполненного в виде библиотеки Java. Фреймворк предназначен для создания реализаций языков программирования в качестве интерпретаторов для самомодифицируемых абстрактных синтаксических деревьев (AST). При желании на его основе можно создать собственный язык, в официальных репозиториях GraalVM подробно рассмотрен пример реализации такого проекта под названием SimpleLanguage. Интерпретаторы, которые были написаны с использованием фреймворка Truffle, будут автоматически использовать GraalVM как JIT-компилятор непосредственно для самой реализации языка запускаемой на JVM-платформе и, соответственно, иметь возможность взаимодействия и двустороннего обмена данными в одном и том же пространстве памяти посредством специально разработанного протокола и программного интерфейса Polyglot API.  Платформа GraalVM вместе с исполняемой программой на смеси самых разных языков может быть представлена в виде автономного и самодостаточного исполняемого файла, либо работать поверх OpenJDK, Node.js или даже внутри Oracle Database."
ruvds;Обзор GameLisp: нового языка для написания игр на Rust;https://habr.com//ru/company/ruvds/blog/535904/;" Программист, подписывающийся псевдонимом Fleabit, уже полгода разрабатывает свой язык программирования. Сразу же возникает вопрос: ещё один язык? Зачем?  Вот его аргументы:   Разработка движка игры и разработка игры на этом движке — две очень разные задачи, и для них удобно использовать разные языки, при условии, что код на них хорошо стыкуется друг с другом. Например, код на языке с garbage collection и на языке с явным управлением памятью было бы сложно объединить в одном проекте. Rust идеально подходит для разработки движка игры: из языков, ориентированных на производительность скомпилированного кода, в нём максимум выразительных средств — enum-ы с полями; pattern matching с деструктуризацией; макросы, генерирующие произвольный код во время компиляции; и т.п. С другой стороны, для описания игровой механики Rust подходит плохо: задержки на перекомпиляцию усложняет подход «подправить и тут же проверить, что получилось»; строгое управление памятью усложняет использование одних данных одновременно несколькими объектами; а генераторы/сопрограммы, позволяющие удобно реализовать кооперативную многозадачность между внутриигровыми сущностями, ещё не реализованы. Для игровой механики идеально подходил бы скриптовый язык наподобие JavaScript, Lua, Python или Ruby; но интеграция кода на них в проект на Rust — нетривиальная задача, отчасти из-за того, что эти полновесные языки программирования устроены запредельно сложно. Вдобавок, внутри игры напрашивается очень простой garbage collector, отрабатывающий после генерации каждого кадра, чтобы частота кадров оставалась постоянной — без внезапных подвисаний раз в десять минут, когда GC решил пройтись по всем объектам, созданным за эти десять минут. Другое важное преимущество GameLisp перед популярными скриптовыми языками — гомоиконичность, упрощающая обработку и генерацию кода макросами. "
Gim6626;FOSS News №51 – дайджест материалов о свободном и открытом ПО за 4-10 января 2021 года;https://habr.com//ru/post/536664/;" Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Наиболее важные события 2020 года по версии OpenNET; проект портирования Linux на Mac с M1 обзавёлся названием и сайтом; утраченный потенциал подсистемы Windows для Linux (WSL); open-source ПК Dragonbox Pyra начали отгружать покупателям после четырех лет разработки; lsFusion vis 1С; о взломе игры Ball Sort Puzzle и многое другое."
AnyKeyShik2015;HackTheBox. Прохождение RopeTwo, часть 1. Chromium v8;https://habr.com//ru/post/537688/;Пора выложить первый райтап для машинки с площадки HackTheBox.В данной статье разберемся с написанием RCE для патченного JavaScript-двжика v8, используемого сейчас почти повсеместно.В текущий момент готовы две части - первая, которую вы читаете, и вторая, с получением прав юзера. К концу февраля, надеюсь, будет третья часть, с получением рут-прав на машине. Из-за сессии и нового года я не успел доделать эту машинку до конца. Хотя, пожалуй, могу назвать ее одной из лучших, с моей точки зрения.
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #377 (11 — 17 января);https://habr.com//ru/company/productivity_inside/blog/537732/;В первом дайджесте нового года чаты на вебсокетах, переход из 1С в Android, написание игры за месяц и тренды мобильных игр, доходы рынка приложений и полезные инструменты. Это и многое другое в нашей новой подборке!  
Gim6626;FOSS News №53 – дайджест материалов о свободном и открытом ПО за 18-24 января 2021 года;https://habr.com//ru/post/538956/;"  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Red Hat представил бесплатные варианты Red Hat Enterprise Linux; китайцы выпустили GNU/Linux дистрибутив UOS в качестве «полноценной замены Windows 7» для госсектора; компания Corellium адаптировала GNU/Linux для работы на компьютерах с чипом Apple M1; Flipper Zero — план по производству и доставке; Arch Linux, Fedora, Debian, Slackware и openSUSE могут отказаться от поставки Chromium; как законтрибьютить в опенсорс, чтобы не сгореть со стыда; готов ли ваш Open Source проект к внедрению в корпорации; сегодня большинство Windows-игр отлично запускаются под GNU/Linux благодаря Proton и многое другое."
Nurked;Ржавеем дальше. Как появился Rust и можно ли на нём WEB?;https://habr.com//ru/post/538970/;Моя предыдущая статья про rust вызвала положительную реакцию и большое количество обсуждений о том что да как с rust. Мне исключительно приятно видеть что вам понравился этот материал. В комментариях я встретил много вопросов типа «А можно ли использовать rust для WEB?» Лаконичный ответ таков: «Можно». Можно и brainfuck использовать, если хочется. Нужно ли? Скажем так, brainfuck для WEB использовать категорически не стоит. А вот rust – тут надо понимать что именно делает rust и каковы его цели. Для того чтобы это понять мы должны погрузиться в компилятор и разобраться в устройстве процессоров. Под катом вы найдёте глубокий заныр в историю того как появился rust и поймёте что это такое и когда его нужно использовать а когда можно и на «ноде запилить». 
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №451 (18 — 24 января 2021);https://habr.com//ru/post/538972/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
askunash;Поговорим об инструментах для создания клиентских веб-приложений с использованием традиционных языков программирования;https://habr.com//ru/post/539172/;Сразу оговоримся, что в этой публикации мы не будем затрагивать вопросы подходов к созданию полномасштабных приложений для Web, подразумевающих наличие крупной кодовой базы, заставляющей функционировать её серверную часть. Как-то исторически сложилось так, что клиентская часть подобных приложений, как правило, реализуется на JavaScript и производных от него языках и фреймворках, а серверная – уж на чём придётся... В конце концов, не столь уж это и важно – главное, чтобы соответствующая программная среда была поднята на сервере и реализованный в ней код спокойно выполнял свою задачу.Вместе с тем со временем всё чаще стала возникать потребность в написании монолитных – как правило, простых и непритязательных веб-приложений, не требующих для работы серверной части. Естественно, с широким распространением HTML5 подобные приложения начали обретать весьма богатый функционал, однако... Однако же не все разработчики были готовы смириться с существующим положением вещей, когда все доступные им решения, по сути, имели своим краеугольным камнем всё тот же пресловутый JavaScript.В конце концов, многие, что называется, “с младых ногтей” привыкли к другому подходу к проектированию и созданию приложений широкого профиля. Это, в первую очередь, различные RAD-среды, среди которых в нашей стране наибольшей популярностью (по крайней мере, в академической среде), всегда пользовалась Delphi. Натянул пару кнопок на форму, прописал нужные обработчики событий на привычном языке Pascal – красота!.. Чего ещё можно желать, в особенности если вы сосредоточены на реализации каких-то нужных вам алгоритмов, а интерфейс для вас не играет такой уж принципиальной роли?При традиционном дизайне и проектировании веб-приложений всё совсем не так. Тут тебе бы неплохо помнить и все основные детали описаний различных тэгов HTML-разметки и атрибутов CSS-стили, и уметь сверстать всё это дело воедино, да ещё и “оживить” интерактивными сценариями, реализованными на JavaScript. Очевидно, что такой подход, ориентированный в первую очередь на дизайн, а не на саму разработку как таковую, вряд ли устроит нашего традиционного разработчика, воспитанного на классических алгоритмах и структурах данных, с возможным вкраплением зачатков объектно-ориентированного подхода. (Напоминаем, что речь идёт в первую очередь о разработчиках небольших приложений, где теоретически мог бы управиться и один человек.)
Seleditor;Китайцы создали сразу две альтернативы Flash, потому что не могут отказаться от технологии Adobe;https://habr.com//ru/company/selectel/blog/539776/;" На днях мы писали о том, что после отключения компанией Adobe плагина Flash у китайцев начались проблемы. В частности, полностью прекратили работу железнодорожные сервисы в одном из городов. Используют Flash не только железнодорожники, но и другие китайские компании, предприятия и госучреждения — школы, университеты и т.п.  В общем, китайцы нашли оригинальное решение — решили сделать свой Flash. И даже не одну технологию, а сразу две. Так, разработчики дистрибутива UOS создали альтернативу с названием ReFla, у которой, по их словам, все хорошо с безопасностью и стабильностью работы. А партнер Adobe в Китае выпустил оригинальный Flash Player, доработав его в плане безопасности."
Gim6626;FOSS News №54 – дайджест материалов о свободном и открытом ПО за 25-31 января 2021 года;https://habr.com//ru/post/540178/;" Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Технология WebRTC получила статус стандарта; о том, как пандемия ускоряет внедрение Open Source в корпорации; Open Source проект создания малых спутников упрощает разработку подобных проектов; Open Source Security Foundation: рефлексия и будущее; в Ubuntu 21.04 решено включить Wayland по умолчанию; доступен монолитный дистрибутив Ubuntu Core 20; руководство по настройке домашнего почтового сервера и ухода с «бесплатной» почты и многое другое."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №452 (25 — 31 января 2021);https://habr.com//ru/post/540202/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №454 (8 — 14 февраля 2021);https://habr.com//ru/post/542380/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
Tyooo;Вышли ожидаемые релизы от Google: Flutter 2 и язык Dart 2.12;https://habr.com//ru/company/selectel/blog/545588/;" Корпорация Google продолжает развивать свои продукты. Несколько дней назад была представлена новая версия построения интерфейса пользователя Flutter 2. Она, по словам разработчиков, стала универсальным фреймворком, который позволяет разрабатывать любые типы программ. Это могут быть приложения как для десктопов, так и web-сервисы.   Flutter в процессе эволюции стал неплохой альтернативой React Native. Его главное достоинство — возможность на основе одной кодовой базы создавать приложения для разных платформ, включая iOS, Android, Windows, macOS и Linux. Плюс можно разрабатывать и чисто браузерные приложения. И да, обновление до 2 версии не влияет на поддержку продуктов, написанных на Flutter 1. Они без дополнительного редактирования кода могут быть адаптированы для работы на рабочем столе и в Web. "
Gim6626;FOSS News №59 – дайджест материалов о свободном и открытом ПО за 1-7 марта 2021 года;https://habr.com//ru/post/545930/;"  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Google представил фреймворк Flutter 2, теперь для создания любых типов программ; проект браузера Brave выкупил поисковый движок Cliqz и начнёт развитие своей поисковой системы; история от разработчика «Как я правил баг в Angular»; компания Scarf выпускает инструменты аналитики, которые помогают разработчикам с монетизацией; результаты исследования Red Hat о состоянии корпоративного программного обеспечения с открытым исходным кодом; интервью с Итало Виньоли из The Document Foundation о том, является ли открытый исходный код будущим офисного программного обеспечения; скринкаст терминала с помощью asciinema; Proton близок к полноценной поддержке 7000 Windows-игр и многое другое."
Doublesharp;10 лучших игр по программированию, которые улучшат ваши навыки;https://habr.com//ru/company/skillfactory/blog/546102/;Вы помните далёкие дни из детства, когда вы, проводили целый день, а иногда даже не ели целый день, чтобы поиграть в игры на Nintendo? (Ах, дни Mario и Contra!!!)С того времени игры претерпели гигантские преобразования и сфера стала более обширной. Это уже не просто хобби. Сейчас в Интернете доступно множество игр, связанных с программированием, и вы можете использовать их чтобы изучить и отточить свои скилы в увлекательной форме.  Более того, эти игры могут помочь вам улучшить навыки решения задач, поскольку вам нужно будет решать задачи различной сложности, а также соревноваться с другими опытными программистами по всему миру. Специально к старту новых потоков курсов Fullstack-разработчик на Python, разработка на C# и разработка на Java, в этой статье мы отобрали несколько таких игр, играя в которые можно параллельно качать и себя самого. 
LeftTwixWand;WinUI 3 — Новая эра разработки под Windows;https://habr.com//ru/post/546576/;В календаре 8 марта, а я пишу эту статью. Почему? - Потому, что WinUI 3 - это важно!В этой статье:- WinUI 3 - это не просто новая версия библиотеки пользовательских компонентов. Это изменит разработку ПО под Windows и не только.- Как менялась разработка графических интерфейсов?- Эволюция системных API пошла не по плану....- В чём провал Universal Windows Platform?- Что такое .NET, и почему за ним будущее?
gkv311;Есть ли жизнь без WebGL 2.0?;https://habr.com//ru/post/547230/;WebGL 2.0 вышел в далёком 2017ом году, принёс графический стек OpenGL ES 3.0 (2012го года), и, казалось бы, все современные браузеры давно должны были его поддерживать. Однако, среди лидеров затесались отстающие, и пользователи Safari до сих пор (начало 2021го) вынуждены ограничиваться возможностями WebGL 1.0, опубликованным в 2011ом году на основе OpenGL ES 2.0.PBR освещение достаточно требовательно к вычислительным ресурсам графического процессора и обычно реализуется средствами WebGL 2.0. Возможно ли адаптировать PBR рендерер графического движка для работы в условиях ограничений WebGL 1.0 на iPad? В этой статье описывается опыт такой адаптации для графического движка открытого C++ фреймворка Open CASCADE Technology.
tioffs;Golang-дайджест № 3 (1 – 31 марта 2021);https://habr.com//ru/company/vseinstrumenti/blog/549946/;Свежая подборка новостей и материаловИнтересное в этом выпускемонитор горутин в терминале, пикселизатор изображений, проверка безопасности Go-кода, dropbox load balancing Приятного чтения!
wetnose;Доказательное программирование;https://habr.com//ru/post/550270/;"Внимание!  Содержание данной статьи никак не связано с докладом академика А. П. Ершова ""Научные основы доказательного программирования"" 1984г. Статья содержит утверждения, способные вызвать вспышки гнева и неконтролируемой агрессии. За последствия автор статьи ответственности не несет! В тексте упоминаются следующие языки программирования: Java, Swift, Kotlin, Scala, Go, Haskell и др. Эта статья — антитезис. Автор ставит вопросы, но не считает своим долгом на все из них дать ответы.  В момент своего появления в Европе доказательная медицина казалась скандальной, неприятной и отвергаемой почти всем медицинским сообществом идеей. Даже в США, которые сейчас являются оплотом доказательной медицины, долгое время не хотели ее принимать. Основная мысль — докажи, что то, что ты собираешься сделать, реально поможет. Сейчас большинство назначений доктора делают исходя из приобретенных знаний и опыта. Но что если для некоторых ситуаций можно создать такой протокол лечения, следуя которому с болезнью сможет справиться даже неспециалист, и будет доказано, что этот протокол работает? Можно ли покрыть такими протоколами все известные недуги? Все, конечно же, нет, но какие-то — определенно, да. И вот тут невольно возникает вопрос: не обошла ли медицина другую, казалось бы, не менее прогрессивную индустрию разработки программного обеспечения?"
phillennium;О чём расскажут на DotNext: от нативных API до фронтенда на F#;https://habr.com//ru/company/jugru/blog/550936/; Уже совсем скоро пройдёт .NET-конференция DotNext — а о чём там будут доклады-то? Программа готова, и делимся её описанием. Главные тематические блоки прежние: best practices, архитектура, «внутренности» .NET, тренды. И снова будут воркшопы, уже зарекомендовавшие себя в онлайн-формате (удобно демонстрировать, как сделать что-то, когда зрители смотрят это за компьютерами и могут тут же попробовать сами). А о том, из каких именно докладов в этот раз состоят блоки, рассказали сразу в двух форматах. Если предпочитаете читать — добро пожаловать под кат, а если любите слушать — для вас записали подкаст участники программного комитета Анатолий Кулаков, Андрей Акиньшин и Игорь Лабутин. В подкасте даже разыгрывают билет на DotNext и подписанные книги Джеффри Рихтера!
Gim6626;FOSS News №65 – дайджест материалов о свободном и открытом ПО за 5–11 апреля 2021 года;https://habr.com//ru/post/551870/;"  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. ИСП РАН займётся повышением защиты Linux и поддержанием отечественной ветки ядра Linux; Google одержал победу в разбирательстве с Oracle, связанном с Java и Android; KDE взял на себя продолжение сопровождения общедоступной ветки Qt 5.15; Signal добавит функцию платежей криптовалютой; Rust включён в число основных языков для разработки платформы Android; обзор и финальное мнение о дистрибутиве Deepin 20.2 и многое другое."
MagisterLudi;Языки программирования с однобуквенным названием;https://habr.com//ru/company/macloud/blog/552680/;"  Список языков программирования, названных одной буквой.  А Язык программирования A+ является потомком APL, как и другие языки на этой странице, потому что сообщество APL любит однобуквенные имена. Артур Уитни (создатель многих диалектов APL) создал A, затем Морган Стенли расширил его до A+.  B Язык программирования B является предшественником C и в наши дни больше не используется.  C Нет необходимости представлять C. Если эта статья вас интересует, то вы знаете C. Мы также можем считать C++ и C #, поскольку разрешены небуквенные и нецифровые символы.  D D  — это улучшенный C++. В настоящее время это мой самый любимый язык, поэтому все будет очень предвзято. Если у вас есть возможность выбирать языки, считайте это рекомендацией проверить D!"
MelkovaCROC;Прокторинг на стероидах, или как контролировать онлайн-экзамены;https://habr.com//ru/company/croc/blog/553012/;Недавно ProctorEdu и КРОК запустили систему для контроля онлайн-тестирования на экономическом факультете МГУ. Она помогает наблюдать за студентами, которые сдают экзамен. Эта система «подсвечивает» нарушения, подсказывает, на кого и на что обратить внимание. В результате один преподаватель может контролировать разом несколько десятков студентов, сидящих у себя дома.Такой подход к онлайн-обучению, прокторинг, первыми внедрили Coursera и Udemy. Разработчики ProctorEdu задумали собственную систему прокторинга в 2016 году именно для учебных заведений, но вскоре поняли, что она способна решать другие, более серьезные задачи. 
Gim6626;FOSS News №66 – дайджест материалов о свободном и открытом ПО за 12–18 апреля 2021 года;https://habr.com//ru/post/553086/;"  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы выпуска:  Столлман признал ошибки и пояснил причины непонимания, Фонд СПО объяснил решение о возвращении RMS в совет директоров; создана некоммерческая организация Open-Source FPGA Foundation (OSFPGA) для продвижения ПЛИС с открытым исходным кодом; Amazon представил OpenSearch, форк платформы Elasticsearch; Linux Foundation запускает исследовательское подразделение для изучения экосистем с открытым исходным кодом и их воздействия; проблемы безопасности программ с открытым исходным кодом, соответствия лицензий и обслуживания распространены во всех отраслях; поддержка Rust для ядра Linux столкнулась с критикой Торвальдса; Inspur, крупнейший в Китае поставщик облачного оборудования, присоединяется к консорциуму по защите патентов с открытым исходным кодом; что означает решение Верховного суда США о Java API для открытого исходного кода и облачных технологий  И многое другое..."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №463 (12 — 18 апреля 2021);https://habr.com//ru/post/553090/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
owlofmacloud;Обзор Prisma ORM: как забыть об SQL и сосредоточиться на данных;https://habr.com//ru/company/macloud/blog/554952/;"  Это статья-обзор о Prisma ORM.  ORM (англ. Object-Relational Mapping — «объектно-реляционное отображение или преобразование») — технология программирования, которая связывает базы данных с концепциями объектно-ориентированных языков программирования, создавая «виртуальную объектную базу данных».  Работа с базами данных (моделирование данных, изменение схем, формирование запросов и т.п.) — одна из наиболее сложных задач, возникающих при разработке приложений. Prisma предлагает решение, позволяющее сосредоточиться на данных вместо SQL.  Что такое Prisma? Как утверждают разработчики, Prisma представляет собой «открытую ORM нового поколения для Node.js и TypeScript», реализующую «новую парадигму объектно-реляционного отображения».  Поддерживаемые языки программирования:   JavaScript TypeScript Go (в разработке) "
ushliypakostnik;Как я написал браузерный 3D FPS шутер на Three.js, Vue и Blender;https://habr.com//ru/post/556238/;На пути каждого коммерческого разработчика (не только кодеров, но, знаю, у дизайнеров, например, также) рано или поздно встречаются топкие-болотистые участки, унылые мрачные места, блуждая по которым можно вообще забрести в мертвую пустыню профессионального выгорания и/или даже к психотерапевту на прием за таблетками. Работодатели-бизнес очевидно задействует ваши наиболее развитые скилы, выжимая по максимуму, стек большинства вакансий оккупирован одними и теми же энтерпрайз-инструментами, кажется, не для всех случаев самыми удачными, удобными и интересными, и вы понимаете что вам придется именно усугублять разгребать тонну такого легаси… Часто отношения в команде складываются для вас не лучшим образом, и вы не получаете настоящего понимания и отдачи, драйва от коллег… Умение тащить себя «по-мюнхаузеновски за волосы», снова влюбляться в технологии, увлекаться чем-то новым [вообще и/или для себя, может быть - смежной областью], имхо, не просто является важным качеством профессионала, но, на самом деле, помогает разработчику выжить в капитализме, оставаясь не только внешне востребованным, конкурентоспособным с наступающей на пятки молодежи, но, прежде всего, давая энергию и движение изнутри. Иногда приходится слышать что-нибудь вроде: «а вот мой бывший говорил, что если бы можно было не кодить, он бы не кодил!». Да и нынешняя молодежь осознала что в сегодняшней ситуации «честно и нормально» зарабатывать можно только в айти, и уже стоят толпою на пороге HR-отдела... Не знаю, мне нравилось кодить с детства, а кодить хочется что-нибудь если не полезное, то хотя бы интересное. Короче, я далеко не геймер, но в моей жизни было несколько коротких периодов когда я позорно «загамывал». Да само увлечение компьютерами в детстве началось, конечно же, с игр. Я помню как в девяностые в город завезли «Спектрумы». Есть тогда было часто практически нечего, но отец все-таки взял последние деньги из заначки, пошел, отстоял невиданно огромную очередь и приобрел нам с братом нашу первую чудо-машину. Мы подключали его через шнур с разъемами СГ-5 к черно-белому телевизору «Рекорд», картинка тряслась и моргала, игры нужно было терпеливо загружать в оперативную память со старенького кассетного магнитофона [до сих пор слышу ядовитые звуки загрузки], часто переживая неудачи... Несмотря на то что ранние программисты и дизайнеры умудрялись помещать с помощью своего кода в 48 килобайт оперативной памяти целые миры с потрясающим геймплеем, мне быстро надоело играть и я увлекся программированием на Бейсике)), рисовал спрайтовую графику (и векторная «трехмерная» тогда тоже уже была, мы даже купили сложную книжку), писал простую музыку в редакторе... Так вот, некоторое время назад мне опять все надоело, была пандемийная зима и на велике не покататься, рок-группа не репетировала… Я почитал форумы и установил себе несколько более-менее свежих популярных игр, сделанных на Unity или Unreal Engine, очевидно. Мне нравятся РПГ-открытые миры-выживалки, вот это все... После работы я стал каждый вечер погружаться в виртуальные миры и рубиться-качаться, но хватило меня ненадолго. Игры все похожи по механикам, однообразный геймплей размазан по небольшому сюжету на кучу похожих заданий с бесконечными боями… Но самое смешное - это реально безбожно лагает в важных механиках. Лагают коммерческие продукты которые продают за деньги… А любой «баг», имхо, это сильное разочарование - он мгновенно выносит из виртуальной среды, цифровой сказки в реальный мир… Конечно, отличная графика, очень круто нарисовано. Но, утрируя, я понял что все эти поделки на энтерпрайзных движках, по сути - даже не кодят. Их собирают менеджеры и дизайнеры, просто «играясь с цветом кубиков», но сами кубики, при этом практически «не меняются»... Вообщем, когда стало совсем скучно, я подумал что «а я ведь тоже так могу», да прямо в браузере на богомерзком не предназначенным для экономии памяти серьезного программирования джаваскрипте. Решил наконец полностью соответствовать тому что все время с умным видом повторяю сыну: «уметь делать игры, намного интереснее чем в них играть». Одним словом, я задался целью написать свой кастомный браузерный FPS-шутер на открытых технологиях.
Gim6626;FOSS News №69 – дайджест материалов о свободном и открытом ПО за 3–9 мая 2021 года;https://habr.com//ru/post/556516/; Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  30 лет Линукса. Интервью с Линусом Торвальдсом в 2 частях. Linux Foundation запускает проект цифровой инфраструктуры с открытым исходным кодом для сельского хозяйства. Signal купил у Facebook рекламу и показывал в баннерах, что соцсеть знает о пользователях. Разработчики ядра Linux завершили аудит всех патчей от Университета Миннесоты, ни один из вредоносных патчей не попал в ядро. Сравниваем четыре опенсорсные альтернативы Disqus. Что такое Matrix? И как этот протокол с открытым исходным кодом хочет изменить обмен сообщениями? Что нового в Ubuntu 21.04. Fediverse — социальная сеть будущего. Mozilla представила платформу Rally для исследований предпочтений пользователей.  И многое другое...
AloneCoder;Парсим протобаф на скорости больше 2 Гб/с.: как я научился любить хвостовую рекурсию в C;https://habr.com//ru/company/mailru/blog/557012/;"  Отличную функцию недавно добавили в основную ветку компилятора Clang. С помощью атрибутов [[clang::musttail]] или __attribute__((musttail)) теперь можно получить гарантированные хвостовые (tail) вызовы в C, C++ и Objective-C.  int g(int); int f(int x) {     __attribute__((musttail)) return g(x); }  (Онлайн-компилятор)"
Gim6626;FOSS News №71 – дайджест материалов о свободном и открытом ПО за 17–23 мая 2021 года;https://habr.com//ru/post/558868/; Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  Бета Android 12: что нового. Сотрудники платформы Freenode покинули проект и запустили альтернативу Libera.Chat. Обзор Fedora 34 (Что нового?). Новый владелец Audacity отказался от использования телеметрии после возмущений пользователей. Как Unix-way убивает десктопный Linux. Gentoo/Arch/LFS как путь в мир Linux. Первый выпуск Lima, окружения для запуска Linux-приложений в macOS. Публичное бета-тестирование Matrix Spaces.  И многое другое…
sahsAGU;11 анонсов конференции Microsoft Build для разработчиков;https://habr.com//ru/company/microsoft/blog/559454/;Привет, Хабр! Сегодня, как и обещали*, делимся подборкой самых интересных для разработчиков конференции Microsoft Build 2021. Их получилось 11, но это не значит, что это все. Чтобы узнать еще больше, изучайте сайт конференции.* пообещали это мы во вчерашней подборке 8 анонсов конференции Microsoft Build 2021, которую подготовила наша бизнес-команда. 
binali;Как я выбирал между .NET и Java;https://habr.com//ru/company/beelinekz/blog/560440/;С .NET я познакомился на первом официальном месте работы: небольшой IT-компании, сотрудничающей с нефтянкой. Это продолжение истории, начало можно почитать здесь.   
MagisterLudi;Либо быстро, либо неправильно;https://habr.com//ru/company/timeweb/blog/560666/;" В 2018 году я упражнялся на Advent of Code (здесь вы можете посмотреть стримы моих решений). Каждый день в декабре они публикуют небольшую проблему, и вы должны написать программу, которая её решит. Обычно это занимает от пары минут до пары часов и это довольно весело, я рекомендую вам попробовать. Когда задача выполнена, она всегда доступна, не только в декабре.  Я понял, что есть два типа решений: те, которые могут вычислить ответ за пару миллисекунд, и те, которые будут считать ответ несколько лет. Если у вас получился второй вариант, вы делаете что-то неправильно. Нет смысла ждать, хотя, технически, это тоже может быть правильным.  Еще одно интересное наблюдение заключается в том, что не имеет значения, какое оборудование вы используете для запуска. Если решение будет быстрым, оно будет быстрым как на ноутбуке, так и на прокаченной рабочей станции. Конечно, это может быть в два или три раза медленнее, но разница будет между 10 мс и 30 мс. Вы все равно получите свой ответ, так что это не имеет особого значения.  С другой стороны, если решение медленное, вы можете использовать любую вычислительную мощность, и ее все равно будет недостаточно. Это могло бы сократить время работы с трех лет (на ноутбуке) до одного года (на самом мощном компьютере, который я только могу собрать). Какая разница? Все равно слишком долго.  Теперь перейдем к программному обеспечению. Легко назвать решения Advent Of Code ошибочными, когда они медленные, поскольку мы знаем, что быстрое решение должно существовать. С реальными проблемами никто этого не гарантирует.  За исключением некоторых случаев.  Собственно, довольно часто.  На самом деле, я бы сказал, почти всегда."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №470 (1 — 6 июня 2021);https://habr.com//ru/post/561334/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
Vordgi;Темизация. История, причины, реализация;https://habr.com//ru/post/563572/;"Когда веб только зарождался – единственной его целью было размещение контента (гипертекстовые страницы), чтобы у пользователей из всемирной паутины был к нему доступ. В то время не могло идти и речи о дизайне, ведь зачем нужен дизайн страницам с научными публикациями, разве они станут от этого полезнее (первый сайт). Времена меняются и сегодня во всемирной паутине далеко не только научные публикации. Блоги, сервисы, социальные сети и многое, многое другое. Каждый сайт нуждается в своей индивидуальности, ему необходимо заинтересовывать и привлекать пользователей. Даже научные сайты постепенно это понимают, ведь большинство ученых хотят не просто изучать те или иные аспекты, а доносить их до людей, тем самым повышая свою популярность и ценность своих исследований (пример – 15 из 15 научных сайтов списка сделали редизайн в последние 6 лет). Рядовым обывателям не интересен серый сайт с непонятным содержанием. Наука становится доступнее, а сайты преобразуются в приложения с удобным и приятным интерфейсом.Так как ""удобство"" у каждого свое – нет четкого определения и конкретных правил по реализации удобного для всех сервиса. В последние годы к этому понятию стали привязывать такое понятие, как Темизация. Именно о нем я и хочу рассказать в данной статье."
Gim6626;FOSS News №75 – дайджест материалов о свободном и открытом ПО за 14—20 июня 2021 года;https://habr.com//ru/post/563712/;  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  Как Linux повлиял на нашу жизнь — празднование 30-летия открытого исходного кода. Linux Foundation объявляет о выпуске отраслевых стандартов для улучшения кибербезопасности. Google профинансирует добавление поддержки Rust в ядро Linux. Ода открытому исходному коду: невозможно переоценить вклад сообщества. Что такое Open Source? Статья для бизнес-лидеров. Волшебники Open Source: отраслевые перспективы программного обеспечения с открытым исходным кодом. «Я подарю тебе маленькую вселенную». DIY-рамка со светящимся сердцем. Как объяснить детям, что такое Apache Kafka за 15 минут с картинками и выдрами.  И многое другое…
Drag13;Оптимизации в вебе — дорого, сложно, и уже не нужно?;https://habr.com//ru/post/564950/; 2021 год. 4к и 8к трансляции уже не новость. Ryzen выпустил 64-ядровый процессор. Наконец-то все забыли об оптимизациях в вебе, потому что это сложно, дорого, и попросту уже не нужно. Если вы думаете именно так, мне есть что вам сказать.
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №474 (21 — 27 июня 2021);https://habr.com//ru/post/564976/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
WhiteBlackGoose;Хостим WASM-приложения на github pages в два клика;https://habr.com//ru/post/566286/;Приветствую. Хочу донести гениальную и простейшую идею о том, как можно бесплатно хостить несложные бессерверные веб-приложения на Blazor WASM на github pages.Это особенно полезная инструкция для тех, кто хотел бы сделать элементарнейшие утилиты, но не хочет/не может для этого поднимать сервер или использовать js для всех вычислений.Прошу под кат!
tioffs;Golang-дайджест № 6 (1 – 30 июня  2021);https://habr.com//ru/post/566782/;Свежая подборка новостей и материаловИнтересное в этом выпускеВыпущены версии Go 1.16.5 и 1.15.13, выпущен gopls v0.7.0, создание собственного Ngrok в 130 строках, GopherCon Europe 2021 OnlineПриятного чтения!
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №477 (12 — 18 июля 2021);https://habr.com//ru/post/568346/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
MaxRokatansky;Горячая перезагрузка .NET: новая возможность для редактирования кода во время выполнения приложений;https://habr.com//ru/company/otus/blog/569094/;Сегодня мы с радостью представляем возможность «горячей перезагрузки» для .NET, которая уже доступна в Visual Studio 2019 16.11 (предварительная версия 1), а также в .NET 6 (предварительная версия 4) через инструмент командной строки dotnet watch. В этой статье мы расскажем, что такое горячая перезагрузка .NET, как приступить к ее использованию, как мы планируем развивать эту возможность в будущем, а также какие виды правок кода и языки поддерживаются на данный момент.
m31;DataScience Digest — 22.07.21;https://habr.com//ru/post/569120/;Встречайте свежий выпуск дайджеста полезных материалов из мира Data Science & Machine Learning подготовленный командой Data Phoenix и не забывайте подписываться на наш Telegram-канал.
tioffs;Golang-дайджест № 7 (1 – 31 июля  2021);https://habr.com//ru/post/570918/;Интересное в этом выпускеВыпущены версии Go 1.17rc1, 1.16.6 и 1.15.14, GitHub представил инструмент проверки безопасности GO, Перехватываем и изменяем сетевые пакеты на примере игры, Рекомендательная системаПриятного чтения!
htc-cs;Что нового в .NET 6?;https://habr.com//ru/post/573434/;На момент написания этих строк вышло уже семь превью-версий .NET 6. Дальше — только релиз-кандидаты. Все основные фичи уже добавлены во фреймворк, идёт отладка, тестирование и оптимизация. Ожидать чего-то кардинально нового в RC-версиях, пожалуй, уже не стоит. Пришла пора рассмотреть .NET 6 поближе. Пресс-релиз для каждой версии содержит огромное количество восхвалений и убеждений в том, что теперь-то всем станет ещё лучше, и как мы вообще жили раньше — уму непостижимо. Где-то авторы не врут, где-то не договаривают, где-то преувеличивают. Пришлось тщательно прочитать все семь пресс-релизов, изучить массу смежных материалов и просмотреть огромное количество тикетов на Гитхабе. Всё для того, чтобы понять, чем они там занимаются и что выкатывают нам посмотреть. Поговорим об этом.
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №482 (23 — 29 августа 2021);https://habr.com//ru/post/575236/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
arthurlomakin;Почему я ненавижу JS или как я в 15 лет переписывал свой интернет-магазин;https://habr.com//ru/post/576954/;Я написал интернет-магазин для магазинов мяса на Blazor Server. Попробовал переписать его на React + Node.Сейчас расскажу, почему после этого я так возненавидел JS...
