AnnieBronson;Google, Microsoft, Huawei, Mozilla и AWS основали Rust Foundation;https://habr.com/ru/news/t/541600/;Развитием языка программирования Rust займется некоммерческая организация Rust Foundation. Новый фонд создали AWS, Huawei, Google, Microsoft и Mozilla. Уже сформирован бюджет на два года работы фонда, он составит миллион долларов.
maybe_elf;Линус Торвальдс рассказал о том, где Rust впишется в Linux;https://habr.com/ru/news/t/549266/;Линус Торвальдс и Грег Кроа-Хартман поделились своими мнениями о том, как они видят работу на Rust в Linux. Ядро Linux написано на C, но Rust постепенно получает поддержку для использования в качестве системного языка.  
blandger;Русский перевод книги «The Rust Programming Language» (TRPL);https://habr.com/ru/news/t/498794/;"Добрый праздничный день.  По окончанию перевода официальной версии TRPL или раст-бука (ссылка на русский вариант), я решил написать про свои размышления, наблюдения и встретившиеся сложности. Перевод последней актуальной версии сделан на основе последней редакции из основного репозитория английского оригинала."
AnnieBronson;Microsoft создаёт новый язык программирования, основанный на Rust;https://habr.com/ru/news/t/479204/;"  Компания Microsoft развивает новый язык программирования на основе Rust. Как пишет издание ZDnet, проект получил название Verona. Планируется, что на его основе Microsoft перепишет некоторые компоненты Windows 10, чтобы решить проблемы с безопасностью.  Как указывает ZDnet со ссылкой на Мэтта Миллера, специалиста Microsoft по безопасности, около 70% всех уязвимостей, которые были обнаружены в продуктах Microsoft в последние годы, были связаны с ошибками управления памятью. Это происходит потому, что языки C и C++, которые традиционно используют для создания системного ПО, передают управление оперативной памятью разработчику. Это неизбежно приводит к ошибкам. "
maybe_elf;Cloudflare добавила поддержку Rust для создания воркеров;https://habr.com/ru/news/t/577270/;В Cloudflare внедрили поддержку создания воркеров на Rust без использования JavaScript. Соответствующий код опубликован на GitHub. 
maybe_elf;Tor Project планирует заменить код C на Rust;https://habr.com/ru/news/t/567442/;Tor Project получил $ 670 тысяч от Zcash Open Major Grants на обновление языка программирования. Оно позволит сделать клиент Tor более адаптируемым и простым для использования. Tor Project планируется перевести с языка С на Rust.
Xtoman;Microsoft упростила доступ к API Win32 для языков Rust и C#;https://habr.com/ru/news/t/538700/;Компания Microsoft рассказала о проекте по упрощению взаимодействия с API Win32 для языков программирования Rust и С#. Проект получил название win32metadata и доступен для предварительного просмотра на Github.
denis-19;Разработчик показал, как получить SSH-ключ с помощью compile-time макроса в Rust в VSCode просто при открытии приложения;https://habr.com/ru/news/t/557598/;"Слева консоль злоумышленника, справа жертвы, которая открыла файл в VSCode со специальным макросом на Rust.  14 мая 2021 года разработчик Джаред Харпер показал в GitHub, как можно удаленно получить ключ для авторизации по SSH (а по факту и другие данные и файлы) при простом открытии жертвой атаки файла с исходным кодом в редакторе кода для кроссплатформенной разработки Visual Studio Code. Атакуемый даже не поймет, что произошло, так как для скрытой передачи данных ему не нужно делать далее никаких манипуляций с открытым проектом. Атакующий использовал для этого специальный макрос на Rust. На компьютере пользователя должен быть установлен плагин rust-analyzer и инструменты для работы с кодом на языке Rust. "
ozkriff;Rust новости #3 (ноябрь 2018);https://habr.com/ru/post/432250/; Предлагаю вашему вниманию субъективную подборку ржавых новостей за ноябрь. В этой подборке: Rust 2018, RustRush, видео с конференций, Amazon Lambda и Firecracker, квизы, переход exonum на actix-web, 10 причин использовать Rust. Результаты Rust опроса 2018  Опубликованы результаты ежегодного Rust-опроса (обсуждение), который шел с августа.
m1rko;Вышел Rust 2018… но что это такое?;https://habr.com/ru/post/432564/;"Статья написана Лин Кларк в сотрудничестве с командой разработчиков Rust («мы» в тексте). Можете прочитать также сообщение в официальном блоге Rust.  6 декабря 2018 года вышла первая версия Rust 2018. В этом релизе мы сосредоточились на производительности, чтобы разработчики Rust стали работать максимально эффективно.   Временнáя шкала показывает переход функций из бета-версии в Rust 2018 и Rust 2015. Она окружена значками для инструментов и четырёх областей: WebAssembly, embedded, networking и CLI. Красный круг — эффективность разработчика — окружает всё, кроме Rust 2015   Но вообще непросто объяснить, что такое Rust 2018.  Некоторые представляют его новой версией языка… примерно так и есть, но не совсем. Я говорю «не совсем», потому что здесь «новая версия» означает не то, что новые версии других языков."
humbug;C++ быстрее и безопаснее Rust, Yandex сделала замеры;https://habr.com/ru/post/492410/;"Спойлер: C++ не быстрее и не медленнее и вообще смысл не в этом. Эта статья является продолжением славных традиций развенчания мифов крупных российских компаний о языке Rust. Предыдущая была ""Go быстрее Rust, Mail.Ru Group сделала замеры"". Недавно я пытался заманить коллегу, сишника из соседнего отдела, на Тёмную сторону Rust. Но мой разговор с коллегой не задался. Потому что, цитата: В 2019 году я был на конференции C++ CoreHard, слушал доклад Антона antoshkka Полухина о незаменимом C++. По словам Антона, Rust еще молодой, не очень быстрый и вообще не такой безопасный.Антон Полухин является представителем России в ISO на международных заседаниях рабочей группы по стандартизации C++, автором нескольких принятых предложений к стандарту языка C++. Антон действительно крутой и авторитетный человек в вопросах по C++. Но доклад содержит несколько серьёзных фактических ошибок в отношении Rust. Давайте их разберём."
RustLangRu;Пять лет Rust;https://habr.com/ru/post/502046/;В этом бардаке, который сейчас происходит в мире, легко забыть, что прошло уже пять лет с выпуска 1.0 в 2015 году! Rust за эти пять лет сильно изменился, так что мы хотели бы вспомнить о работе всех участников сообщества, начиная с момента стабилизации языка. Напомним, если кто забыл: Rust — это язык программирования общего назначения, который обладает средствами, позволяющими строить надёжное и эффективное программное обеспечение. Rust может быть использован в любой области: от ядра вашей операционной системы до вашего следующего web-приложения. Этот язык полностью построен участниками открытого многоликого сообщества, в основном волонтёрами, кто щедро делился своим временем и знаниями для того, чтобы помочь сделать Rust таким, какой он есть сейчас.
kstep;Пиши на Rust — запускай везде. Взаимодействие Rust и C;https://habr.com/ru/post/257687/;"Предлагаю читателям «Хабрахабра» перевод поста «Rust Once, Run Everywhere» из блога Rust за авторством Alex Crichton. Сам я некоторое время уже интересуюсь этим языком, а в связи со скорым релизом версии 1.0 хотел бы продвигать его по своим скромным возможностям. Ничего своего, к сожалению, сейчас у меня написать не получается, но когда-то я занимался переводами, так что решил вспомнить давнее дело. Перевод этого поста на Хабре я не нашёл, так что решил сделать свой. Некоторые термины, которые обозначают уникальные для Rust-а концепции (ownership, borrowing, lifetime parameter), я не знал, как лучше перевести на русский, так что постарался подобрать наиболее подходящие по смыслу и более-менее понятные для русскоязычной аудитории слова. Любые предложения-улучшения принимаются.  Никогда не было планов добиться мирового господства Rust-а за одну ночь, так что есть большая потребность в способности взаимодействовать с уже сущестующим кодом так же легко, как и с нативный кодом на самом Rust-е. Именно поэтому Rust даёт возможность очень просто использовать C API без накладных расходов, и при этом гарантирует строгую безопасность управления памятью, благодаря своей системе управления владением и заимствованием указателей. "
ph_piter;Rust, дисциплинирующий язык программирования;https://habr.com/ru/company/piter/blog/267203/;"Здравствуйте, уважаемые читатели!  Жизнь не стоит на месте, и вот в «O'Reilly» задумались об издании первой фундаментальной книги о языке программирования Rust:    Заинтересовавшись этой темой, мы решили вынести на обсуждение перевод обзорной статьи о языке Rust, вышедшей в декабре 2014 года. Статья немного сокращена с учетом того, что некоторые ее отрывки уже устарели, однако автор хорошо рассматривает этот язык в контексте существующих альтернатив, подчеркивает его (безусловные) достоинства и (условные) недостатки.   Впрочем, чтобы было еще интереснее, оставим в комментарии к этой статье ссылку на другую статью о Rust, опубликованную в одном из наших любимых русскоязычных блогов по программированию. Для начала — заходите под кат.  "
Gorthauer87;Сравниваем Swift и Rust;https://habr.com/ru/post/272681/;" Поводом для написания статьи стала публикация исходного кода языка Swift — мне стало интересно поближе познакомиться с ним. В глаза сразу же бросилась схожесть синтаксиса с другим молодым языком программирования под названием Rust, к тому же за схожими синтаксическими конструкциями просматривалась и схожая область применения этих языков. Оба языка имеют сильную статическую типизацию с локальным выводом типов, оба компилируются напрямую в машинный код. И тот и другой языки впитали в себя многие приемы из мира функционального программирования. И Swift и Rust имеют средства для запуска кода, написанного на C, что позволяет без труда писать обертки над огромным количеством библиотек. Оба языка рассматриваются как замена существующим системным языкам типа C, C++, ObjectiveC. Так что же в них общего, а что различается? "
ozkriff;Rust новости #5 (январь 2019);https://habr.com/ru/post/439354/;"Предлагаю вашему вниманию субъективную подборку ржавых новостей за январь. В этой подборке: Rust 1.32, уход Стива Клабника и Ника Камерона, киш от Cloudflare, устройство rust-analyzer и страничной памяти, поиски GUI и async, Oxydyze конференция для встроенщиков.  Rust 1.32 Вышел Rust 1.32. По сравнению с масштабным прошлым выпуском, на котором было сконцентрировано множество сил всего сообщества, тут серьезных нововведений не очень много:  Новый вспомогательный макрос для отладки dbg!; По умолчанию убран jemalloc. Стабилизированы ""единообразные пути"" (""uniform paths"")  Подробности в переводе новости. Стив Клабник и Ник Камерон уходят из Mozilla  Печальные новости: Стив Клабник и Ник ""nrc"" Камерон покидают Мозиллу."
freecoder_xx;Так ли токсичен синтаксис Rust?;https://habr.com/ru/post/532660/;"fn main() {   println!(""Hello, Rust!"");   println!(""... Goodbye!""); } Синтаксис — это первое, на что обращают внимание разработчики, впервые столкнувшись с кодом на Rust. И сложно найти что-то другое, что вызывало бы больше негодования у новичков, и при этом такое, к чему совершенно спокойно относятся уже ""понюхавшие пороха"" Rust-программисты. Посмотрите, например, сколько эмоций вызывает синтаксис Rust у комментаторов одной из типичных новостей про Rust на OpenNET:"
syakupov;Запускаем Rust-приложение на мобильной ОС Аврора;https://habr.com/ru/company/croc/blog/544900/;"Всем привет! Меня зовут Шамиль, я ведущий инженер-разработчик в КРОК. Помимо всего прочего мы в компании занимаемся ещё и разработкой мобильных приложений для операционной системы Аврора, есть даже центр компетенций по ней.Для промышленной разработки мы, конечно же, пока используем связку C++ и QML, но однажды подсев на ""ржавую"" иглу Rust, я не мог не попробовать применить свой любимый язык программирования для написания мобильных приложений. В этой статье я опишу эксперимент по написанию простейшего приложения на Rust, предназначенного для запуска на мобильном устройстве под управлением вышеупомянутой ОС. Сразу оговорюсь, что легких путей я не искал – эксперименты проводил на сертифицированной версии Авроры, которая добавила огонька в этот процесс. Но, как говорится, только защищённая ОС, только хардкор.Пара выходных у меня ушла только на то, чтобы запустить минимальное консольное приложение (речь о нём пойдёт в первой части), ещё пара дней – на эксперименты с графическим интерфейсом, выбор оптимального подхода и запуск приложения с GUI (этому посвящена вторая часть повествования). В итоге получился минимальный “скелет” мобильного приложения, готового к сборке и запуску, на который при желании уже можно наращивать “мясо”."
Kels;Почему вы должны попробовать Rust;https://habr.com/ru/company/huawei/blog/548808/;"Это ознакомительная статья о языке программирования Rust и его инструментах, с помощью которой я надеюсь привлечь ваше внимание к этому интересному и уникальному языку, созданному чтобы дать ответ на следующие вопросы разработчиков:Как убедиться, что в моем приложении нет проблем и уязвимостей, связанных с неправильной работой с памятью? Как быть уверенным в том, что любой доступ к общим объектам правильно защищен? Как свести к минимуму любую работу, не связанную напрямую с написанием кода?Цель данной статьи не рассказать о доселе невиданных возможностях Rust (сразу говорю, что тут ничего нового ""Растоманы"" не найдут), на Хабре вы итак найдете множество интересных статей о внутренностях языка и интересных случаев использования. Моя цель рассказать о том, что он предлагает в качестве решения обозначенных выше проблем, как это будет выглядеть со стороны программиста, и почему это важно."
BkmzSpb;extendr: вызываем rust из R (и наоборот);https://habr.com/ru/post/554176/;R, как и большинство подобных ему высокоуровневых скриптовых языков, часто полагается на код, написанный на более низкоуровневом языке. Библиотеки R - пакеты (packages) - нередко содержат код, написанный на C, C++ или FORTRAN. Нативный код позволяет обойти различные ограничения (например, однопоточность) и ускорить выполнение сложных алгоритмов за счет оптимизаций, попросту недоступных из самого R. Вся эта вычислительная мощь, тем не менее, получает удобный и совместимый с другими инструментами интерфейс на стороне R. Разработка пакетов с C/ C++ кодом давно налажена благодаря сторонним библиотекам, включая {usethis}, {devtools}, {pkgbuild}, {cpp11}  и т.д. Но что насчет других низкоуровневых языков? Ведь R всего-навсего динамически подгружает и вызывает библиотеки, поэтому если соблюсти все необходимые условия, можно, например, создать пакет с кодом, написанном на Rust.  Несмотря на то, что на практике это действительно работает, разработка, поддержка и внедрение таких инструментов - довольно трудоемкий процесс. Точнее был трудоемким до этого момента.Enter extendr, проект, который позволяет соединить R и Rust и с легкостью интегрировать Rust код в пакеты R, одновременно предоставляя возможность хостить R сессию в Rust.  extendr находится в разработке довольно давно (больше полугода активной фазы) и представляет собой MVP (minimum viable product), но до сих пор был обделен вниманием. Rust-крейт уже какое-то время доступен на crates.io, а R-пакет ожидает проверки на CRAN.extendr  - отличный способ наладить взаимодействие между разработчиками, пишущими на Rust и R. Если вы знаете один из языков и хотели бы познакомиться со вторым, или же хотите портировать свои R-пакеты с проблематичных C/ C++  на модный Rust,  добро пожаловать под cut.
Googolplex;Многопоточность в Rust;https://habr.com/ru/post/256211/;"Rust начинался как проект, решающий две трудные проблемы:   Как обеспечить безопасность (работы с памятью) в системном программировании? Как сделать многопоточное программирование безболезненным?  Изначально эти проблемы казались не связанными друг с другом, но к нашему удивлению, их решение оказалось одинаковым — проблемы с многопоточностью решают те же самые инструменты, которые обеспечивают безопасность.  Ошибки работы с памятью и ошибки при работе с несколькими потоками частно сводятся к тому, что код обращается к некоторым данным вопреки тому, что он не должен этого делать. Секретное оружие Rust против этого — концепция владения данными, способ управления доступом к данным, которого системные программисты стараются придерживаться самостоятельно, но который Rust проверяет статически.  С точки зрения безопасности работы с памятью это означает, что вы можете не использовать сборщик мусора и в то же время не опасаться сегфолтов, потому что Rust не даст вам совершить ошибку.  С точки зрения многопоточности это означает, что вы можете пользоваться различными парадигмами (передача сообщений, разделяемое состояние, lock-free-структуры данных, чистое функциональное программирование), и Rust позволит избежать наиболее распространённых подводных камней.  Вот какие особенности у многопоточного программирования в Rust: "
divan0;RustGo: вызов Rust из Go с почти нулевым оверхедом;https://habr.com/ru/post/337348/;В Go есть хорошая поддержка вызова ассемблерных функций, и большое количество очень быстрого криптографического кода в стандартной библиотеке это, на самом деле, хорошо оптимизированный ассемблер, дающий более чем 20-кратный прирост в скорости. Но писать код на ассемблере, всё же, сложно, анализировать его ещё сложнее, а криптография ошибок не прощает. Разве не было бы замечательно иметь возможность писать эти функции на каком-нибудь более высокоуровневом языке? Этот пост о слегка неадекватном эксперименте по вызову Rust кода из Go в попытке сделать это настолько быстро, чтобы могло сравнится с вызовом ассемблера. Вам не нужно знать Rust или про внутренности компилятора, достаточно понимать, что такое линкер.
alinatestova;Краткая история Rust: от хобби до самого популярного ЯП по данным StackOverflow;https://habr.com/ru/company/bitfury/blog/349786/;"Rust — это язык системного программирования, создатели которого уделили внимание трем вещам: параллелизму, скорости и безопасности. И хотя Rust считается молодым языком программирования — его первая стабильная версия вышла в 2015 году — он разрабатывается уже более десяти лет.  Сегодня мы бы хотели заглянуть в прошлое и рассказать историю языка Rust, показать, как изменились его функции и возможности за время разработки и привести конкретные примеры внедрения этого ЯП на практике.   "
ozkriff;Новости Rust #2 (октябрь 2018);https://habr.com/ru/post/429038/;" Лучше с задержкой на неделю, чем никогда, так что предлагаю вашему вниманию субъективную подборку ржавых новостей за октябрь. В этой подборке: Rust 1.30, Rust 2018, конференция RustRush, Amethyst 0.9, сквотинг crates.io, сборщик мусора, споры про 2D графику, Non-lexical lifetimes, функциональный GUI. Rust 1.30 и тестирование Rust2018 Вышел Rust 1.30 (обсуждение). Основные нововведения — частичная стабилизация процедурных макросов, импорт макросов через обычный use, улучшение системы модулей, ""сырые"" идентификаторы и поддержка no_std приложений (подробнее в хабропереводе). Rust 1.31 будет первым выпуском редакции (edition) ""Rust2018"" (что за ""редакции""?), в связи с чем всех желающих приглашают подключаться к тестированию бета версии 1.31 и cargo fix. RustRush 2018: конференция 15-16 декабря в Москве RustRush 2018 — конференция для разработчиков на Rust, посвящённая вебу, блокчейну, высокой производительности и системному программированию. Обновился сайт (rustrush.ru) — опубликован почти полный список докладчиков и программа, начата продажа основной партии билетов. Будут четыре участника проекта Rust Language: Стив Клабник, Эшли Уильямс, Паскаль Хертлиф, Катарина Фей. Из других звёзд локальных и не очень — Максим Лапшин с прошивкой IP-камеры, Костя Степанов и Пьер Кригер aka tomaka. Программа."
freecoder_xx;Выпуск Rust 1.31 и Rust 2018;https://habr.com/ru/post/432640/;"Команда разработчиков Rust рада сообщить о выпуске новой версии Rust, 1.31.0, а также ""Rust 2018"". Rust — это язык программирования, который дает возможность каждому создавать надежное и эффективное программное обеспечение. Если у вас установлена предыдущая версия Rust с помощью rustup, то для обновления Rust до версии 1.31.0 вам достаточно выполнить: $ rustup update stable Если у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.31.0 можно ознакомиться на GitHub. Что вошло в стабильную версию 1.31.0 Rust 1.31, возможно, самый значительный выпуск со времен Rust 1.0! В данный выпуск включена первая итерация «Rust 2018», но это не единственное нововведение! Обзор улучшений будет длинный, поэтому вот оглавление:  Rust 2018  Нелексические времена жизни Изменения системы модулей  Дополнительные правила вывода времен жизни const fn Новые инструменты Инструментальные проверки качества кода Документация Предметные рабочие группы Новый веб-сайт Стабилизация стандартной библиотеки Улучшения в Cargo Разработчики выпуска "
blandger;Rust для Java разработчиков;https://habr.com/ru/post/501356/;Представляю перевод статьи автора Evan Cameron, которая может помочь Java разработчикам лучше понять отличия и схожесть этих двух языков — оригинал на сайте автора. Не считая себя достаточно опытным Rust разработчиком, я вряд ли смогу аргументированно участвовать в возможных дискуссиях.
freecoder_xx;Что делает Rust универсальным языком программирования;https://habr.com/ru/post/504622/; Долгое время Rust позиционировался исключительно как язык для системного программирования. Попытки использовать Rust для высокоуровневых прикладных задач зачастую вызывали усмешку у значительной части сообщества: зачем использовать инструмент в том качестве, на которое он не рассчитан? Какая польза от возни с типами и анализатором заимствований (borrow checker), если есть Python и Java со сборкой мусора? Но другая часть сообщества всегда видела потенциал Rust именно как языка прикладного, и даже находила его удобным в использовании для быстрого прототипирования — во многом благодаря его особенностям, а не вопреки им.
AnthonyMikh;Распространённые заблуждения о временах жизни в Rust;https://habr.com/ru/post/515034/;(прим. переводчика: времена жизни (lifetimes) — это одна из самых запутанных вещей в Rust, которая часто вызывает затруднение у новичков, даже несмотря на официальную документацию. Разъяснения по отдельным аспектам времён жизни есть, но они все разбросаны по разным источникам и ответам на Stack Overflow. Автор статьи собрал в одном месте и разъяснил множество связанных с временами жизни вопросов, что и делает эту статью столь ценной (я и сам почерпнул новое для себя отсюда). Я решил перевести её, чтобы дать возможность прочитать её тем, кто не владеет английским в достаточной степени, чтобы свободно читать оригинал, а также для того, чтобы повысить известность этой статьи среди русскоязычного Rust-сообщества) 19 мая 2020 г. · 37 минут · #rust · # lifetimes
Nurked;Ржавеем дальше. Как появился Rust и можно ли на нём WEB?;https://habr.com/ru/post/538970/;Моя предыдущая статья про rust вызвала положительную реакцию и большое количество обсуждений о том что да как с rust. Мне исключительно приятно видеть что вам понравился этот материал. В комментариях я встретил много вопросов типа «А можно ли использовать rust для WEB?» Лаконичный ответ таков: «Можно». Можно и brainfuck использовать, если хочется. Нужно ли? Скажем так, brainfuck для WEB использовать категорически не стоит. А вот rust – тут надо понимать что именно делает rust и каковы его цели. Для того чтобы это понять мы должны погрузиться в компилятор и разобраться в устройстве процессоров. Под катом вы найдёте глубокий заныр в историю того как появился rust и поймёте что это такое и когда его нужно использовать а когда можно и на «ноде запилить». 
Siemargl;Почему я переписал прошивку для клавиатуры с Rust на Zig: слаженность, мастерство и развлечение;https://habr.com/ru/post/548854/;Последний год я собирал различные клавиатуры, что включает в себя и написание прошивок под различные управляющие схемы.Первоначально, я писал их на Rust, но несмотря на годы опыта разработки на нем, приходилось повоевать. Со временем, я заставил мои клавиатуры работать, но это заняло неприличное количество времени и не приносило мне удовольствия.После неоднократных предложений от моего более подкованного в Rust-и-вычислительной технике друга Джейми Брэндона, я переписал прошивку на Zig, и вышло очень удачно.Я нашел это поразительным, учитывая, что я никогда не видел Zig раньше, и этот язык, еще даже не версии 1.0, созданный хипстером из Университета Портленда, и описывается, по сути, всего одной страницей документации.
S_ILya;Rust в ядре Linux;https://habr.com/ru/company/macloud/blog/562510/;"  В более ранней публикации  компания Google объявила, что в Android теперь поддерживается язык программирования Rust, применяемый в разработке этой ОС как таковой. В связи с этим авторы данной публикации также решили оценить, насколько язык Rust востребован в разработке ядра Linux. В этом посте на нескольких простых примерах рассмотрены технические аспекты этой работы.  На протяжении почти полувека C оставался основным языком для разработки ядер, так как C обеспечивает такую степень управляемости и такую предсказуемую производительность, какие и требуются в столь критичном компоненте. Плотность багов, связанных с безопасностью памяти, в ядре Linux обычно весьма низка, поскольку код очень качественный, ревью кода соответствует строгим стандартам, а также в нем тщательно реализуются предохранительные механизмы. Тем не менее, баги, связанные с безопасностью памяти, все равно регулярно возникают. В Android уязвимости ядра обычно считаются серьезным изъяном, так как иногда позволяют обходить модель безопасности в силу того, что ядро работает в привилегированном режиме."
kaapython;Ключевые возможности Rust;https://habr.com/ru/post/191916/;"Rust — новый язык программирования, разрабатываемый корпорацией Mozilla. Главная цель разработчиков — создание безопасного практичного языка для параллельных вычислений. Первая версия языка была написана Грэйдоном Хором в 2006 году, а в 2009 году к разработке подключилась Mozilla. С тех пор изменения претерпел и сам компилятор, изначально написанный на OCaml: он был успешно переписан на Rust с использованием LLVM в качестве back-end.   Основным продуктом, разрабатываемым на Rust, является новый веб-движок Servo, разработка которого также ведется Mozilla. В 2013 году к разработке Rust и Servo присоединилась корпорация Samsung Electronics, при активном участии которой код движка Servo был портирован на ARM архитектуру. Поддержка языка столь серьезными игроками IT индустрии не может не радовать и дает надежду на его дальнейшее активное развитие и совершенствование.  Язык Rust просто не может не понравится системным и сетевым разработчикам, тем, кому по работе приходится писать много кода, производительность которого критична, на C и C++, потому что:  Rust ориентирован на разработку безопасных приложений. Сюда входит безопасная работа с памятью: отсутствие null-указателей, контроль за использованием не инициализированных и деинициализированных переменных; невозможность совместного использования разделяемых состояний несколькими задачами; статический анализ времени жизни указателей. Rust ориентирован на разработку параллельных приложений. В нем реализована поддержка легких (зеленых) потоков, асинхронного обмена сообщениями без копирования пересылаемых данных, возможность выбора размещения объектов на стеке, в локальной куче задачи или куче, разделяемой между задачами. Rust ориентирован на разработку эффективных по скорости и памяти приложений. Использование LLVM в качестве back-end позволяет производить компиляцию приложения в нативный код, а простой интерфейс взаимодействия с C кодом – легко использовать уже имеющиеся высокопроизводительные библиотеки. Rust ориентирован на разработку кросс-платформенных приложений. Компилятор официально поддерживается на платформах Windows, Linux и Mac OS X, при этом существуют порты на другие *NIX платформы, такие как FreeBSD. Также поддерживается и несколько архитектур процессоров: i386, x64 и ARM. Rust позволяет писать в разных стилях: объектно-ориентированном, функциональном, actor-based, императивном. Rust поддерживает уже существующие отладочные инструменты: GDB, Valgrind, Instruments.  "
StreetStrider;Почему ваша первая реализация FizzBuzz на Rust может не работать;https://habr.com/ru/post/240617/;"Полное оригинальное название статьи: «Why your first FizzBuzz implementation may not work: an exploration into some initially surprising but great parts of Rust (though you still might not like them)»  tl;dr;-версия: На первый взгляд некоторые аспекты Rust могут показаться странными и даже неудобными, однако, они оказываются весьма удачными для языка, который позиционируется как системный. Концепции владения (ownership) и времени жизни (lifetime) позволяют привнести в язык сильные статические гарантии и сделать программы на нём эффективными и безопасными, как по памяти, так и по времени.  Лицензия: CC-BY, автор Chris Morgan.  Почему ваша первая реализация FizzBuzz может не работать: исследование некоторых особенностей Rust, которые изначально шокируют, но в действительности являются его лучшими сторонами (хотя они всё равно могут вам не понравиться)FizzBuzz предполагается как простое задание для новичка, но в Rust присутствуют несколько подводных камней, о которых лучше знать. Эти подводные камни не являются проблемами Rust, а, скорее, отличиями от того, с чем знакомо большиство программистов, ограничениями, которые на первый взгляд могут показаться очень жёсткими, но в действительности дают громадные преимущества за малой ценой.   Rust это «подвижная мишень», тем не менее, язык становится стабильней. Код из статьи работает с версией 0.12. Если что-то сломается, пожалуйста, свяжитесь со мной. Касательно кода на Python, он будет работать как в двойке, так и в тройке."
scalavod;Сравниваем Nim и Rust;https://habr.com/ru/post/259993/;"Предлагаю читателям «Хабрахабра» перевод статьи «A Quick Comparison of Nim vs. Rust». Мои замечания будут выделены курсивом.  Rust и Nim — два новых языка программирования за развитием которых я слежу. Вскоре, после моего первого поста о Rust, вышел в свет Nim 0.10.2. Это побудило меня поближе познакомиться с Nim и, естественно, сравнить его с Rust.  В этом посте я собираюсь показать вам две простых программы написанных на Nim и Rust с грубым сравнением их времени выполнения и выскажу мои субъективные впечатления от программирования на этих языках.  "
defuz;Rust и парадокс Блаба;https://habr.com/ru/post/275801/;Несколько недель назад я наткнулся на сравнительный анализ Rust, D и Go от Андрея Александреску. Андрей, уважаемый член сообщества C++ и главный разработчик языка программирования D, нанес Rust сокрушительный удар под конец своего повествования, высказав нечто, что выглядит довольно проницательным наблюдением:  Чтение кода на Rust навевает шутки о том, как «друзья не позволяют друзьям пропускать день ног» и вызывает в голове комические образы мужчин с халкообразным торсом, балансирующим на тощих ногах. Rust ставит во главу угла безопасность и ювелирное обращение с памятью. В действительности, это довольно редко является настоящий проблемой, и такой подход превращает процесс мышления и написания кода в монотонный и скучный процесс.  После нескольких встреч с Андреем, увидев некоторые из его выступлений, я убедился, что он любит подшучивать. Тем не менее, давайте проглотим наживку. Эта шутка смешная только потому, что она выглядит смешной, или может быть потому, что в ней только доля шутки?
DarkEld3r;Rust и Swift (третья, четвёртая, пятая и шестая части);https://habr.com/ru/post/280902/;Продолжаю переводить цикл, в котором автор параллельно изучает Rust и Swift и сравнивает их между собой. Перевод вступления и первых двух частей вы можете найти тут. В этой части речь пойдёт о перегрузке операторов, манипуляциях со строками и коллекциях.  
DarkEld3r;man!(C => D => Rust);https://habr.com/ru/post/280904/;Предыдущую статью восприняли лучше, чем я ожидал, так что решился на продолжение эксперимента. Это своеобразный ответ на перевод статьи Programming in D for C Programmers за авторством Дмитрия aka  vintage. Как мне кажется, в области применения C Rust более уместен, чем замена Go, как предполагалось в прошлой статье. Тем интереснее будет сравнить. Опять таки, код на С приводить не буду, тем более что аналог на D всё равно смотрится лаконичнее.
northicewind;От JavaScript к Rust и обратно: рассказ о wasm-bindgen;https://habr.com/ru/post/353230/; Мы уже видели насколько WebAssembly быстро компилируется, ускоряет js библиотеки и генерирует более компактные бинарники. У нас даже есть общее представление как наладить взаимодействие не только между сообществами Rust и JavaScript, но и с сообществами других языков. В прошлой статье мы упоминали специальный инструмент wasm-bindgen и сейчас я бы хотел остановиться на нем более подробно.
ozkriff;Новости Rust #1 (Сентябрь 2018);https://habr.com/ru/post/425005/;" Мой комментарий к новости про Rust 1.28 с обзором ржавых событий за месяц неплохо зашел, так что вот держите очень субъективный срез ржавых новостей за прошлый месяц. В этой подборке: Rust 1.29, записи докладов с Rustconf 2018, gfx-rs, Rust2018, порт Flatbuffers, новые версии ripgrep и Alacritty. Rust 1.29 Вышел Rust 1.29. Основные нововведения — доступные сразу из rustup'а cargo fix и cargo clippy (подробнее в хабропереводе). Следом была выпущена версия 1.29.1, закрывшая ошибку в std::repeat (обсуждение). Rust 1.30 и 1.31 будут очень значительными.Точного списка пока нет, но ожидается что:  в 1.30 (2018.10.26) войдет частичная стабилизация процедурных макросов; в 1.31 (2018.12.07) войдут Rust 2018 + non-lexical lifetimes (NLL). "
ozkriff;Rust новости #4 (декабрь 2018);https://habr.com/ru/post/435614/;"Поскольку праздники кончились, предлагаю вашему вниманию субъективную подборку ржавых новостей за декабрь. В этой подборке: безумие с растом, страшен ли раст, волна пророчеств, Rust 2018, Rust Analyzer.  Rust 1.31 & Rust 2018 Самое важное событие декабря — выпуск Rust 1.31 и Rust 2018, конечно. Туда очень много всего вошло: редакция 2018, нелексические времена жизни, изменения системы модулей, дополнительные правила вывода времен жизни, const fn, новые инструменты, инструментальные проверки качества кода, документация, новый веб-сайт, улучшения в cargo.Изменений так много, что обзор всех не получилось запихнуть в один пост, так что через несколько дней были опубликованы вспомогательные заметки:  Procedural Macros in Rust 2018 (обсуждение) — о процедурных макросах; Tools in the 2018 edition (обсуждение) — о расширении инструментария;  Также, имеет смысл полистать мозиловский хорошо структурированный обзор/ликбез 2018й редакции языка: Rust 2018 is here… but what is it? (перевод, обсуждение)."
m1rko;Почему Discord переходит с Go на Rust;https://habr.com/ru/post/487116/;"  Rust становится первоклассным языком в самых разных областях. Мы в Discord успешно используем его и на серверной, и на клиентской стороне. Например, на стороне клиента в конвейере кодирования видео для Go Live, а на стороне сервера для функций Elixir NIF (Native Implemented Functions).  Недавно мы резко улучшили производительность одной службы, переписав её с Go на Rust. В этой статье объясним, почему для нас имело смысл переписать службу, как мы это сделали и насколько повысилась производительность."
KonstantinSmith;Опыт конвертирования кода C# в код Rust;https://habr.com/ru/post/515030/;Постановка задачи Код на языке C# нужно перевести в код на Rust. Точнее, требуется такая процедура перевода (разработка продолжается на C#), чтобы в любой момент можно было получить работающий код на Rust. Эту задачу я решал для языков Java, Python, JavaScript и PHP, написав конвертер из C# в эти языки. Концепция такого конвертирования была изложена в статье UniSharping пару лет назад. Я разрабатывал этот конвертер, чтобы переводить код своего проекта SDK Pullenti (лингвистический анализ текста). И подумалось мне: а не замахнуться ли на Rust? Да, слышал разные отзывы, что язык необычный и пр., но попытка же не пытка… Тем более, что у одного из заказчиков группа программистов увлечённо пишет на нём.
m1rko;Попробуем выдвинуть аргументы против Rust;https://habr.com/ru/post/520880/;"Недавно я прочитал статью c критикой Rust. Хотя в ней было много правильных вещей, она мне не понравилась — слишком многое там очень спорно. В целом, я вообще не могу рекомендовать к прочтению никакой статьи с критикой Rust. Это нехорошо, ведь важно обсуждать недостатки, а шельмование низкокачественной и неумелой критики, к сожалению, заставляет пропустить мимо внимания действительно хорошие аргументы.  Итак, попробую привести аргументы против Rust."
owlofmacloud;Как самый недооценённый контрибьютор спасал язык Rust от смерти;https://habr.com/ru/company/macloud/blog/556316/;" Дэйв Херман, самый недооценённый контрибьютор Rust  Автор оригинала — Брайан Андерсон. Он тоже имеет отношение к работе над языком Rust. Понятно, что в своей статье он будет хвалить этот язык, но важнее другое: он раскрывает внутреннюю кухню проекта. Андерсон рассказывает про первые несколько лет работы над Rust в стенах компании Mozilla. Он хочет восстановить справедливость, вспомнив выдающегося, но скромного ментора и инженера, который во многом решил судьбу проекта.   Я считаю, что язык Rust сейчас явно на подъёме. Вспоминаю, как много нужно было сделать правильно, чтобы достичь успеха. Команда неоднократно принимала судьбоносные решения, в которых не была полностью уверена. Каждое неверное решение могло привести проект к провалу. Иногда мы просто не знали правильный ответ. Но в каждой такой ситуации как будто происходило маленькое чудо, и проект двигался дальше. Конечно же, эти «чудеса» происходили не на пустом месте: нас выручала интуиция нескольких очень опытных профессионалов, которые горели проектом и действительно хотели создать что-то крутое.  В разное время над проектом работали многие. Но здесь речь пойдёт об одном из ключевых участников команды, который, на мой взгляд, был очень быстро и незаслуженно забыт.   Mozilla Research К 2009 году Mozilla получила крупную сумму денег от прибыльной сделки с Google (он стал поисковиком по умолчанию в браузере Firefox). И, насколько я понял, именно в этот момент руководство Mozilla решило вложить деньги в новые проекты."
RustLangRu;Планирование редакции Rust 2021;https://habr.com/ru/post/557460/;"Мы рады объявить третью редакцию языка Rust — Rust 2021, которая выйдет в октябре. Rust 2021 содержит несколько небольших изменений, которые, тем не менее, значительно улучшат удобство использования Rust. Что такое Редакция? Релиз Rust 1.0 установил ""стабильность без застоя"" как основное правило Rust. Начиная с релиза 1.0, это правило звучало так: выпустив функцию в стабильной версии, мы обязуемся поддерживать её во всех будущих выпусках. Однако есть случаи, когда возможность вносить небольшие изменения в язык бывает полезной — даже если у них нет обратной совместимости. Самый очевидный пример — введение нового ключевого слова, которое делает недействительными переменные с тем же именем. Например, в первой версии Rust не было ключевых слов async и await. Внезапное изменение этих слов на ключевые слова в более поздних версиях привело бы к тому, что, например код let async = 1; перестал работать. Редакции — механизм, который мы используем для решения этой проблемы. Когда мы хотим выпустить функцию без обратной совместимости, мы делаем её частью новой редакции Rust. Редакции опциональны и должны прописываться явно, поэтому существующие пакеты не видят эти изменения, пока явно не перейдут на новую версию. Это означает, что даже последняя версия Rust по-прежнему не будет рассматривать async как ключевое слово, если не будет выбрана версия 2018 или более поздняя. Этот выбор делается для каждого пакета как части Cargo.toml. Новые пакеты, созданные cargo new, всегда настроены на использование последней стабильной редакции."
cepreu4habr;Пишем свой упрощенный OpenGL на Rust — часть 1 (рисуем линию);https://habr.com/ru/post/261629/;"Продолжение: Пишем свой упрощенный OpenGL на Rust — часть 2 (проволочный рендер).  Пишем свой упрощенный OpenGL на Rust — часть 3 (растеризатор)  Наверное, мало кто на хабре не в курсе, что такое Rust — новый язык программирования от Mozilla. Уже сейчас он привлекает много интереса, а недавно наконец вышла первая стабильная версия Rust 1.0, что знаменует собой стабилизацию языковых возможностей. Мне всегда импонировали системные ЯП, а уж идея системного языка, предлагающего безопасность превосходящую языки высокого уровня, заинтересовала еще больше. Захотелось новый язык попробовать в деле и, заодно, интересно провести время, программируя что-нибудь увлекательное. Пока думал, что бы такого на расте написать, вспомнился недавний цикл статей про компьютерную графику, который я лишь бегло просмотрел. А очень интересно было бы попробовать все-таки написать все эти красивости самостоятельно. Вот так и родилась идея этого хобби-проекта, а также данной статьи.  Поскольку в оригинальной статье тщательно разжевываются все нюансы, касающиеся программирования непосредственно графической составляющей, то я в своем цикле статей буду сосредотачиваться главным образом на том, что касается непосредственно Rust'а. Постараюсь описать те грабли, на которые довелось наткнуться, а также как решал возникающие проблемы. Расскажу о личных впечатлениях от знакомства с языком. И, конечно, упомяну список ресурсов, которыми пользовался при разработке. Итак, кому интересно, добро пожаловать под кат.  Предупреждение: статья написана с позиции новичка и описывает тупые ошибки новичка. Если вы профи раста, возможно, посмотрев на мои потуги, вы захотите меня больно огреть чем-нибудь тяжелым. В таком случае рекомендую воздержаться от ее чтения.   Here is the Rust, which i hope to get at the end. (игра слов, Rust по-английски «ржавчина») "
greedykid;Rust в деталях: пишем масштабируемый чат с нуля, часть 1;https://habr.com/ru/post/268609/;"Часть 1: Реализуем WebSocket. Введение. В этом цикле статей мы рассмотрим процесс создания масштабируемого чата, который будет работать в реальном времени. Целью данного обзора является пошаговое изучение основ быстро набирающего популярность языка программирования Rust на практике, с попутным охватом системных интерфейсов.  В первой части мы рассмотрим начальную настройку окружения и реализацию простейшего WebSocket-сервера. Чтобы понять технические детали статьи вам не потребуется опыта работы с языком Rust, хотя знание основ системных API (POSIX) и C/C++ лишним не будет. Прежде чем начинать чтение, заготовьте немного времени (и кофе) — статья описывает все максимально подробно и поэтому довольно длинная.  "
DarkEld3r;Rust и Swift (вступление, первая и вторая части);https://habr.com/ru/post/280274/;"От переводчика: решил взяться за перевод цикла, в котором автор параллельно изучает Rust и Swift и сравнивает их между собой. Старался сохранить стиль и манеру письма оригинала, хотя местами и позволял себе сократить текст (надеюсь) без потери смысла. Автор вначале кажется слишком предвзятым в сторону Rust, но потом его суждения становятся более взвешенными. Правда, сам я со Swift очень поверхностно знаком, а в Rust, хотелось бы думать, кое-что понимаю, так что тоже не являюсь беспристрастным в этом вопросе. Сравнение становится более интересным, начиная с четвёртой части, но, как говорится, из песни слова не выкинешь.  Rust и SwiftСравнивая два увлекательных, новых и, очевидно, (хотя и не всегда) похожих языка программирования. Предыстория Летом 2015 года я начал изучать Rust. Затем, в сентябре 2015, я взялся за Swift. На первый взгляд, сходство между двумя языками очевидно, и они достигли стабильной версии примерно в одно время: релиз Rust 1.0 состоялся в мае 2015, а релиз Swift 2.0 (который фактически похож на 1.0, поскольку 1.0 служил публичной бетой) — в июне 2015. Оба вдохновлялись такими языками, как Haskell, в то же время сохраняя С-подобный (на самом деле, конечно, ALGOL-подобный) синтаксис, более привычный многим разработчикам, на которых ориентированы эти языки.  Так что, когда я начал книгу про Swift, я не мог удержаться от сравнения. Хотя оба языка кажутся очень похожими, они также очень сильно различаются с точки зрения дизайна языка и стоящей за этим философии — и эти отличия очень интересны! "
DarkEld3r;man!(D => Rust).basics;https://habr.com/ru/post/280642/;"Просьба не воспринимать эту статью слишком серьёзно, переходить с D на Rust не призываю, просто после прочтения серии переводов за авторством Дмитрия aka  vintage, мне стало любопытно переписать примеры кода на Rust, тем более, что автор добавил этот язык в голосование. Мой основной рабочий инструмент — С++, хотя в последнее время активно интересуюсь Rust. За D несколько раз пытался взяться, но каждый раз что-то отталкивало. Ни в коем случае не хочу сказать, что это плохой язык, просто местами он ""слишком радикален"" для ""убийцы плюсов"", например, имеется GC (пусть и отключаемый), а в других местах наоборот слишком близок к С++ со всеми его неочевидными нюансами.  Самое забавное тут то, что после изучения Rust отношение к D несколько изменилось — в плане лаконичности и выразительности последний сильно выигрывает. Впрочем, ""явность"" Rust-сообщество наоборот считает преимуществом. По моим ощущениям, в Rust чаще руководствуются ""академической правильностью"", а в D более практичный подход. Что лучше — сложный вопрос, лично я и сам не всегда могу определиться.  Впрочем, это всё очень субъективно, так что давайте вместе посмотрим на код. Код на Go приводить не буду, при желании, можно посмотреть в оригинальной статье."
phillennium;Yew — Rust&WebAssembly-фреймворк для фронтенда;https://habr.com/ru/company/jugru/blog/422253/;Yew — аналог React и Elm, написанный полностью на Rust и компилируемый в честный WebAssembly. В статье Денис Колодин, разработчик Yew, рассказывает о том, как можно создать фреймворк без сборщика мусора, эффективно обеспечить immutable, без необходимости копирования состояния благодаря правилам владения данными Rust, и какие есть особенности при трансляции Rust в WebAssembly.    Пост подготовлен по материалам доклада Дениса на конференции HolyJS 2018 Piter. Под катом — видео и текстовая расшифровка доклада. 
freecoder_xx;10 неочевидных преимуществ использования Rust;https://habr.com/ru/post/430294/;Rust — это молодой и амбициозный язык для системного программирования. В нем реализовано автоматическое управление памятью без сборщика мусора и прочих накладных расходов времени исполнения. Кроме этого, в языке Rust используется семантика перемещения по умолчанию, имеются беспрецендентные правила обращения к изменяемым данным, а также учитываются времена жизни ссылок. Это позволяет ему гарантировать безопасность памяти и облегчает многопоточное программирование, ввиду отсутствия гонок данных.  Все это уже хорошо известно всем, кто хоть немного следит за развитием современных технологий программирования. Но что если вы не системный программист, да и многопоточного кода в ваших проектах не много, но вас все же привлекает производительность Rust'а. Получите ли вы какие-то дополнительные преимущества от его использования в прикладных задачах? Или все, что он вам даст дополнительно — это суровую борьбу с компилятором, который будет заставлять вас писать программу так, чтобы она неотступно следовала правилам языка по заимствованию и владению? В данной статье собран десяток неочевидных и особо не рекламируемых преимуществ использования Rust, которые, я надеюсь, помогут вам определиться с выбором этого языка для ваших проектов.
iskorotkov;Что значит unsafe в Rust?;https://habr.com/ru/post/460295/;"Привет, Хабр! Представляю вашему вниманию перевод статьи ""What Is Rust's unsafe?"" автора Nora Codes. Мне доводилось видеть много недопониманий относительно того, что значит ключевое слово unsafe для полезности и правильности языка Rust и его продвижения как ""безопасного языка системного программирования"". Правда намного сложнее, чем можно описать в коротком твите, к сожалению. Вот как я ее вижу. В целом, ключевое слово unsafe не выключает систему типов, которая поддерживает код на Rust корректным. Она только дает возможность использовать некоторые ""суперспособности"", такие как разыменование указателей. unsafe используется для реализации безопасных абстракций на основе фундаментально небезопасного мира, чтобы большая часть кода на Rust могла использовать эти абстракции и избегать небезопасного доступа к памяти."
m1rko;Как переписать код на Rust;https://habr.com/ru/post/511478/;"В предыдущей статье мы говорили о том, как избежать переписывания библиотеки на Rust, когда вам это не нужно. Но как насчёт тех случаев, когда это действительно необходимо?  В большинстве языков вам придётся переписывать всю библиотеку с нуля, а первые результаты появятся ближе к концу проекта. Такие порты, как правило, довольно дороги и подвержены ошибкам, а часто они выходят из строя на полпути. Джоэл Сполски гораздо лучше меня объясняет это в статье о том, почему полные переделки проектов — плохая идея.  Однако у Rust есть убийственная особенность, когда речь заходит о таких вещах. Он может вызывать код на языке С без накладных расходов (т. е. среда P/Invoke в C#), и он выставляет функции, которые можно использовать в C так же, как и любые другие функции на языке С. Это открывает дверь для альтернативного подхода:  Портировать библиотеки на Rust по одной функции."
ru_vds;Разработка инструмента командной строки: сравнение Go и Rust;https://habr.com/ru/company/ruvds/blog/515674/;"Эта статья посвящена разбору моего эксперимента по написанию небольшого инструмента командной строки с использованием двух языков, в программировании на которых у меня не особенно много опыта. Речь идёт о Go и Rust.    Если вам не терпится увидеть код и самостоятельно сравнить один вариант моей программы с другим — то вот репозиторий Go-варианта проекта, а вот — репозиторий его варианта, написанного на Rust."
blandger;Предпочитайте Rust вместо C/C++ для нового кода;https://habr.com/ru/post/520098/;2019-02-07  Когда использовать Rust Когда не использовать Rust Когда использовать C/C++ Ложные причины использования C/C++ Приложение: моя история с C/C++ Приложение: хор 
cbmw;Rust глазами Python-разработчика #2;https://habr.com/ru/company/rambler_and_co/blog/535234/;Снова привет! Мы – @cbmw и @AndreyErmilov, часть команды разработки «Рамблер/Медиа» (портал «Рамблер»). И это вторая часть наших размышлений по поводу сравнения Python и Rust (первая часть).В этой части мы затронем многопоточность, асинхронность, функциональную парадигму и попробуем сделать некоторые заключения, которые мы для себя определили.
Nurked;Погружаемся в логово ржавчины. Как работает компилятор rust;https://habr.com/ru/post/539796/;В моей предыдущей статье о rust я попытался рассказать об истории языка, и показать откуда он пришёл. В статье было сделано множество упрощений. Просто нереальное множество. Народу не понравилось. Но в опросе, в конце статьи вы сказали, что надо бы показать кишки компилятора. Ну что же, под катом вы найдёте разбор исходных кодов компилятора rust. Мы проследим путь программы, начиная из исходного файла, прямиком к бинарнику.
Bright_Translate;Юмористичный обзор Rust с перспективы JavaScript;https://habr.com/ru/company/ruvds/blog/562652/;" В этой статье я в несколько забавном ключе документирую кое-какие размышления о своем знакомстве с Rust с позиции прожженного энтузиаста JavaScript. Здесь вас ждет импровизированная прогулка по феодам Вестероса, встреча с Ланнистерами и даже замаскированный под остров корабль — занятные аналогии, которые можно провести с работой в этом языке."
DarkEld3r;Rust через его основополагающие принципы;https://habr.com/ru/post/280882/;"У меня есть несколько мыслей об изучении языков программирования.  Во-первых, мы подходим к этому неправильно. Я уверен, что вы испытывали такие же ощущения. Вы пытаетесь изучить новый язык и не совсем понимаете, как в нём всё устроено. Почему в одном месте используется один синтаксис, а в другом другой? Все эти странности раздражают, и в итоге мы возвращаемся к привычному языку.  Я считаю, что наше восприятие языков играет с нами злую шутку. Вспомните, как вы последний раз обсуждали новый язык. Кто-то упомянул о нём, а кто-то другой поинтересовался его скоростью, синтаксисом или имеющимся веб-фреймворком.  Это очень похоже на обсуждение автомобилей. Слышали о новом Ford Bratwurst? Насколько он быстр? Смогу ли я проехать на нём через озеро?  Когда мы похожим образом говорим о языках, то подразумеваем, что они взаимозаменяемы. Как машины. Если я знаю, как управлять Toyota Hamhock, значит смогу вести и Ford Bratwurst без каких-либо проблем. Разница только в скорости и приборной панели, не так ли?  Но представьте, как будет выглядеть PHP-автомобиль. А теперь вообразите, насколько будет отличаться автомобиль Lisp. Пересесть с одного на другой потребует гораздо большего, чем усвоить, какая кнопка управляет отоплением.  Машину легко поменять, потому что все они решают одну проблему, и у нас уже есть представление о том, каким должно быть это решение. Языки программирования, напротив, решают разные проблемы, и каждый из них выражает свою собственную философию касательно подхода к их устранению.  Синтаксис и скорость языка выражают его ключевые характеристики. Например, Ruby известен тем, что выше всего ценит ""комфорт разработчика"", и это повлияло на все его особенности. Java придаёт большое значение обратной совместимости, что также отразилось на языке.  Таким образом, моя следующая идея такова: лучше изучать язык через его ключевые особенности. Если мы поймём, почему в языке были приняты те или иные решения, будет проще понять, как именно он работает.  "
snuk182;Куча способов переиспользовать код в Rust;https://habr.com/ru/post/307616/;"Я нашел эту статью авторства Alexis Beingessner как наиболее понятное описание системы типов в Rust, и что с ними можно делать. Надеюсь, кому-нибудь этот перевод будет полезен. Не смотрите на то, что вначале описываются очевидные вещи — под конец можно утонуть. Статья огромная и скорее всего будет разобрана на главы. Переведено достаточно вольно. Авторский стиль сохранен. — прим.пер.  (статья написана о Rust 1.7 stable)  В системе типов Rust есть много всякого. Насколько я знаю, практически вся сложность этого всякого заключается в том, чтобы выразить программу в максимально обобщённом виде. Притом народ еще и требует большего! У меня всегда были проблемы с простым пониманием наиболее сложных вещей, потому этот пост скорее напоминалка самому себе. Но тем не менее, мне также нравится делать что-то, полезное другим, поэтому в данной статье также есть вещи, которые я вряд ли забуду, но о которых некоторые могут не знать.  В этой статье не будет исчерпывающего описания синтаксиса или общих деталей описываемых возможностей. Здесь рассказывается, почему происходит так или иначе, так как подобные вещи я всегда забываю. Если вы нашли эту статью в попытках выучить Rust полноценно, вам определенно стоит для начала ознакомиться с Книгой (оригинал вот — прим.пер.). В то же время я здесь буду уточнять некоторые произвольные теоретические аспекты того, что происходит. Скорее всего, в этой статье полно ошибок, и она не должна претендовать на звание официального руководства. Это просто сборник того, что я накопал за неделю, пока искал новую работу."
SharplEr;Concurrency паттерны в Rust из Java;https://habr.com/ru/post/337232/;Под катом находятся заметки, в которых расписано, как реализовать в Rust хитрые concurrency паттерны, которые я с легкостью пишу в Java, и в чем различие в подходах к concurrency у этих языков. Статья будет полезна и тем, кто переходит на Rust из C#, ведь у него аналогичная модель памяти. 
dmitryikh;Rust vs. C++ на алгоритмических задачах;https://habr.com/ru/post/344282/;"Не так давно я стал присматриваться к языку программирования Rust. Прочитав Rustbook, изучив код некоторых популярных проектов, я решил своими руками попробовать этот язык программирования и своими глазами оценить его преимущества и недостатки, его производительность и эко-систему.  Язык Rust позиционирует себя, как язык системного программирования, поэтому основным его vis-à-vis следует называть C/C++. Сравнивать же молодой и мультипарадигмальный Rust, который поддерживает множество современных конструкций программирования (таких, как итераторы, RAII и др.) с «голым» C я считаю не правильно. Поэтому в данной статье речь пойдет об сравнении с C++.  Чтобы сравнить код и производительность Rust и C++, я взял ряд алгоритмических задач, которые нашел в онлайн курсах по программированию и алгоритмам.  Статья построена следующим образом: в первой части я опишу основные плюсы и минусы, на которые я обратил внимание, работая с Rust. Во второй части я приведу краткое описание алгоритмических задач, которые были решены в Rust и C++, прокомментирую основные моменты реализации программ. В третьей части будет приведена таблица замера производительности программ на Rust и C++."
zharko_mi;Первые шаги по Rust;https://habr.com/ru/post/433302/; Всем привет. Недавно познакомился с новым для себя языком программирования Rust. Я заметил, что он отличается от других, с которыми мне до этого доводилось сталкиваться. Поэтому решил покопать глубже. Результатами и своими впечатлениями хочу поделиться:  Начну с главной, на мой взгляд, особенности Rust Опишу интересные детали синтаксиса Объясню, почему Rust, скорее всего, не захватит мир  Сразу поясню, что я около десяти лет пишу на Java, так что рассуждать буду со своей колокольни.
T_12;Решение японских кроссвордов c P̶y̶t̶h̶o̶̶n̶ Rust и WebAssembly;https://habr.com/ru/post/454586/;" Как сделать решатель (солвер) нонограмм на Python, переписать его на Rust, чтобы запускать прямо в браузере через WebAssembly. TL;DR "
Hirrolot;Опровергаем четыре стереотипа о языке программирования Rust;https://habr.com/ru/post/467901/;" Язык программирования Rust, начатый как хобби-проект, а впоследствии поддерживаемый корпорацией Mozilla, позволяет обычным программистам писать одновременно и безопасные, и быстрые системы: от калькуляторов до высоконагруженных серверов. За своё относительно короткое время существования данный язык уже успел обрасти стереотипами, четыре из которых я попытаюсь опровергнуть ниже. Могу пропустить некоторые моменты, дискуссии в комментариях приветствуются.  Rust — сложный язык программирования Rust — ещё один ""убийца C/C++"" Unsafe губит все гарантии, предоставляемые Rust Rust никогда не обгонит C/C++ по скорости "
pfemidi;Кросскомпиляция выполняемых файлов Rust для Windows из Linux;https://habr.com/ru/post/489874/;Наверное не будет уж очень удивительным если я тут, на IT площадке Хабра, скажу что я иногда балую себя программированием. Основная OS у меня Linux, но иногда приходится собирать исполняемые файлы и для Windows. И естественно что перегружаться в Windows только для сборки exe не особо хочется. С языками C и C++ проблем нет, давно существует кросскомпилятор MinGW, который прекрасно с этим справляется. Про Python и Java даже упоминать не стоит, кроссплатформенность в них изначально. Но в прошлом году я решил попробовать такой пока что новомодный язык, как Rust. При сборке исполняемого файла при помощи включённого в дистрибутив Rust пакетного менеджера cargo вроде как достаточно задать ключ --target, при помощи которого указать результирующий процессор, архитектуру и ABI и при сборке из Linux в результате получить exe, который будет являться стандартным исполняемым файлом для Windows. Но пытаясь так сделать: cargo build --target x86_64-pc-windows-gnu я получил только сообщения об ошибках линкера: error: linking with `gcc` failed: exit code: 1  [...]    = note: /usr/bin/ld: unrecognized option '--nxcompat'           /usr/bin/ld: use the --help option for usage information           collect2: error: ld returned 1 exit status  error: aborting due to previous error  error: could not compile `foobar`. Если кому интересно как я это поборол и теперь спокойно могу кросскомпилировать программы на Rust для Windows, не покидая Linux, добро пожаловать под кат.
AndreyErmilov;Rust глазами Python-разработчика;https://habr.com/ru/company/rambler_and_co/blog/533268/; Привет! Мы – часть команды разработки «Рамблер/Медиа» (портал «Рамблер»). На протяжении трех лет мы поддерживаем и развиваем несколько больших python-приложений. Чуть больше года назад перед нами встала задача написать еще одно большое приложение – API к основному хранилищу новостей, и мы сделали это на Rust.  В статье мы расскажем о том, что заставило нас отойти от привычного стека технологий, и покажем, какие плюсы по сравнению с Python есть у Rust. Мы не ответим на вопрос, почему выбор пал именно на Rust, а не Go, например, или на какой-либо другой язык. Также мы не будем сравнивать производительность Python- и Rust-приложений – эти темы достойны отдельного обсуждения. 
S_ILya;Какие изменения нужны языку Rust, чтобы писать асинхронный код стало проще;https://habr.com/ru/company/macloud/blog/564812/;" Асинхронное программирование — мощный инструмент. Но экосистема Rust продолжает активно развиваться, и пока язык далёк от идеала. В частности, по этой причине многие считают, что асинхронное программирование в Rust — это боль. Однако некоторые не только критикуют, но и предлагают. Среди таких людей автор данной статьи.   Здесь я расскажу о некоторых ранее предложенных идеях и свяжу их с новыми предложениями. Я проведу некий мысленный эксперимент и постараюсь ответить на вопрос «Что мы могли бы сделать с асинхронным программированием в Rust, если бы нам дали полный карт-бланш?».   Непродуманное внесение изменений в Rust может разрушить его. Поэтому всё нужно делать аккуратно, учитывая плюсы и минусы. Допускаю, что некоторые предложения могут вызвать негативную реакцию. Я отношусь к этому с пониманием и прошу читателя подойти к изучению этого материала максимально непредвзято.  Потоки vs Асинхронность Писать асинхронный код зачастую сложнее, чем просто использовать потоки. Но с потоками мы не можем получить выигрыш в производительности, так как они слишком прожорливые. В процессе переключения между разными потоками и обмена данными между ними возникает много накладных расходов. Даже поток, который сидит и ничего не делает, использует ценные системные ресурсы. Чаще всего, асинхронный код работает гораздо быстрее. Но не всегда:  Например, этот echo server написан с использованием потоков. Он работает быстрее своей асинхронной версии — для случая, когда количество одновременных подключений не превышает 100."
komissarex;Свежий взгляд на Rust;https://habr.com/ru/post/239067/;"Я программирую на Rust уже достаточно давно, но на самом деле это не имеет большого значения. Rust настолько динамичен, что стоит отвлечься на пару месяцев, и придётся писать уже на фактически другом языке. Однако одна вещь остаётся неизменной: вектор развития. С каждым обновлением, каждой модификацией язык становится всё лучше и лучше.  Изменениям всё еще не видно конца, но даже сейчас язык уже кажется более стабильным, чем несколько месяцев назад, и начинают появляться некоторые устойчивые шаблоны проектирования API. Я подумал, что настало время исследовать всё это поглубже и решил переписать мою библиотеку для redis. "
cepreu4habr;Пишем свой упрощенный OpenGL на Rust — часть 2 (проволочный рендер);https://habr.com/ru/post/261739/;"Итак, в продолжение предыдущей статьи пишу 2-ю часть, где мы попробуем добраться до того, чтобы написать проволочный рендер. Напоминаю, что цель этого цикла статей — написать сильно упрощенный аналог OpenGL на Rust. В качестве основы используется «Краткий курс компьютерной графики» от  haqreu, в своих же статьях я сосредоточиваюсь больше не на графике как таковой, а на особенностях реализации при помощи Rust: возникающие проблемы и их решения, личные впечатления, полезные ресурсы для изучающих Rust. Сама получившаяся программа не имеет особенной ценности, польза от этого дела в изучении нового перспективного ЯП и основ трехмерной графики. Наконец, это занятие довольно таки увлекательно.  Напоминаю также, что поскольку я не являюсь профессионалом ни в Rust ни в 3D-графике, а изучаю эти вещи прямо по ходу написания статьи, то в ней могут быть грубые ошибки и упущения, которые я, впрочем, рад исправить, если мне на них укажут в комментариях.   Машинка, которую мы получим в конце статьи "
kstep;ProDBG переходит на Rust;https://habr.com/ru/post/274767/;"Немного о ProDBG от переводчика и автора проекта  ProDBG — это новый дебаггер, который сейчас разрабатывает Daniel Collin. Одна из целей проекта — поддержка множества архитектур и операционных систем. Изначально пишется на C/C++, заложена поддержка плагинов. На данный момент находится на ранней стадии разработки, и в основном нацелен на MacOS. Далее передаю слово автору поста.  Как известно тем из вас, кто читает меня в Твиттере, я не очень люблю C++. У него свои обычные проблемы с заголовочными файлами, отстойными шаблонами, и так далее. И большая проблема — найти альтернативу. Я рассматривал вариант перейти на C#, но сделать так, чтобы он хорошо заработал на всех платформах, кажется очень сложной задачей (например, на данный момент поддержка x86 на Mac практически отсутствует). К тому же некоторым людям такой выбор будет не по вкусу.  Мне нравится (Common) Lisp. Я восхищаюсь устройством его макросов, в нём есть та элегантность, которая встречается не во всех языках. Однако он кажется каким-то чужеродным для многих людей, так что вкладывать в проект станет намного сложнее. К тому же я хочу по возможности использовать язык без сборщика мусора, и хотя Lisp можно сильно ускорить, сделать это не так уж просто. "
mkpankov;CoLaboratory: Rust — поговорим о Rust в «Лаборатории Касперского» 17 мая;https://habr.com/ru/post/283202/;" Регистрация. Rust — современный системный язык программирования с мощной системой типов. Он защищает от многих типичных ошибок программирования, таких как использование освобождённой памяти и гонки данных. Эти проблемы в Rust обнаруживаются сразу во время компиляции! При этом язык не использует сборку мусора — а значит, обладает предсказуемой производительностью, легко встраивается в другие языки и отлично подходит для встраиваемого программирования. На Rust можно писать надёжные, высокопроизводительные многопоточные программы. Год назад произошёл выпуск первой стабильной версии языка — Rust 1.0. С тех пор язык активно развивался. Ещё вчера про Rust никто не знал, а сегодня Dropbox переписал на нём ядро своей дисковой инфраструктуры. Вечером 17 мая мы соберёмся в московском офисе ""Лаборатории Касперского"", чтобы поговорить о теоретических и практических моментах использования Rust, его экосистеме и инструментах, поделиться опытом написания программ на нём, а также рассмотреть частые проблемы и способы их решения. Не пропустите! CoLaboratory: Rust — это шанс узнать о многообещающем языке программирования, который может вскоре заменить привычные инструменты, чьи позиции сейчас кажутся незыблемыми."
Halt;Черная магия метапрограммирования: как работают макросы в Rust 1.15;https://habr.com/ru/post/321620/;В прошлой статье мы познакомились с одной из самых интересных возможностей языка Rust — процедурными макросами.  Как и обещал, сегодня я расскажу о том, как писать такие макросы самостоятельно и в чем их принципиальное отличие от печально известных макросов препроцессора в C/C++. Но сначала пройдемся по релизу 1.15 и поговорим о других новшествах, поскольку для многих они оказались не менее востребованы.
build_your_web;Rust, Eclipse и STM32;https://habr.com/ru/post/324646/;"Для того, чтобы подружить между собой указанные в заголовке технологии нам понадобятся:   Свежий GNU ARM Embedded Toolchain System Workbench for STM32 (опционально)  Свежий Eclipse CDT GNU ARM Eclipse Plugin  Rust RustDT. Для комфортной разработки также рекомендуется установить Racer, Rainicorn и rustfmt.  Идея состоит в том, чтобы с скомпилировать написанную на Rust программу в библиотеку, которую можно будет слинковать с помощью тулчейна для ARM.  В итоге мы сможем даже вполне комфортно дебажить смешанный код на Rust и С. "
ozkriff;Выпуск Rust 1.17;https://habr.com/ru/post/327708/;Команда Rust рада представить выпуск Rust 1.17.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust, то для обновления достаточно выполнить: $ rustup update stable Если у вас ещё не установлен Rust, то вы можете установить rustup c соответствующей страницы нашего веб-сайта и ознакомиться с подробным примечанием к выпуску 1.17.0 на GitHub. Что вошло в стабильную версию 1.17.0 Выпуск Rust 1.17.0 в основном вносит небольшие улучшения, преимущественно касающиеся удобства использования. Например, время жизни 'static теперь автоматически подразумевается для констант или статических переменных. При создании константы или статической переменной: 
bmusin;Rust: Знакомимся с языком на примере «Угадай-ки»;https://habr.com/ru/post/349134/;Давайте познакомимся с Rust, поработав над маленьким проектом! Мы покажем основные концепты Rust на реальном примере. Вы узнаете о let, match, методах, ассоциированных функциях, подключении сторонних библиотек и много о чем другом. Мы реализуем классическую задачу: игра “угадай-ка”.
freecoder_xx;Выпуск Rust 1.26;https://habr.com/ru/post/358514/;"Команда разработчиков Rust рада сообщить о выпуске новой версии Rust: 1.26.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust с помощью rustup, то для обновления Rust до версии 1.26.0 вам достаточно выполнить: $ rustup update stable Если у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.26.0 можно ознакомиться на GitHub. Что вошло в стабильную версию 1.26.0 Последние несколько выпусков имели ряд относительно небольших улучшений. Тем не менее, мы продолжали работу над многими другими вещами и теперь они начинают выходить в стабильной версии. Версия 1.26, возможно, самая богатая нововведениями со времен выпуска Rust 1.0. Давайте их рассмотрим! Второе издание книги ""Язык программирования Rust"" Почти 18 месяцев Кэрол, Стив и другие работали над полной переработкой книги ""Язык программирования Rust"". С момента написания первой книги мы узнали много нового о том, как люди изучают Rust, так что новая версия книги теперь лучше во всех отношениях."
ru_vds;Разработка веб-приложения на Rust;https://habr.com/ru/company/ruvds/blog/416933/;Автор материала, перевод которого мы сегодня публикуем, говорит, что его самым свежим экспериментом в области архитектуры программных проектов стало создание рабочего веб-приложения с использованием исключительно языка Rust и с минимально возможным применением шаблонного кода. В этом материале он хочет поделиться с читателями тем, что он выяснил, разрабатывая приложение и отвечая на вопрос о том, готов ли уже Rust к применению его в различных сферах веб-разработки.  
m1rko;Последствия переписывания компонентов Firefox на Rust;https://habr.com/ru/post/445670/;"В прошлых статьях цикла мы обсудили безопасность памяти и безопасность потоков в Rust. В этой последней статье посмотрим на последствия реального применения Rust на примере проекта Quantum CSS.   Движок CSS применяет правила CSS на странице. Это нисходящий процесс, который спускается по дереву DOM, после расчёта родительского CSS дочерние стили можно вычислять независимо: идеальный вариант для параллельных вычислений. К 2017 году Mozilla предприняла две попытки распараллелить систему стилей с помощью C++. Обе провалились.  Разработка Quantum CSS началась, чтобы повысить производительность. Улучшение безопасности — просто удачный побочный эффект.  "
Hirrolot;Выпуск Rust 1.36.0: Трейт Future, стабилизация alloc и MaybeUninit<T>;https://habr.com/ru/post/458848/;Представляю вашему вниманию перевод публикации о новой версии всеми любимого языка программирования Rust. Введение Команда по разработке языка программирования Rust рада анонсировать новую версию, 1.36.0. Rust — это язык программирования, позволяющий каждому разрабатывать надёжное и быстрое ПО. Если предыдущую версию Rust вы установили средствами rustup, получение текущей версии не составит особого труда: $ rustup update stable Если у вас всё ещё нет rustup, вы можете получить его с соответствующей страницы на нашем сайте. Детальный обзор данного релиза доступен на GitHub.
andreevlex;Изучение комбинаторных парсеров с Rust;https://habr.com/ru/post/469213/;"Привет, Хабр! Представляю вашему вниманию перевод статьи ""Learning Parser Combinators With Rust"". Эта статья учит основам комбинаторных парсеров людей, которые уже знакомы с Rust. Предполагается, что никаких других знаний не требуется, а всё, что не имеет прямого отношения к Rust, а также некоторые неожиданные аспекты его использования, будут объяснены. Эта статья не поможет вам выучить Rust, если вы его ещё не знаете, и в этом случае, вы, вероятнее всего, не поймёте комбинаторные парсеры хорошо. Если вы хотите изучить Rust, я рекомендую книгу ""Язык программирования Rust""."
nemilya;Rust в Microsoft (или cоздание Security Daemon Azure IoT Edge);https://habr.com/ru/post/469961/;"  Примечание от переводчика: Rust относительно молодой язык программирования, и на этом этапе развития всегда интересны примеры практического применения. Известно, что Intel, Dropbox, Amazon, Facebook, Google и другие используют Rust в своих проектах. Про применение Rust в проекте от Microsoft было известно, но подробностей не было, и это вероятно первая официальная публикация про применение Rust в компании Microsoft. (технические детали по самому продукту приводятся «как есть», подробности уточняйте на сайте компании)  Azure IoT Edge — это кроссплатформенный программный проект с открытым исходным кодом, созданный группой разработчиков Azure IoT в Microsoft. Azure IoT Edge — “это служба Интернета вещей на основе Центра Интернета вещей. Эта служба предназначена для клиентов, которым необходимо анализировать данные не в облаке, а на пограничных устройствах. В результате перемещения части рабочей нагрузки в пограничную область устройства тратят меньше времени на отправку сообщений в облако и быстрее реагируют на события.” [взято из официальной русскоязычной документации (1) — прим. переводчика]  В этом посте объясняются некоторые причины, по которым мы выбрали Rust в качестве языка программирования для реализации компонента Security Daemon в продукте."
AlexSerbul;Rust для веб-разработчика — быстрый старт и стремительный полет;https://habr.com/ru/company/bitrix/blog/477342/;"Всем привет! Сегодня хочу поделиться опытом изучения языка и быстрой реализации высоконагруженного сетевого проекта, использующего так популярные и востребованные сейчас неблокирующие асинхронные сетевые соединения, на новом, красивом, элегантном и очень эффективном языке Rust. Особый упор в посте сделаю на быстрое и ясное объяснение возможностей языка и платформы специалистам, имеющим большой опыт в веб-разработке, ибо сам таким и являюсь. Существует заблуждение, что кривая вхождения в Rust — очень-очень крутая. Но я покажу, что это далеко не так. Наливаем кофе и погнали!"
RustLangRu;Закладывая фундамент будущего Rust;https://habr.com/ru/post/515712/;"Rust был задуман в 2010 (в зависимости от того, как вы считаете, можно сказать, что в 2006!) как проект в Mozilla Research, но его долгосрочной целью было создание самостоятельного проекта. В 2015, вместе с выпуском Rust 1.0, появилось управление, независимое от Mozilla. С тех пор Rust работает как автономная организация, а Mozilla выступает в качестве известного и постоянного финансового и юридического спонсора. Mozilla была и продолжает восторгаться от возможности широкого использования и поддержки языка Rust многими компаниями в отрасли. Сегодня многие компании, как крупные так и малые, используют Rust более разнообразными и значительными способами: от Amazon’s Firecracker до Fastly’s Lucet, в критических службах, которые ""снабжают энергией"" Discord, Cloudflare, Figma, 1Password и многие, многие другие. Во вторник, 11 августа 2020 года, Mozilla объявила о реструктуризации компании и увольнении около 250 сотрудников, включая активных участников Rust и Rust сообщества. Понятно, что эти увольнения породили множество путаницы и неуверенности в отношении Rust. Цель этого поста — решить эти проблемы. Также у нас есть важное объявление, о котором сказано дальше!"
Googolplex;На пути к Rust 1.0;https://habr.com/ru/post/237199/;"Эта статья — перевод первого поста в официальном блоге языка программирования Rust, разрабатываемого Mozilla. Первая стабильная версия Rust совсем не за горами (предварительный прогноз — конец этого/начало следующего года), и авторы языка собираются опубликовать несколько вводных статей о том, что же такое особенное Rust предлагает.  В этих статьях разработчики подробнее расскажут о ключевых особенностях языка — концепциях владения и заимствования данных, зачем они вообще нужны и какие задачи позволяют решать. Я постараюсь переводить их по мере выхода и надеюсь, что язык кого-нибудь заинтересует. Замечания к переводу прошу слать в личку.    Rust 1.0 уже в пути! Мы определились со списком фич и плотно заняты их реализацией. Наш план — выпустить бета-версию 1.0 в конце года. Если всё будет в порядке, то релиз 1.0 состоится вскоре после беты. Будущие версии в ветке 1.x будут обратно совместимыми, то есть существующий код будет ими компилироваться без изменений (естественно, за исключением багов в компиляторе).  Естественно, релиз 1.0 не означает только лишь стабилизацию («ваш код продожит компилироваться»); для нас он значит, что язык стал таким, каким мы хотим его видеть. Если ещё точнее, что он минимален. На данный момент язык выстроен вокруг простых базовых концепций, которые мы называем владением (ownership) и заимствованием (borrowing) (подробнее о них далее). Применяя эти концепции, всё остальное мы смогли вынести в библиотеки. Это очень здорово, потому что вы сами сможете написать аналогичные библиотеки. Из-за этого мы уверены, что Rust не только достигнет своих первоначальных целей, но и пойдёт дальше, применяясь в таких задачах, какие мы даже себе не представляли.  "
cepreu4habr;Пишем свой упрощенный OpenGL на Rust — часть 3 (растеризатор);https://habr.com/ru/post/262235/;"Продолжаю свой цикл статей про упрощенный аналог OpenGL на Rust, в котором уже вышло 2 статьи:   Пишем свой упрощенный OpenGL на Rust — часть 1 (рисуем линию)   Пишем свой упрощенный OpenGL на Rust — часть 2 (проволочный рендер)   Напоминаю, что основой моего цикла статей является «Краткий курс компьютерной графики» от  haqreu. В предыдущих статьях я шел не очень быстро. Фактически на одну статью курса у меня получилось 2 статьи. Это связанно с тем, что в своих статьях я сосредоточиваюсь главным образом на нюансах работы с Rust, а когда только изучаешь новый язык, сталкиваешься с большим количеством новых для тебя нюансов, нежели чем когда программируешь на нем уже некоторое время. Думаю дальше Rust будет подбрасывать меньше граблей, и я выровняю соотношение своих статей к статьям оригинального курса.  Пока же традиционно предостерегаю, что поскольку я не являюсь профессионалом ни в Rust ни в 3D-графике, а изучаю эти вещи прямо по ходу написания статьи, то в ней может быть немало глупостей. Если замечаете такое, пишите комментарий — я поправлю ошибку. Ну и конечно в статье будет немало личных впечатлений, с которыми вы можете оказаться несогласными. Конструктивная критика приветствуется.   То, что мы получим по итогам данной статьи "
gearbox;Neon: Node + Rust;https://habr.com/ru/post/277453/;"Предлагаю вашему вниманию перевод статьи ""Neon: Node + Rust"".  Javascript программистам, которых заинтриговала rust-овская тема бесстрашного программирования (сделать системное [низкоуровневое] программирование безопасным и прикольным), но при этом ждущих вдохновений или волшебных пендалей — их есть у меня! Я тут поработал немного над Neon — набором API и тулзов, которые делают реально легким процесс написания нативных расширений под Node на Rust.  TL;DR:  Neon — это API для создания быстрых, надежных нативных расширений Node на Rust Neon позволяет использовать параллелизм Rust-а с гарантированной потокобезопасностью Neon-cli позволяет легко и непринужденно создавать Neon проект и дает легкий старт… и наконец... проекту требуется помощь!  "
DarkEld3r;Установка Rust на Windows;https://habr.com/ru/post/280790/;"Вы можете установить Rust, просто скачав инсталлятор и дважды кликнув по нему. Хотя разработчикам, имеющим дело с более сложными инструментами, или тем, кому нужно собирать ""небезопасные"" (unsafe) C/C++ библиотеки из исходников, предстоит сделать немного больше. Тем не менее, если проявить немного упорства, разобраться в этом вполне реально.  Во время всего этого процесса следите за тем, что вы устанавливаете правильную версию библиотек: в данный момент для MSVC доступна только 64-битная версия Rust. Вы будете то и дело получать странные ошибки, если попробуете использовать 32-битные библиотеки. Поверьте мне.  Повторюсь: если вам нужен компилятор Rust, идите на официальный сайт и жмите ""Install"". Если же вы планируете работать с нативными C/C++ библиотеками, читайте дальше!"
alizar;Код Rust включен в Firefox 48;https://habr.com/ru/post/305536/;"Компонент, написанный на Rust, впервые заменил компонент на C++ в браузере Firefox, и это только начало!  Mozilla любит Rust Трудно поверить, что прошло почти семь лет с тех пор как Mozilla Research впервые начала спонсировать разработку Rust — системного языка программирования, нацеленного на безопасную работу с памятью, скорость и параллельное выполнение кода. В то время это был не более чем амбициозный исследовательский эксперимент, вокруг которого образовалось небольшое, но преданное сообщество. Удивительно, что несмотря на долгую историю изобретений и открытий, Rust сохранил свой ключевые принципы. Изначально разработчики хотели создать безопасную альтернативу C++, повысить эффективность системного программирования, защитить критическое программное обеспечение от эксплоитов памяти, упростить работу с параллельными алгоритмами — вот почему Mozilla поддержала проект Rust и, в конечном счёте, начала использовать Rust в стабильной версии браузера. "
vitvakatu;Выпуск Rust 1.18;https://habr.com/ru/post/330778/;Команда Rust рада представить выпуск Rust 1.18.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust, то для обновления достаточно выполнить: $ rustup update stable Если у вас ещё не установлен Rust, вы можете установить rustup c соответствующей страницы нашего веб-сайта и ознакомиться с подробным примечанием к выпуску 1.18.0 на GitHub.
bmusin;Rust: «Небезопасные абстракции»;https://habr.com/ru/post/346336/;"Ключевое слово unsafe является неотъемлемой частью дизайна языка Rust. Для тех кто не знаком с ним: unsafe — это ключевое слово, которое, говоря простым языком, является способом обойти проверку типов (type checking) Rust'а. Существование ключевого слова unsafe для многих поначалу является неожиданностью. В самом деле, разве то, что программы не ""падают"" от ошибок при работе с памятью, не является особенностью Rust? Если это так, то почему имеется легкий способ обойти систему типов? Это может показаться дефектом языка. Но не все так просто, детали — под катом."
freecoder_xx;Выпуск Rust 1.30;https://habr.com/ru/post/428073/;"Команда разработчиков Rust рада сообщить о выпуске новой версии Rust: 1.30.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust с помощью rustup, то для обновления Rust до версии 1.30.0 вам достаточно выполнить: $ rustup update stable Если у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.30.0 можно ознакомиться на GitHub. Что вошло в стабильную версию 1.30.0 Rust 1.30 — выдающийся выпуск с рядом важных нововведений. Но уже в понедельник в официальном блоге будет опубликована просьба проверить бета-версию Rust 1.31, которая станет первым релизом ""Rust 2018"". Дополнительную информацию об этом вы найдете в нашей предыдущей публикации ""What is Rust 2018"". Процедурные макросы Еще в Rust 1.15 мы добавили возможность определять ""пользовательские derive-макросы"". Например, с помощью serde_derive, вы можете объявить: #[derive(Serialize, Deserialize, Debug)] struct Pet {     name: String, } И конвертировать Pet в JSON и обратно в структуру, используя serde_json. Это возможно благодаря автоматическому выводу типажей Serialize и Deserialize с помощью процедурных макросов в serde_derive. Rust 1.30 расширяет функционал процедурных макросов, добавляя возможность определять еще два других типа макросов: ""атрибутные процедурные макросы"" и ""функциональные процедурные макросы""."
ph_piter;Мысли о Rust 2019;https://habr.com/ru/company/piter/blog/433910/;"Коллеги, доброго вечера всем!  Мы с радостью предлагаем вам перевод по-настоящему программной статьи от Рафа Левина, чей титанический труд над развитием языка Rust вызывает уважение и пиетет:    Без ложной скромности и без шапкозакидательства, предметно и увлеченно уважаемый автор откликнулся на призыв сообщества Rust, опубликованный по ссылке в начале этой статьи. Надеемся, получилось интересно и жизнеутверждающе. "
m1rko;Сравнение одинакового проекта в Rust, Haskell, C++, Python, Scala и OCaml;https://habr.com/ru/post/456638/;"В последнем семестре университета я выбрал курс компиляторов CS444. Там каждая группа из 1-3 человек должна была написать компилятор из существенного подмножества Java в x86. Язык на выбор группы. Это была редкая возможность сравнить реализации больших программ одинаковой функциональности, написанных очень компетентными программистами на разных языках, и сравнить разницу в дизайне и выборе языка. Такое сравнение породило массу интересных мыслей. Редко можно встретить такое контролируемое сравнение языков. Оно не идеально, но намного лучше, чем большинство субъективных историй, на которых основано мнение людей о языках программирования.  Мы сделали наш компилятор на Rust, и сначала я сравнил его с проектом команды на Haskell. Я ожидал, что их программа будет намного короче, но она оказалась того же размера или больше. То же самое для OCaml. Затем сравнил с компилятором на C++, и там вполне ожидаемо компилятор был примерно на 30% больше, в основном, из-за заголовков, отсутствия типов sum и сопоставлений с образцом. Следующее сравнение было с моей подругой, которая сделала компилятор самостоятельно на Python и использовала менее половины кода, по сравнению с нами, из-за мощности метапрограммирования и динамических типов. У другого товарища программа на Scala тоже была меньше нашей. Больше всего меня удивило сравнение с другой командой, которая тоже использовала Rust, но у них оказалось в три раза больше кода из-за разных дизайнерских решений. В конце концов, самая большая разница в количестве кода оказалась в пределах одного языка!"
PatientZero;Перенос Quake 3 на Rust;https://habr.com/ru/post/483142/;" Наша команда Immunant любит Rust и активно работает над C2Rust — фреймворком миграции, берущим на себя всю рутину миграции на Rust. Мы стремимся автоматически вносить в преобразованный код на Rust улучшения безопасности и помогать программисту делать это самому, когда не справляется фреймворк. Однако в первую очередь нам нужно создать надёжный транслятор, позволяющий пользователям приступить к работе с Rust. Тестирование на мелких CLI-программах потихоньку устаревает, поэтому мы решили перенести на Rust игру Quake 3. Спустя пару дней мы, скорее всего, стали первыми, кому удалось сыграть в Quake3 на Rust!  Подготовка: исходники Quake 3 Изучив исходный код оригинального Quake 3 и различных форков, мы остановились на ioquake3. Это созданный сообществом форк Quake 3, который до сих пор поддерживается и собирается на современных платформах. "
leporo;Почему Rust лидирует в TechEmpower Framework Benchmark;https://habr.com/ru/post/485452/;"Вообще-то смотреть какого цвета потроха у Rust я не собирался. Ковырнул хобби-проект на Go, пошел на GitHub посмотреть состояние fasthttp: развивается ли? Ну хотя бы поддерживается? Вспрокрастинулось. Пошел, посмотрел где fasthttp сидит в бенчмарках TechEmpower. Смотрю: а там fasthttp едва показывает половину того, что удаётся лидеру — какому-то actix на каком-то Rust. Какая боль. Здесь бы мне сложить ручки, стукнуть головой в пол (трижды) и закричать: ""Алилуйя, воистину Rust — истинный бог, как слеп я был раньше!"". Но то ли ручки не сложились, то ли лоб пожалел… Вместо этого полез в код тестов, написанных на Go и actix-web тестов на Rust. Чтобы разобраться. Через пару часов узнал:  почему Rust-фреймворк actix-web занимает первые позиции во всех тестах TechEmpower, как в Java заводится Script.  Сейчас всё расскажу по порядку."
RustLangRu;Выпуск Rust 1.41.0: новые гарантии для Box<T> в FFI, улучшения в cargo install, ослабление ограничений для типажей;https://habr.com/ru/post/486268/;Команда Rust рада сообщить о выпуске новой версии, 1.41.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.41.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что вошло в стабильную версию 1.41.0 Основными новшествами Rust 1.41.0 являются ослабление ограничений на реализацию типажей, улучшения cargo install, новый формат файла Cargo.lock более дружелюбный для работы с git, и новые гарантии для Box<T>, связанные с FFI. Смотрите подробности выпуска для дополнительной информации.
m1rko;Как я написал интро 4K на Rust — и оно победило;https://habr.com/ru/post/509942/;"Недавно я написал своё первое интро 4K на Rust и представил его на Nova 2020, где оно заняло первое место в конкурсе New School Intro Competition. Написать интро 4K довольно сложно. Это требует знания многих различных областей. Здесь я сосредоточусь на методах, как максимально сократить код Rust.   Можете просмотреть демо-версию на Youtube, скачать исполняемый файл на Pouet или получить исходный код с Github. "
kvark;Сравнение Rust и С++ на примерах;https://habr.com/ru/post/225003/;"Предисловие Вот и обещанное сравнение языков. Примеры, конечно, искуственные, так что используйте своё воображение, чтобы оценить масштабы угрозы в реальном мире.  Все C++ программы были собраны при помощи gcc-4.7.2 в режиме c++11, используя online compiler. Программы на Rust были собраны последней версией Rust (nightly, 0.11-pre), используя rust playpen.  Я знаю, что C++14 (и далее) будет залатывать слабые места языка, а также добавлять новые возможности. Размышления на тему того, как обратная совместимость мешает C++ достичь звёзд (и мешает ли), выходят за рамки данной статьи, однако мне будет интересно почитать Ваше экспертное мнение в комментариях. Также приветствуется любая информация о D.  "
stepancheg;Rust: как код может быть одновременно быстрым и безопасным. Рассказ Степана Кольцова в Яндексе;https://habr.com/ru/company/yandex/blog/235789/;"Привет. Меня зовут Степан Кольцов. Недавно я выступал на Java Party в киевском офисе Яндекса с докладом про язык Rust, который несёт в себе очень много для будущего программирования. Некоторые коллеги утверждают, что я всегда говорю про Rust, когда у меня есть такая возможность. Сегодня я хочу поделиться этим рассказом с вами и объяснить, почему мне это кажется важным.    Для начала пара слов о том, что такое Rust. Последние 15 лет между разработчиками на Java и на C++ ведётся спор о том, какой язык программирования хуже — Java или C++. Программы на C++ глючат, падают, и в них утекает память. Программы на Java тормозят и требуют слишком много памяти.  Rust — новый современный язык программирования, разрабатываемый компанией Mozilla — решает проблемы Java и C++: программы, написанные на Rust, одновременно быстрые и безопасные. Rust является таким же низкоуровневым (в смысле close-to-metal) языком программирования, как и C++, однако в язык встроены конструкции, позволяющие на этапе компиляции доказывать, что в программе не случатся ошибки работы с памятью, как то обращение после использования, двойное удаление, использование неинициализированной памяти и т.п. В Rust для этого используется механизм borrowed pointers. Большая часть моего рассказа была посвящена описанию этого механизма. "
Googolplex;Сопоставление с образцом, изменения и перемещения в Rust;https://habr.com/ru/post/256941/;"Одной из основных целей проекта Rust является безопасное системное программирование. Эта область обычно подразумевает императивную парадигму, что означает присутствие побочных эффектов, необходимость думать о разделяемом состоянии, и т.д. Для того, чтобы в таких условиях можно было обеспечить безопасность, программы и типы данных на Rust должны быть структурированы таким образом, чтобы их можно было статически проверить. Элементы и ограничения языка Rust совместно облегчают написание программ, проходящих эти проверки и, таким образом, обеспечивают безопасность. Например, в Rust глубоко интегрирована концепция владениям данными.  Выражение match — это специальная конструкция, в которой эти особенности и ограничения сочетаются интересным образом. match-выражение принимает входное значение, классифицирует его и затем передаёт выполнение коду, который обрабатывает соответствующий класс данных.  В этой статье мы рассмотрим, как работает match в Rust. Вот основные элементы, которые match и его дополнение, enum, объединяют в единое целое:  Структурное сопоставление с образцом: анализ вариантов и удобство использования гораздо лучше, чем при использовании switch в C или Java. Исчерпывающий анализ: match гарантирует, что ни один вариант не пропущен. match поддерживает и императивный, и функциональный стили: вы можете и дальше использовать оператор break, присваивания и прочее, и вам совершенно не нужно переучиваться на стиль, основанный на выражениях; match умеет как «заимствовать», так и «перемещать»: Rust поощряет программиста думать о владении и заимствовании данных. Выражение match спроектировано в том числе с возможностью только заимствования части структуры вместо её перемещения. Это нужно для того, чтобы не передать право владения какими-либо данными раньше, чем нужно.  Мы рассмотрим каждый из этих пунктов по отдельности ниже, но для начала нам следует заложить фундамент дальнейшего обсуждения — как match выглядит и работает?"
defuz;Обработка ошибок в Rust;https://habr.com/ru/post/270371/;Как и многие языки программирования, Rust призывает разработчика определенным способом обрабатывать ошибки. Вообще, существует два общих подхода обработки ошибок: с помощью исключений и через возвращаемые значения. И Rust предпочитает возвращаемые значения.  В этой статье мы намерены подробно изложить работу с ошибками в Rust. Более того, мы попробуем раз за разом погружаться в обработку ошибок с различных сторон, так что под конец у вас будет уверенное практическое представление о том, как все это сходится воедино.  В наивной реализации обработка ошибок в Rust может выглядеть многословной и раздражающей. Мы рассмотрим основные камни преткновения, а также продемонстрируем, как сделать обработку ошибок лаконичной и удобной, пользуясь стандартной библиотекой.
defuz;Rust в 2016 году;https://habr.com/ru/post/274757/;"2015 год был значительным годом для Rust: мы выпустили версию 1.0, стабилизировали большинство элементов языка и кучу библиотек, значительно выросли как сообщество, а также реорганизовали управление проектом. Может показаться что 2016 год не будет таким же интересным (будет трудно превзойти выпуск 1.0), но это будет супер-важный год для Rust, в котором произойдет много захватывающих вещей. В этой статье я расскажу о том, что, как я думаю, должно произойти. Это не официальная позиция и не обещание разработчиков Rust.  2015 Прежде чем мы поговорим о будущем, вот несколько цифр за прошлый год:  В 2015 году силами сообщества Rust:   Создано 331 предложение по улучшению языка (RFC) из которых 161 было принято и влито в основной репозиторий всего 120 человек подало RFC, из них 6 человек создало 10 и более, Alex Crichton создал 23 RFC  Создано 559 задач по улучшению RFC Прислано и влито в репозиторий Rust 4630 Pull-запросов авторами которых является 831 человек, из них 91 создали больше 10 запросов, 446 человек создали только один, а Steve Klabnik был автором 551 pull-запроса  Создано 4710 задач из которых 1611 еще открыты авторами которых является 1319 человек, из которых 79 создали больше 10, а Alex Crichton открыл всего 159 задач  Выпущено шесть стабильных релизов Rust (1.0 – 1.5) Поддерживается стабильность Rust – 96% пакетов, которые компилировались на 1.0, по прежнему компилируются с использованием версии 1.5 "
mkpankov;Анонс Rust 1.10;https://habr.com/ru/post/305486/;Мы рады представить новую версию Rust 1.10. Rust — это системный язык программирования, нацеленный на безопасную работу с памятью, скорость и параллельное выполнение кода. Как обычно, вы можете установить Rust 1.10 с соответствующей страницы официального сайта, а также ознакомиться с подробным списком изменений в этой версии на GitHub. В этот релиз вошло 1276 патчей. Что вошло в стабильную версию 1.10 В Rust 1.10 стала доступна одна из наиболее желаемых сообществом возможностей: прерывание работы (abort) при панике вместо размотки стека. Это поведение управляется флагом -C panic=abort или настройкой в Cargo.toml. Зачем это нужно? Как вы помните, паника означает непридвиденную проблему, и для многих приложений abort — разумный выбор. При использовании panic=abort генерируется меньше кода, что означает меньшие по объёму исполняемые файлы и чуть меньшее время компиляции. Очень приблизительная оценка говорит об уменьшении на 10% и размера файла, и времени компиляции. Эта возможность была определена в RFC 1513.
freetonik;Почему я отказался от Rust;https://habr.com/ru/post/309968/; Когда я узнал, что появился новый язык программирования системного уровня, с производительностью как у С++ и без сборщика мусора, я сразу заинтересовался. Мне нравится решать задачи с помощью языков со сборщиками мусора, вроде C# или JavaScript, но меня постоянно терзала мысль о сырой и грубой мощи С++. Но в С++ так много способов выстрелить себе в ногу и других хорошо известных проблем, что я обычно не решался. Так что я влез в Rust. И, блин, влез глубоко. Язык Rust все еще довольно молод, поэтому его экосистема пока находится в стадии начального развития. В некоторых случаях, например, в случае с вебсокетами или сериализацией есть хорошие и популярных решения. В других областях у Rust не все так хорошо. Одна из таких областей это OpenGL GUI, вроде CEGUI или nanogui. Я хотел помочь сообществу и языку, поэтому взялся за портирования nanogui на Rust, с кодом на чистом Rust, без связок с С/C++. Проект можно найти тут. Обычно, знакомство с Rust начинается с борьбы с идеей borrow-checker. Как и у других программистов, у меня тоже был период, когда я не мог понять, как решить ту или иную проблему. К счастью, есть классное сообщество в #rust-beginners. Его обитатели помогали мне и отвечали на мои дурацкие вопросы. Мне понадобилось несколько недель на то, чтобы почувствовать себя более-менее комфортно в Rust.  Но я не подозревал, что когда сталкиваешься с проблемой, поиск решения похож на ориентацию в джунглях. Часто находится несколько ответов, которые похожи на решение твоей проблемы, но не подходят из-за крохотной детали.
Hirrolot;Выпуск Rust 1.37.0: Profile-Guided Optimization, неименованные константы и cargo vendor;https://habr.com/ru/post/463823/;Представляем вашему вниманию перевод публикации о новой версии всеми любимого языка программирования Rust. Введение Команда разработчиков Rust рада сообщить о выпуске новой версии, 1.37.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.37.0 вам достаточно выполнить следующую команду: $ rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub.
Googolplex;Rust: абстракции и безопасность, совершенно бесплатно (видеозапись с выступления на митапе Saratov Open-IT);https://habr.com/ru/post/244537/;"Привет.  В прошлую субботу я выступал с докладом на очередном митапе Saratov Open-IT, где я рассказал про Rust — многообещающий системный язык программирования, разрабатываемый Mozilla Research и сообществом, и про то, какие проблемы он решает и какие у него есть особенности и инфраструктура. Надеюсь, что моё выступление будет интересно сообществу, поэтому выкладываю его здесь.  (видео не вставлено в пост через тег <video> потому что он не работает с конкретной временной меткой; длительность — примерно полтора часа) http://www.youtube.com/watch?v=lmauAUF823k#t=2583  "
DarkEld3r;Мифы и легенды о переполнении целых чисел в Rust;https://habr.com/ru/post/282958/;"Примитивные целочисленные типы, поддерживаемые процессорами, являются ограниченным приближением к бесконечному набору целых чисел, которыми мы привыкли оперировать в реальной жизни. Это ограниченное представление не всегда совпадает с ""реальными"" числами, например 255_u8 + 1 == 0. Зачастую программист забывает об этой разнице, что легко может приводить к багам.  Rust — это язык программирования, целью которого является защита от багов, он фокусируется на предотвращении наиболее коварных из них — ошибок работы с памятью, но также старается помочь программисту избежать остальных проблем: утечек памяти, игнорирования ошибок и, как мы увидим, переполнения целых чисел."
Juralis;Ускоряем Node.js с помощью Rust;https://habr.com/ru/post/323106/;"  В последнее время в сети довольно часто упоминается «молодой и перспективный» язык Rust. Он пробудил во мне любопытство и желание сделать на нём что-то более-менее полезное, чтобы как-то примерить — впору ли он мне. Это вылилось в достаточно любопытный, как мне кажется, опыт скрещивания ужа с ежом при содействии кукушки.  "
vitvakatu;Выпуск Rust 1.19;https://habr.com/ru/post/334068/;Команда Rust рада представить выпуск Rust 1.19. Rust — это системный язык программирования, нацеленный на скорость, безопасность и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust, для обновления достаточно выполнить: $ rustup update stable Если же Rust еще не установлен, вы можете установить rustup с соответствующей страницы нашего веб-сайта и ознакомится с подробными примечаниями к выпуску Rust 1.19 на GitHub.
bmusin;Rust: качаем ленту и парсим JSON;https://habr.com/ru/post/347198/;Я покажу вам, как написать небольшую программу, которая скачивает ленту(feed) в формате JSON, парсит и выводит список заметок на консоль в форматированном виде. У нас все вылилось в очень лаконичный код. Как? Смотрите под катом.
m1rko;Чего из Rust мне не хватает в C;https://habr.com/ru/post/350186/;"Об авторе. Федерико Мена-Кинтеро — мексиканский программист, один из основателей проекта GNOME.  Librsvg достиг переломного момента: внезапно выясняется, что легче портировать некоторые основные части из C на Rust, чем просто добавить аксессоры. Кроме того, всё больше «мяса» библиотеки сейчас написано на Rust.  Сейчас мне приходится часто переключаться между двумя языками, и C теперь выглядит очень, очень примитивным.  Элегия C Я влюбился в C около 24 лет назад. Выучил азы по второму изданию “The C Programming Language by K&R” в переводе на испанский. До этого я использовал достаточно низкоуровневый Turbo Pascal, с указателями и ручным распределением памяти, так что C казался приятным и придающим сил.  K&R — отличная книга для выработки стиля и лаконичности. Эта маленькая книжка даже научит вас реализовать простой malloc()/free(), что поистине просветляет. Даже низкоуровневые конструкции можно вставлять в самом языке!  В последующие годы я хорошо освоил C. Это небольшой язык с маленькой стандартной библиотекой. Вероятно, идеальный язык для реализации ядра Unix на 20 000 строк кода или около того."
fafhrd91;Прогулка по быстрому, безопасному и почти законченному веб-сервису на Rust;https://habr.com/ru/post/353990/;Оригинал статьи В течение многих лет у меня было стойкое недоверие к интерпретируемым языкам. Они быстрые и работать с ними приятно, но хороши они только для работы на небольших системах, если же у вас быстрорастущий проект их привлекательность быстро улетучивается. Создание большого приложения на Ruby или JavaScript (или множестве других языков) — это бесконечный сизифов труд — вы решаете одну проблему только для того, чтобы другая тут же скатилась на вас с горы. И совершенно неважно сколько тестов вы напишете или насколько хороша ваша команда, любая новая разработка создаст мириаду ошибок, исправление которых займет месяцы или годы.  Основная проблема кроется в пограничных условиях. Программисты делают все возможное для написания и тестирования “happy path”, но человеческий фактор мешает нам видеть проблему со всех сторон и особенно края и углы, которые причиняют наибольшие проблемы пока программа используется. Ограничения, такие как компилятор и проницательная система типов, — это инструменты, которые помогают нам определять эти условия. Во всех языках есть спектр разрешимости, и я четко убежден, что чем больше времени потрачено на написание приложения по правилам языка, тем меньше времени уйдет на устранение проблем.
M00nL1ght;Пишем на Rust + CUDA C;https://habr.com/ru/post/447968/;" Всем привет!  В данном руководстве хочу рассказать как подружить CUDA C/С++ и Rust. И в качестве примера напишем небольшую программу на Rust для вычисления скалярного произведения векторов, вычисление скалярного произведения будет производиться на GPU с использованием CUDA C.  Кому интересно под кат!"
RustLangRu;Выпуск Rust 1.39.0: async/await, аттрибуты для параметров функций, новые константные функции;https://habr.com/ru/post/474808/;Команда Rust рада сообщить о выпуске новой версии, 1.39.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.39.0 вам достаточно выполнить следующую команду: $ rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что вошло в стабильную версию 1.39.0 Наиболее существенные нововведения включают в себя синтаксис async/.await, разделяемые ссылки к перемещаемым значениям в match-guards и атрибуты у параметров функций. Смотрите подробные примечания к выпуску для дополнительной информации.
RustLangRu;Выпуск Rust 1.42.0: шаблоны срезов и более удобные сообщения о панике;https://habr.com/ru/post/491956/;Команда Rust рада сообщить о выпуске новой версии, 1.42.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.42.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что вошло в стабильную версию 1.42.0 Основными нововведениями Rust 1.42.0 являются более удобные сообщения о панике в случае вызова unwrap, шаблоны срезов, объявление устаревшим Error::description и многое другое. Смотрите подробности выпуска для дополнительной информации.
rmuskovets;Пишем ОС на Rust. Настройка среды. Бинарник для «голого» железа;https://habr.com/ru/post/527682/;"Настройка среды. ""Голый"" бинарник, или Исполняемый файл без main() Первый шаг в написании своей ОСи — создание бинарника, не зависящего от стандартных библиотек, это делает возможным запуск кода без ОС — мы же пишем свою. Оригинал блога разрабатывается на GitHub. Замечания к оригиналу оставляйте на странице Issues репозитория выше, а к переводу — в личке, комментариях или тут. Код, написанный в этой статье, содержится в ветке post-01."
RustLangRu;Планирование редакции Rust 2021;https://habr.com/ru/post/545778/;"Рабочая группа Rust 2021 Edition рада сообщить, что следующая редакция Rust — Rust 2021 — запланирована на этот год. Пока что формально описывающий её RFC остаётся открытым, но мы ожидаем, что в скором времени он будет принят. Планирование и подготовка уже начались, и мы идём по графику! Если вам интересно, какие новшества появятся в Rust 2021 или когда эта редакция выйдет в стабильной версии, — читайте нашу статью! Что входит в эту редакцию? Конечный список нововведений, которые войдут в Rust 2021, ещё не определён до конца. В целом мы планируем, что выпуск Rust 2021 будет намного меньше, чем Rust 2018, по следующим причинам:  Ритм выпусков стал регулярным Это значит, что мы будем активно использовать плюсы ""цепочечной"" модели на уровне редакций Rust. Редакция Rust 2018 выбилась из модели ""минимального стресса"" выпусков. Сейчас просто нужно меньше фундаментальных изменений, чтобы язык продолжал развиваться.  Более подробно о развитии концепции редакций вы можете почитать в RFC. Решение, войдёт ли та или иная функциональность в Rust 2021, является частью процесса RFC — поэтому список ожидаемых функций может и будет меняться. Это будет происходить до самого момента выпуска, но тем не менее, уже сейчас мы можем рассмотреть список функций, которые, скорее всего, в неё войдут."
NeoCode;Обзор языка программирования Rust;https://habr.com/ru/post/135712/;"Rust — новый экспериментальный язык программирования, разрабатываемый Mozilla. Язык компилируемый и мультипарадигмальный, позиционируется как альтернатива С/С++, что уже само по себе интересно, так как даже претендентов на конкуренцию не так уж и много. Можно вспомнить D Вальтера Брайта или Go от Google.  В Rust поддерживаются функицональное, параллельное, процедурное и объектно-ориентированное программирование, т.е. почти весь спектр реально используемых в прикладном программировании парадигм.   Я не ставлю целью перевести документацию (к тому же она весьма скудная и постоянно изменяется, т.к. официального релиза языка еще не было), вместо этого хочется осветить наиболее интересные фичи языка. Информация собрана как из официальной документации, так и из крайне немногочисленных упоминаний языка на просторах Интернета.  "
namespace;Почему Go и Rust не соперники;https://habr.com/ru/post/262779/;"В этом небольшом посте я расскажу, почему я считаю, что Go и Rust не являются соперниками.  Почему некоторые считают, что Go и Rust соперники?  Rust и Go анонсировали в примерно одно и то же время. Разработку языка Go начали в 2007 и в ноябре 2009 он уже увидел свет. Rust появился несколько месяцев спустя, в 2010, тем не менее Грейдон отмечает, что разработку начали гораздо раньше. В любом случае, у обоих языков достаточно явно различаются влиятельные предшественники. В случае Go, это CSP Хоара, Alef, и Newsqueak Пайка. Rust рассматривается, как расширение семейства ML-языков. Что Rust, что Go — оба считаются безопасными (по части управления памятью). В то время, как это утверждение абсолютно правдиво, оба языка не поощряют использование unsafe кода; что более важно, сегодня мир просто не примет язык без подобных гарантий надежности. Просто так получилось, что Go и Rust — это первые языки, которым удалось доказать, спустя десятилетия доказательств, что в реальности программисты просто не могут безопасно обращаться с памятью вручную. Оба очень молоды: Go достиг 1.0 в 2012, а Rust в середине 2015 года. Оба более, чем амбициозны и явно готовы потеснить «старожил».  "
kstep;Rayon: параллелизм данных в Rust;https://habr.com/ru/post/274299/;"Последние пару недель я работал над обновление Rayon — моей экспериментальной библиотеки для параллелизма данных в Rust.  Я вполне доволен тем, как идёт разработка, так что я решил объяснить к чему я пришёл в блог посте. Цель Rayon — сделать добавление параллелизма в последовательный код простым, так, чтобы любой цикл for или итератор можно было бы заставить работать в несколько потоков. Например если у вас есть такая цепочка итераторов:  let total_price = stores.iter()                         .map(|store| store.compute_price(&list))                         .sum()  то вы можете сделать её работу параллельной просто поменяв обычный «последовательный итератор» на «параллельный итератор» из Rayon:  let total_price = stores.par_iter()                         .map(|store| store.compute_price(&list))                         .sum()  "
ozkriff;Советы по написанию библиотек на Rust;https://habr.com/ru/post/280482/;"Перевод статьи Pascal Hertleif ""Good Practices for Writing Rust Libraries"" (2015.10.24).  Прошел примерно год, как меня заинтересовал Rust, язык программирования от Mozilla Research, сосредоточенный на решении трёх задач: безопасность, скорость и параллелизм. Он такой же низкоуровневый, как Си или C++, имеет хорошую систему типов (с обобщениями (generics) и типажами (traits)), дружелюбный компилятор и отличный менеджер пакетов Cargo. С выпуска Rust 1.0 прошло уже полгода (май 2015): многие библиотеки (пакеты, crates), включая некоторые мои, были опубликованы в центральном регистре crates.io. Вот неплохие практики (еще рановато называть их ""лучшими""), которые помогут другим людям находить, использовать и дополнять вашу библиотеку."
LooMaclin;Введение в futures-rs: асинхронщина на Rust [перевод];https://habr.com/ru/post/310234/; Этот документ поможет вам изучить контейнер для языка программирования Rust — futures, который обеспечивает реализацию futures и потоков с нулевой стоимостью. Futures доступны во многих других языках программирования, таких как C++, Java, и Scala, и контейнер futures черпает вдохновение из библиотек этих языков. Однако он отличается эргономичностью, а также придерживается философии абстракций с нулевой стоимостью, присущей Rust, а именно: для создания и композиции futures не требуется выделений памяти, а для Task, управляющего ими, нужна только одна аллокация. Futures должны стать основой асинхронного компонуемого высокопроизводительного ввода/вывода в Rust, и ранние замеры производительности показывают, что простой HTTP сервер, построенный на futures, действительно быстр. 
aka-demik;Выпуск Rust 1.12.1;https://habr.com/ru/post/314702/;Мы рады представить новую версию Rust 1.12.1. Rust — это системный язык программирования, нацеленный на безопасную работу с памятью, скорость и параллельное выполнение кода. Как обычно, вы можете установить Rust 1.12.1 с соответствующей страницы официального сайта, или с помощью rustup выполнив команду rustup update stable. Что вошло в стабильную версию 1.12.1 Секундочку… один-точка-двенадцать-точка… один? Несколько недель назад, в анонсе версии 1.12, мы сказали: Выпуск 1.12 — возможно, самый значительный с момента выпуска 1.0.И это правда. Одним из важных изменений был масштабный рефакторинг компилятора. Новый бэкенд MIR изменил его архитектуру и некоторые детали реализации. В целом процесс модернизации прошел так:
mkpankov;Соревнование Underhanded Rust 2016;https://habr.com/ru/post/318122/;Команда связей с сообществом Rust рада сообщить о первом ежегодном соревновании Underhanded Rust. Это соревнование должно проверить наше предположение о готовности языка Rust и его экосистемы к написанию легко читаемого и надежного кода. Воодушевившись примерами Underhanded C и Underhanded Crypto, мы хотим, чтобы вы заставили Rust работать неправильно, используя лёгкий для чтения код, к которому сложно придраться. Нам нужна ваша помощь в поиске брешей в языке и способов их исправления. Сможете ли вы написать стопроцентно безопасный код, скрывающий логическую ошибку, или так спрятать эксплойт в unsafe коде, чтобы он прошел аудит? Попробуйте это сделать!
ozkriff;Выпуск Rust 1.16;https://habr.com/ru/post/324448/;"Команда Rust рада представить выпуск Rust 1.16.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust, то для обновления достаточно выполнить: $ rustup update stable Если у вас ещё не установлен Rust, то вы можете установить rustup c соответствующей страницы нашего веб-сайта и ознакомиться с подробным примечанием к выпуску 1.16.0 на GitHub. Что вошло в стабильную версию 1.16.0 Самым большим дополнением в Rust 1.16 является команда cargo check. Эта новая подкоманда в большинстве случаев должна ускорить процесс разработки. Что она делает? Давайте вернёмся немного назад и поговорим о том, как rustc компилирует ваш код. Компиляция происходит в несколько ""проходов"". Это значит, что компилятор выполняет множество различных этапов, прежде чем из вашего исходного кода будет создан бинарный файл. Вы можете увидеть каждый их этих этапов (и сколько времени и памяти они занимают) передав компилятору параметр -Z time-passes (только для nightly): "
humbug;Go быстрее Rust, Mail.Ru Group сделала замеры;https://habr.com/ru/post/338268/;"С такой фразой мне кинули ссылку на статью компании Mail.Ru Group от 2015 «Как выбрать язык программирования?». Если кратко, они сравнили производительность Go, Rust, Scala и Node.js. За первое место боролись Go и Rust, но Go победил.  Как написал автор статьи gobwas (здесь и далее орфография сохранена): Эти тесты показывают, как ведут себя голые серверы, без «прочих нюансов» которые зависят от рук программистов.К моему большому сожалению, тесты не были эквивалентными, ошибка всего лишь в 1 строчке кода поставила под сомнение объективность и вывод статьи."
humbug;Бот для Starcraft на Rust, C и на любом другом языке;https://habr.com/ru/post/416743/; StarCraft: Brood War. Как много это значит для меня. И для многих из вас. Настолько много, что я засомневался, давать ли ссылку на вики. Как-то раз мне в личку постучался Halt и предложил выучить Rust. Как и любые нормальные люди, мы решили начать с hello world написания динамической библиотеки под Windows, которая могла бы загружаться в адресное пространство игры StarCraft и управлять юнитами. В статье будет описан процесс поиска решений, использования технологий, приемов, которые позволят вам почерпнуть новое в языке Rust и его экосистеме или вдохновиться для реализации бота на своем любимом языке, будь то C, C++, ruby, python, e.t.c.
humbug;A bot for Starcraft in Rust, C or any other language;https://habr.com/ru/post/436254/; StarCraft: Brood War. This game means so much to me! And to many of you, I guess. So much, that I wonder if I should even give a link to its page on Wikipedia or not. Once Halt sent me PM and offered to learn Rust. Like any ordinary people, we decided to start with hello world writing a dynamic library for Windows that could be loaded into StarCraft's address space and manage units. The following article will describe the process of finding solutions and using technologies and techniques that will allow you to learn new things about Rust and its ecosystem. You may also be inspired to implement a bot using your favorite language, whether it be C, C++, Ruby, Python, etc.
sickfar;OS1: примитивное ядро на Rust для x86. Часть 2. VGA, GDT, IDT;https://habr.com/ru/post/445584/;Первая часть Первая статья еще не успела остыть, а я решил не держать вас в интриге и написать продолжение. Итак, в предыдущей статье мы поговорили о линковке, загрузке файла ядра и первичной инициализации. Я дал несколько полезных ссылок, рассказал, как размещается загруженное ядро в памяти, как соотносятся виртуальные и физические адреса при загрузке, а так же как включить поддержку механизма страниц. В последнюю очередь управление перешло в функцию kmain моего ядра, написанного на Rust. Пришло время двигаться дальше и узнать, насколько глубока кроличья нора! В этой части заметок я кратко опишу свою конфигурацию Rust, в общих чертах расскажу про вывод информации в VGA, и детально о настройке сегментов и прерываний. Всех заинтересованных прошу под кат, и мы начинаем.
ilammy;Как не переписать проект на Rust;https://habr.com/ru/post/474666/;Как только вы переступаете через болевой порог Борроу-Чекера и осознаёте, что Rust позволяет вытворять невообразимые (и порой опасные) в других языках вещи, вас может постигнуть настолько же непреодолимое желание Переписать Всё на Rust. Хоть и в лучшем случае это банально непродуктивно (бессмысленное разбазаривание усилий на несколько проектов), а в худшем — приводит к уменьшению качества кода (ведь с чего вы считаете себя более опытным в области применения библиотеки, чем её изначальный автор?) Гораздо полезнее будет предоставить безопасный интерфейс для оригинальной библиотеки, повторно используя её код.
defuz;Rust превосходит по производительности C++ согласно результатам Benchmarks Game;https://habr.com/ru/post/480608/;"В начале этого месяца случилась маленькая победа. Согласно последним результатам популярного бенчмарка, сравнивающего производительность языков программирования, Rust занимает второе место, разместившись между C и С++:    Для сравнения производительности используется геометрическое среднее времени выполнения 10 различных программ. Согласно последним результатам Rust превзошел С++ в 6 задачах из 10.  Под катом некоторое детали и мнение о дальнейших перспективах."
RustLangRu;Выпуск Rust 1.41.1: корректирующий выпуск;https://habr.com/ru/post/490132/;Команда Rust опубликовала новый корректирующий выпуск Rust, 1.41.1. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.41.1 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта Что вошло в стабильную версию 1.41.1 Rust 1.41.1 посвящён двум критическим регрессиям, появившимся в Rust 1.41.0: некорректность в статических временах жизни и неправильная компиляция, вызывающая ошибки сегментирования. Эти регрессии не затрагивают предыдущие выпуски Rust и мы рекомендуем пользователям Rust 1.41.0 обновиться настолько быстро, насколько это возможно. Другая проблема, связанная со взаимодействием между временем жизни 'static и реализациями типажа Copy, присутствовала ещё с Rust 1.0 и тоже исправляется данным выпуском.
blandger;Microsoft: Rust является 'лучшим шансом' в отрасли программирования безопасных систем;https://habr.com/ru/post/506598/;"Источник всех утверждений статьи взят из данной видео-конференции Левика. В ней язык живой, а не ""доклад под бумажку"". Не поленитесь послушать, чтобы заранее не писать глупости (про теорию заговора и аргессивного продвижения).   YouTube: Ryan Levick - Rust at Microsoft   Независимо от того, сколько вложений компании-разработчики могут потратить на инструментарий и обучение своих разработчиков, «C++, по своей сути, не является безопасным языком», сказал Райан Левик (Ryan Levick) 'cloud developer advocate' из Microsoft на виртуальной конференции AllThingsOpen в прошлом месяце, объясняя в виртуальной беседе почему Microsoft постепенно переходит с C/C++ на Rust для создания своего инфраструктурного программного обеспечения. И вдохновляет других гигантов индустрии программного обеспечения задуматься о том же. "
RustLangRu;Rust 1.49.0: aarch64 и улучшения во фреймворке тестирования;https://habr.com/ru/post/535508/;Команда Rust рада сообщить о выпуске новой версии, 1.49.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.49.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что вошло в стабильную версию 1.49.0 В этом выпуске мы улучшили поддержку платформ и улучшили фреймворк тестирования. Смотрите подробные примечания к выпуску, чтобы узнать о других изменениях, не представленных в данном анонсе.
otter18;Как я влюбился в Rust и чего мне это стоило;https://habr.com/ru/company/macloud/blog/557792/; Языков программирования на текущий момент существует превеликое множество. Одни безусловно хороши для определенных целей, другие признаются универсальными и используются многими для решения повседневных задач. В этой статье я хочу рассказать, как и почему Rust стал для меня основным и любимым языком для решения персональных задач самого разнообразного профиля, и что именно доставляет мне особенное удовольствие при его использовании. Хочу сразу заметить, что эта статья целиком и полностью — субъективное мнение автора, единственная цель которой — заинтересовать читателей, ценящих в программировании как хобби те же самые вещи, что и он сам, и речь в ней не пойдёт ни о быстродействии, ни о востребованности языка в сфере IT, ни о каких-либо других технических составляющих этой области, вокруг которой часто возникают разного рода споры. Я остановлюсь на том, что Rust — быстрый и безопасный компилируемый ЯП общего назначения. Об остальном — далее.
maxim_ge;Конспектируем Книгу Rust:: Владение;https://habr.com/ru/post/566668/;"Перед вами краткое профессиональное описание особенностей языка Rust для профессионалов.  Что это такое?  краткое — информации будет гораздо меньше, чем в Книге (The Rust Programming Language) профессиональное — информации будет гораздо больше, чем в Книге; описание особенностей — фокусируемся на отличиях Rust от других языков; языка — описывается именно язык, а не установка средств разработки, управление пакетами и прочий инструментарий; для профессионалов — подразумевается, что читатель имеет существенный опыт в разработке ПО.  Чего здесь НЕ будет  Не будет агитации за Rust Не будет легко. Для освоения потребуется неделя-другая вдумчивого чтения по часу в день, с тщательным разбором примеров, как-то так   Содержание  Владение (эта статья) Времена и функции Времена и структуры Работа с кучей Заменяем глобальный аллокатор "
werktone;Rust 1.0: текущее состояние и окончательное расписание выхода версий;https://habr.com/ru/post/250577/;" Прошло пять недель с тех пор как вышла альфа версия Rust 1.0! До того как выйдет следующая предварительная версия Rust, мы хотели бы рассказать о текущем состоянии языка и о том, что мы еще намерены сделать по пути к стабильной версии 1.0.  TL;DR: Rust 1.0 выйдет 15 мая 2015 года "
Googolplex;Релиз Rust 1.0 Beta;https://habr.com/ru/post/254961/;Сегодня мы рады представить релиз Rust 1.0 Beta! Бета-релиз является очень важным звеном на пути к финальному релизу 1.0. В частности, в бета-релизе все библиотеки и элементы языка, которые мы собирались сделать стабильными в 1.0, отмечены как стабильные. Поэтому по бета-релизу можно весьма точно представить, что вас будет ожидать в Rust 1.0.  
lain8dono;Почему Go и Rust не враги, а друзья;https://habr.com/ru/post/262889/;Можно долго вести священные войны о языках программирования. Каждый из них сочетает в себе достоинства и недостатки. Всегда найдётся пример, когда один язык проигрывает другому на определённой задаче. Некоторые из них вполне могут сосуществовать рядом в одной программе. В этом посте я расскажу, как связать Go и Rust в одно целое.  
redeyedman;Заимствование и время существования в Rust;https://habr.com/ru/post/266715/;"Представляю вашему вниманию перевод статьи «Rust Borrow and Lifetimes» из блога Артура Ляо (Arthur Liao), инженера Yahoo!  Rust — это новый язык программирования, находящийся в активной разработке с версии 1.0. Я могу написать другой блог о Rust и том, почему он крут, но сегодня я сфокусируюсь на его системе заимствования и времени существования, которая запутывает многих новичков, в том числе и меня самого. Данный пост предполагает, что у вас есть базовое понимание Rust. Если же нет, вы можете сперва прочитать само Руководство и Руководство по указателям. "
mkpankov;Создаём REST-сервис на PostgreSQL и Rust. Часть 1: прототип;https://habr.com/ru/post/267477/;"Всем привет.  Какое-то время назад я видел в небезызвестном блоге пост о том, как реализовать на Go простую программу, работающую с БД, а затем сделать на её базе целый REST-сервис. Я решил проверить, насколько сложно сделать аналогичную программу на Rust и поделиться результатами.    Мы начнём с работы с БД и создадим обычное консольное приложение, а затем добавим, так сказать, REST-фронтенд. "
mkpankov;"Создаём REST-сервис на Rust. Часть 2: читаем INI; multirust";https://habr.com/ru/post/267661/;"Всем привет.  В первой части мы сделали простейший прототип, работающий с PostgreSQL.  При этом мы прописали все параметры соединения с базой прямо в коде. Давайте теперь вынесем их в конфигурационный файл.  В качестве формата конфигурации я выбрал INI — достаточно простой и известный формат.  "
mkpankov;Выпуск Rust 1.13;https://habr.com/ru/post/315192/;"Команда Rust рада представить выпуск Rust 1.13.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Как обычно, вы можете установить Rust 1.13.0 с соответствующей страницы официального сайта, а также ознакомиться с подробным списком изменений в 1.13.0 на GitHub. В этот выпуск вошло 1448 патчей. Это была по-настоящему горячая пора в Rust. Мы участвовали в трёх конференциях подряд — RustConf, RustFest и Rust Belt Rust. Было классно увидеть так много любителей Rust; со многими мы встретились впервые! Мы много думали о будущем, разрабатывали план на 2017 и создавали инструменты, нужные нашим пользователям. И несмотря на всё это, мы собрали новый выпуск с кучей новых крутых фишек. Что вошло в стабильную версию 1.13 Выпуск 1.13 включает долгожданный оператор ?, ускорение компиляции, добавление некоторых возможностей в Cargo и стандартную библиотеку. Также этот выпуск привносит множество небольших улучшений в документацию и сообщения об ошибках. Это результат работы многих людей, и они не упоминаются в замечаниях к выпуску индивидуально."
vitvakatu;Выпуск Rust 1.20;https://habr.com/ru/post/337058/;"Команда Rust рада представить выпуск Rust 1.20. Rust — это системный язык программирования, нацеленный на скорость, безопасность и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust, для обновления достаточно выполнить: $ rustup update stable Если же Rust еще не установлен, вы можете установить rustup с соответствующей страницы нашего веб-сайта и ознакомится с подробными примечаниями к выпуску Rust 1.20 на GitHub."
ozkriff;Выпуск Rust 1.21;https://habr.com/ru/post/340170/;"Команда Rust рада представить выпуск Rust 1.21.0. Rust — это системный язык программирования, нацеленный на скорость, безопасность и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust, для обновления достаточно выполнить: $ rustup update stable Если же у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.21.0 можно ознакомиться на GitHub. Что вошло в стабильную версию 1.21.0 Этот выпуск содержит несколько небольших, но полезных изменений языка и новую документацию. Первое изменение касается литералов. Рассмотрим код: let x = &5; В Rust он аналогичен следующему: let _x = 5; let x = &_x; То есть 5 будет положено в стек или возможно в регистры, а x будет ссылкой на него. Однако, учитывая, что речь идет о целочисленном литерале, нет причин делать значение таким локальным. Представьте, что у нас есть функция, принимающая 'static аргумент вроде std::thread::spawn. Тогда вы бы могли использовать x так: use std::thread;  fn main() {     let x = &5;      thread::spawn(move || {         println!(""{}"", x);     }); }"
ozkriff;Выпуск Rust 1.22 (и 1.22.1);https://habr.com/ru/post/343058/;Команда Rust рада сообщить о двух новых версиях Rust: 1.22.0 и 1.22.1. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Подождите, две версии? В последний момент мы обнаружили проблему с новой macOS High Sierra в версии 1.22.0 и по разным причинам выпустили версию 1.22.0 как обычно, но так же выпустили 1.22.1 с исправлением. Ошибка была найдена в менеджере пакетов Cargo, а не в rustc, и затронула только пользователей macOS High Sierra.Если у вас установлена предыдущая версия Rust, для обновления достаточно выполнить: $ rustup update stable Если же у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.22.0 и 1.22.1 можно ознакомиться на GitHub. Что вошло в стабильную версии 1.22.0 и 1.22.1 Самое главное изменение в этой версии, которого многие долго ждали: теперь вы можете использовать ? с Option<T>! Около года назад, в Rust 1.13, мы ввели оператор ? для работы с Result<T, E>. С тех пор ведутся дискуссии о том, как далеко оператор ? должен зайти: Должен ли он остаться только для Result? Разрешать ли пользователям расширять его? Должен ли он использоваться с Option<T>? В Rust 1.22, основное использование оператора ? с Option<T> стабилизировано. Теперь такой код соберется:
ozkriff;Выпуск Rust 1.25;https://habr.com/ru/post/352800/;"Команда Rust рада сообщить о новой версии Rust: 1.25.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust, для обновления достаточно выполнить: $ rustup update stable Если же у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.25.0 можно ознакомиться на GitHub. Что вошло в стабильную версию 1.25.0 Несколько последних выпусков были незначительными, но Rust 1.25 содержит много нововведений! Во-первых: мы обновили LLVM с 4-ой версии до 6-ой. Обновление влечёт ряд изменений, наиболее важное из которых — поддержка AVR."
freecoder_xx;Выпуск Rust 1.27;https://habr.com/ru/post/415091/;Команда разработчиков Rust рада сообщить о выпуске новой версии Rust: 1.27.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust с помощью rustup, то для обновления Rust до версии 1.27.0 вам достаточно выполнить: $ rustup update stable Если у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.27.0 можно ознакомиться на GitHub. Также мы хотим обратить ваше внимание вот на что: перед выпуском версии 1.27.0 мы обнаружили ошибку в улучшении сопоставлений match, введенном в версии 1.26.0, которая может привести к некорретному поведению. Поскольку она была обнаружена очень поздно, уже в процессе выпуска данной версии, хотя присутствует с версии 1.26.0, мы решили не нарушать заведенный порядок и подготовить исправленную версию 1.27.1, которая выйдет в ближайшее время. И дополнительно, если потребуется, версию 1.26.3. Подробности вы сможете узнать из соответствующих примечаний к выпуску. Что вошло в стабильную версию 1.27.0 В этом выпуске выходят два больших и долгожданных улучшения языка. 
ozkriff;Выпуск Rust 1.29;https://habr.com/ru/post/423249/;"Команда разработчиков Rust рада сообщить о выпуске новой версии Rust: 1.29.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust с помощью Rustup, то для обновления Rust до версии 1.29.0 вам достаточно выполнить: $ rustup update stable Если у вас еще не установлен Rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.29.0 можно ознакомиться на GitHub. Что вошло в стабильную версию 1.29.0 1.29 привносит не очень много изменений. Ожидается что Rust 1.30 и 1.31 будут очень значительными, так что большая часть 1.29 итерации ушла на подготовку к будущим изменениям. Два самых заметных нововведения этого выпуска даже не касаются самого языка: это две новые возможности Cargo и обе они касаются предупреждений.  cargo fix автоматически исправляет предупреждения в коде cargo clippy — статический анализатор Rust кода, помогающий поймать распространенные ошибки и просто улучшить код  cargo fix С выпуском Rust 1.29 у Cargo появляется новая подкоманда: cargo fix. Если вы когда-либо писали на Rust, то скорее всего уже сталкивались с предупреждениями компилятора. Например, рассмотрим такой код: fn do_something() {}  fn main() {     for i in 0..100 {         do_something();     } } В нем мы вызываем do_something сто раз, но никогда не используем переменную i. Rust предупреждает нас об этом:"
freecoder_xx;Выпуск Rust 1.32;https://habr.com/ru/post/436854/;Команда разработчиков Rust рада сообщить о выпуске новой версии Rust, 1.32.0. Rust — это язык программирования, который дает возможность каждому создавать надежное и эффективное программное обеспечение. Если у вас установлена предыдущая версия Rust с помощью rustup, то для обновления Rust до версии 1.32.0 вам достаточно выполнить: $ rustup update stable Если у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.32.0 можно ознакомиться на GitHub. Небольшое замечание: за последнее время вышло несколько новых выпусков rustup! Чтобы обновить сам rustup, выполните rustup self update. Что вошло в стабильную версию 1.32.0 Rust 1.32.0 приобрел несколько упрощающих жизнь улучшений, сменил аллокатор памяти по умолчанию и сделал больше функций константными. Читайте об этих изменениях ниже или смотрите подробнее в примечаниях к выпуску.
Siemargl;Какой язык — D, Go или Rust имеет лучшие перспективы заменить C и почему?;https://habr.com/ru/post/460989/;"Несмотря на мой статус и очевидную предвзятость как одного из создателей D, я постараюсь отвечать откровенно; Я следовал путям Go и Rust, и я абсолютно точно знаю, где стирают грязное белье в D. Я поощряю людей на аналогичных позициях в сообществах Rust и Go чтобы и они делились своим мнением. Так вот.   Для начала, где то в вопросе должен фигурировать и C++. Должен ли он быть заменен вместе с С, или же он один из кандидатов на замещение С, но в любом случае С++ это ключевой элемент уравнения. Это ближайший язык к С и очевидный шаг вперед. Учитывая возраст С++, я в дальнейшем полагаю в этом вопросе что С++ вместе с С является целью для замены."
Hirrolot;Асинхронщина в Rust: Стандартная библиотека и async/.await;https://habr.com/ru/post/504020/; Введение Перед вами руководство по специфике асинхронного программирования на языке Rust — точка входа в экосистему библиотек, справочник, на который можно опираться при проектировании системы и решении нетривиальных задач. К прочтению рекомендую и опытным разработчикам, и новичкам в Rust, только решивших окунуться в эту кроличью нору. Вас ждёт целый цикл статей разного уровня сложности и погружения, затрагивающий не только асинхронное программирование, но и полезные шаблоны проектирования в Rust, такие как перенос инвариантов бизнес-логики на уровень системы типов, индуктивные вычисления на типах и декларативное программирование посредством комбинаторов. Сегодня мы рассмотрим API стандартной библиотеки для асинхронного программирования и сам долгожданный синтаксис async/.await.
RustLangRu;Rust 1.45.0: стабилизация функциональных процедурных макросов, исправление дефектов преобразования;https://habr.com/ru/post/511546/;Команда Rust рада сообщить о выпуске новой версии, 1.45.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.45.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть на GitHub. Что вошло в стабильную версию 1.45.0 Данный выпуск содержит два больших изменения: исправление давних дефектов при преобразовании между целыми числами и числами с плавающей точкой и стабилизация фич, необходимых для того, чтобы как минимум один веб-фреймворк смог работать на стабильном Rust.
RustLangRu;Rust 1.50.0:  ... ;https://habr.com/ru/post/540920/;Команда Rust рада сообщить о выпуске новой версии — 1.50.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.50.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что вошло в стабильную версию 1.50.0 В этом выпуске мы улучшили индексацию массивов, повысили безопасность доступа к полям объединений, усовершенствовали файловые дескрипторы и добавили их в стандартную библиотеку. Смотрите подробные примечания к выпуску, чтобы узнать о других изменениях, не представленных в данном анонсе.
not_bad;GraphQL на Rust;https://habr.com/ru/post/546208/;"В этой статье я покажу как создать GraphQL сервер, используя Rust и его экосистему; будут приведены примеры реализации наиболее часто встречающихся задач при разработке GraphQL API. В итоге API трёх микросервисов будут объединены в единую точку доступа с помощью Apollo Server и Apollo Federation. Это позволит клиентам запрашивать данные одновременно из нескольких источников без необходимости знать какие данные приходят из какого сервиса."
mkpankov;Добро пожаловать на русскоязычный сайт для разработчиков на Rust;https://habr.com/ru/post/273561/;"Добро пожаловать на русскоязычный сайт для разработчиков на Rust!  Rust — это системный язык программирования, который очень быстро работает, предотвращает почти все падения, и устраняет гонки данных.  Создание сообщества назревает уже давно. Наш язык миновал заветный выпуск «1.0». Rust стабилен, экосистема растёт как на дрожжах, а улучшения поспевают в каждом новом выпуске. Самое время расширять аудиторию! "
l4l;Большие бинари в моем Rust?;https://habr.com/ru/post/305246/;"Disclaimer: Эта статья является очень вольным переводом и некоторые мометы достаточно сильно отличаются от оригинала  Бороздя просторы интернета вы наверняка уже успели услышать про Rust. После всех красноречивых отзывов и расхваливаний вы, конечно же, не смогли не потрогать это чудо. "
ozkriff;Выпуск Rust 1.23;https://habr.com/ru/post/346106/;Команда Rust рада сообщить о новой версии Rust: 1.23.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust, для обновления достаточно выполнить: $ rustup update stable Если же у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.23.0 можно ознакомиться на GitHub. Что вошло в стабильную версию 1.23.0 Новый год, новый Rust! Нашим первым улучшением является избавление от избыточных копий в некоторых ситуациях. С этими изменениями потребление памяти rustc уменьшилось на 5-10%, но результаты для ваших приложений могут отличаться. Команда документации прошла долгий путь для того чтобы rustdoc использовал CommonMark. До этого rustdoc не гарантировал какой движок отрисовки markdown он использовал. В рамках этого выпуска мы все еще визуализируем документацию нашим прошлым движком — Hoedown — но параллельно визуализируем еще и совместимым с CommonMark движком, выдавая предупреждения при различных результатах. Нам еще не встречались ситуации, где нельзя было бы изменить синтаксис документа так, чтобы он удовлетворял обоим движкам сразу. Участник команды документации Guillaume Gomez написал заметку об этом в своем журнале, где показаны некоторые часто встречающиеся отличия движков и способы их обхода. 
bmusin;Rust: «Назад к корням»;https://habr.com/ru/post/346644/;Мне приходит в голову множество разных целей для Rust в текущем 2018 году, к слову, 2017 год прошел для меня очень быстро, так что я задался следующим вопросом: если бы я мог выбрать одну-единственную цель для Rust в 2018 году, то что бы я выбрал? Я буду пристрастен, и вот мое мнение:
fokus-lop;Игра на Rust за 24 часа: личный опыт разработки;https://habr.com/ru/company/skillbox/blog/444364/;" В этой статье я расскажу о личном опыте разработки небольшой игры на Rust. На создание рабочей версии ушло около 24 часов (преимущественно я работала по вечерам или на выходных). Игра еще далека от завершения, но я думаю, что опыт будет полезным. Я расскажу, чему научилась, и о некоторых наблюдениях, сделанных при построении игры с нуля."
Hirrolot;Выпуск Rust 1.35.0: Реализации функциональных трейтов и прочие новшества;https://habr.com/ru/post/453338/;Представляю вашему вниманию перевод публикации о новой версии всеми любимого языка программирования Rust. Введение Команда по разработке языка программирования Rust рада анонсировать новую версию, 1.35.0. Rust — это язык программирования, позволяющий каждому разрабатывать надёжное и быстрое ПО. Если предыдущую версию Rust вы установили средствами rustup, получение текущей версии не составит особого труда: $ rustup update stable Если у вас всё ещё нет rustup, вы можете получить его с соответствующей страницы на нашем сайте. Детальный обзор данного релиза доступен на GitHub.
AloneCoder;Модели дженериков и метапрограммирования: Go, Rust, Swift, D и другие;https://habr.com/ru/company/mailru/blog/461321/;" В некоторых сферах программирования нормально хотеть написать такую структуру данных или алгоритм, которые могут работать с элементами разных типов. Например, список дженериков или алгоритм сортировки, которому нужна только функция сравнения. В разных языках предложены всевозможные способы решения этой задачи: от простого указания программистам на подходящие общие функции (С, Go) до таких мощных систем дженериков, что они стали полными по Тьюрингу (Rust, C++). В этой статье я расскажу о системах дженериков из разных языков и их реализации. Начну с решения задачи в языках без подобной системы (вроде С), а затем покажу, как постепенное добавление расширений приводит к системам из других языков."
RustLangRu;Выпуск Rust 1.40.0: #[non_exhaustive], усовершенствования макросов и прочие улучшения;https://habr.com/ru/post/481070/;Команда Rust рада сообщить о выпуске новой версии, 1.40.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.40.0 вам достаточно выполнить следующую команду: $ rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что вошло в стабильную версию 1.40.0 Основными новшествами являются введение атрибута #[non_exhaustive], улучшения macros!() и #[attribute]. Наконец, миграционные предупреждения анализатора заимствований стали ошибками в Rust 2015. Смотрите подробности выпуска для дополнительной информации.
kvark;Зачем нам нужен Rust?;https://habr.com/ru/post/224607/;"Rust — системный язык программирования, который исполняется чертовски быстро, предотвращает почти все падения, а также устраняет неопределённости совместного доступа к данным. Он разрабатывается Mozilla как инструмент для создания обозревателя нового поколения — Servo.  Пункты соприкосновения Данное определение языка кажется сказкой, ибо доступные нам прежде инструменты всегда балансировали между скоростью и надёжностью. "
balajahe;Почему Rust должен стать функциональным языком программирования;https://habr.com/ru/post/482318/;"Привет, Хабр!  Начав изучение Scala, я сразу столкнулся с тем, что функциональная реализация простейшего алгоритма быстрой сортировки работает радикально медленней и потребляет существенно больше памяти, чем аналогичная императивная реализация. При этом никто не спорит, что функциональный код более краток, выразителен, и устойчив к ошибкам. Переписав оба примера на Rust, я обнаружил несколько важных вещей, которыми и хочу поделиться. Подробности под катом, а здесь приведу лишь краткие выводы:   Для императивной реализации — выигрыш от Rust получился всего 20 %. Это означает, что JVM вплотную приблизилась к нативной производительности, и тут уже нечего улучшать. Для функциональной реализации — Rust оказался быстрее в 4.5 раза, потребление памяти снизилось в 5.5 раза, а отсутствие сборщика мусора сделало программу более стабильной (меньше разброс показателей). Это интересно для тех, кто хочет писать быстрые функциональные программы. Концепция единственного владельца данных (и единственной мутабельной ссылки), принятая в Rust, очень близка концепции иммутабельности, в результате чего функциональные алгоритмы, основанные на неизменяемости, рекурсии и копировании, легко ложатся на Rust практически без переписывания, тогда как императивные алгоритмы заставляют редизайнить код, учитывать мутабельность ссылок, времена жизни, и т.д.  Вывод — Rust как будто специально создан для ФП, хотя возможности его синтаксиса пока не дотягивают до Scala."
RustLangRu;Выпуск Rust 1.43.1: корректировочный выпуск;https://habr.com/ru/post/500948/;Команда Rust опубликовала корректировочный выпуск Rust, 1.43.1. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.43.1 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что вошло в версию 1.43.1 Rust 1.43.1 посвящён двум регрессиям, появившимся в 1.43.0. Также в этом выпуске обновлён OpenSSL, используемый Cargo.
RustLangRu;Rust 1.48.0: упрощение создания ссылок и псевдонимы поиска;https://habr.com/ru/post/528204/;Команда Rust рада сообщить о выпуске новой версии, 1.48.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.48.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что вошло в стабильную версию 1.48.0 Звездой этого выпуска стал rustdoc с изменениями, облегчающими написание документации! Смотрите подробные примечания к выпуску, чтобы узнать о других изменениях, не представленных в данном анонсе.
RustLangRu;Rust 1.51.0: const generics MVP, новый распознаватель функциональности Cargo;https://habr.com/ru/post/549214/;Команда Rust рада сообщить о выпуске новой версии — 1.51.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.51.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что было стабилизировано в 1.51.0 Этот выпуск представляет одно из наиболее крупных дополнений языка Rust и Cargo за долгое время, включающее в себя стабилизацию константных обобщений в минимально полезном варианте и новый распознаватель функциональности в Cargo. Давайте посмотрим подробнее!
ph_piter;Rust — теперь и на платформе Android;https://habr.com/ru/company/piter/blog/551730/;Корректность кода на платформе Android является наиважнейшим аспектом в контексте безопасности, стабильности и качества каждого релиза Android. По-прежнему сложнее всего вытравливаются ошибки, связанные с безопасностью памяти и попадающиеся в коде на С и C++. Google вкладывает огромные усилия и ресурсы в обнаружение, устранение багов такого рода, а также в уменьшение вреда от них, старается, чтобы багов в релизы Android проникало как можно меньше. Тем не менее, несмотря на все эти меры, ошибки, связанные с безопасностью памяти, остаются основным источником проблем со стабильностью. На их долю неизменно приходится ~70% наиболее серьезных уязвимостей Android.Наряду с текущими и планируемыми мероприятиями по улучшению выявления багов, связанных с памятью, Google также наращивает усилия по их предотвращению. Языки, обеспечивающие безопасность памяти – наиболее эффективные и выгодные средства для решения этой задачи. Теперь в рамках проекта Android Open Source Project (AOSP) наряду с языками Java и Kotlin, отличающимися безопасностью памяти, поддерживается и язык Rust, предназначенный для разработки операционной системы как таковой. 
DmitriNov;Улучшаем Кузнечик на Rust;https://habr.com/ru/post/555582/;Порой, простое и красивое решение лучше правильного и выдержанного. Возможно, именно так бы и было, если в жизни всё происходило как в учебниках. На практике же, нужно пройти долгий путь, чтобы создать задуманное.Отступая от лирики, в данной статье я хочу рассказать заинтересованному читателю про шифрование по ГОСТ, а именно – алгоритм «Кузнечик», и про то, что стоит обратить внимание на новые и перспективные средства – язык Rust.
RustLangRu;Rust 1.55: обновление `std::io::ErrorKind`, изменение алгоритма разбора чисел с плавающей точкой;https://habr.com/ru/post/577336/;Команда Rust рада сообщить о выпуске новой версии — 1.55.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.55.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub.
NCrashed;Сравнение D и C++ и Rust на примерах;https://habr.com/ru/post/225507/;"Данный пост основывается на Сравнение Rust и С++ на примерах и дополняет приведенные там примеры кодом на D с описанием различий.  Все примеры были собраны с помощью компилятора DMD v2.065 x86_64. "
alizar;Mozilla наметила план для выпуска Rust 1.0;https://habr.com/ru/post/237059/;"Организация Mozilla вышла на финишную прямую в подготовке языка программирования Rust 1.0. Разработчики говорят, что это торжественное событие состоится примерно в конце года. После бета-тестирования выйдет финальный релиз. С этого момента перспективный язык программирования можно использовать в боевых условиях: код гарантированно будет компилироваться в следующих версиях.  Дело не только в компиляции. Mozilla считает, что дизайн Rust наконец-то приобретает желаемую минималистичную форму. К примеру, раньше было несколько типов указателей, сейчас остались только &T, и &mut T. Упрощение затронуло и другие аспекты, в том числе замыкания, которые вызывали много споров.  Rust сочетает в себе эффективность С и С++ с безопасностью Java.  Весь дизайн построен на концепции «владения и заимствования» (ownership and borrowing). Изначально предполагалось использовать механизм владения для быстрого и безопасного переноса данных между процессами. Но потом пришло понимание, что этот же механизм можно использовать для передачи значительной части функций в библиотеки. В итоге, Rust получился даже более низкоуровневым, чем разработчики предполагали, и без ущерба для безопасности. На минимальной конфигурации Rust можно даже написать ядро операционной системы (примеры: 1, 2, 3)! "
Googolplex;Анонс Rust 1.2;https://habr.com/ru/post/264387/;Сегодня завершаются циклы стабильного Rust 1.2 и бета-Rust 1.3! Читайте дальше об основных изменениях или переходите к более подробным release notes.
mkpankov;Создаём REST-сервис на Rust. Часть 5: обработчики, рефакторинг, и макросы;https://habr.com/ru/post/269903/;"Всем привет!  Мы продолжаем писать веб-сервис на Rust. Оглавление:  Часть 1: прототип Часть 2: читаем INI; multirust Часть 3: обновляем базу из консоли Часть 4: переходим к REST API Часть 5 (эта): обработчики, рефакторинг, и макросы  Теперь мы рассмотрим собственно обработчики запросов к API и перепишем предыдущий, страшный код. И вообще, это последняя статья из цикла, поэтому здесь будут рефакторинг, стиль, макросы и все-все-все. Это самая длинная часть. "
snuk182;Leakpocalypse: Rust может неприятно удивить;https://habr.com/ru/post/348344/;"Прим. пер.: Кто-то должен был сделать перевод этой статьи, несмотря на то, что она достаточно стара (2015 год), поскольку она показывает очень важную особенность работы с памятью в Rust — с помощью безопасного (не помеченного как unsafe) кода можно создавать утечки памяти. Это должно отрезвлять народ, верящий во всемогущность borrow checker'а. Спойлер — внутри про невозможность отслеживания циклических ссылок, а также старые болезни некоторых типов из std, на момент перевода благополучно вылеченные. Несмотря на наличие в Книге главы про безопасный код (спасибо за напоминание ozkriff), а также разъяснительной статьи русскоязычного сообщества (спасибо за напоминание mkpankov), я решил выполнить перевод для наглядной демонстрации серьезности непонимания возможностей управления памятью Rust. Вероятнее всего, данная статья ранее не переводилась по причине весьма специфических терминов автора, которые НЛО в тираж не пропустит. По этой причине перевод не совсем дословный."
freecoder_xx;Выпуск Rust 1.28;https://habr.com/ru/post/419259/;Команда разработчиков Rust рада сообщить о выпуске новой версии Rust: 1.28.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust с помощью rustup, то для обновления Rust до версии 1.28.0 вам достаточно выполнить: $ rustup update stable Если у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.28.0 можно ознакомиться на GitHub. Что вошло в стабильную версию 1.28.0 Глобальные аллокаторы С помощью аллокаторов программы на Rust получают память во время выполнения. Раньше Rust не позволял изменять способ распределения памяти, что ограничивало его использование в некоторых случаях. 
idubrov;Генерация типаж-объектов на лету (или безумие с Rust);https://habr.com/ru/post/432202/;"В этой статье мы немного потешимся с языком программирования Rust, а в частности, с типаж-объектами. Когда я знакомился с Rust, одна из деталей реализации типаж-объектов мне показалась интересной. А именно то, что виртуальная таблица функций находится не в самих данных, а в ""толстом"" указателе на них. Каждый указатель на типаж-объект ) содержит указатель на сами данные, а так же ссылку на виртуальную таблицу, где будут находиться адреса функций, реализующий данный типаж-объект для заданной структуры (но так как это деталь реализации, то поведение может поменяться."
MaxRokatansky;Go глазами Rust-программиста: первые впечатления;https://habr.com/ru/company/otus/blog/500278/;"В преддверии старта курса «Разработчик Golang» подготовили перевод интересного материала. А каким было ваше первое впечатление от Go?    На протяжении последних нескольких недель мне довелось использовать Go в работе. Я впервые использовал Go на более-менее крупном и серьезном проекте. До этого я достаточно много читал про Go и практиковался на примерах и небольших программах при изучении возможностей Rust, но реальное программирование — это совсем другое дело.  Я подумал, что вам может быть интересно услышать о моих впечатлениях. Я постараюсь не зацикливаться на сравнениях с Rust, но так как это мой основной язык, их не избежать. Я должен заранее вас предупредить о сильном уклоне в сторону Rust, но я сделаю все возможное, чтобы быть объективным."
RustLangRu;Rust 1.47.0: const generics для массивов, LLVM 11, Control Flow Guard и сокращение трассировок;https://habr.com/ru/post/522304/;Команда Rust рада сообщить о выпуске новой версии, 1.47.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.47.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что вошло в стабильную версию 1.47.0 Данный выпуск не содержит новых языковых особенностей, хотя он добавляет одну долгожданную функцию стандартной библиотеки. По большей части, в этом выпуске повышается качество жизни, добавляются константные функции и стабилизируется стандартная библиотека, а также улучшается инструментарий. Смотрите подробные примечания к выпуску, чтобы узнать о других изменениях, не представленных в данном анонсе.
RustLangRu;Rust 1.54.0: Поддержка SIMD инструкций в WebAssembly и инкрементальная компиляция снова включена по умолчанию;https://habr.com/ru/post/570414/;Команда Rust рада сообщить о выпуске новой версии — Rust 1.54.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если у вас установлена предыдущая версия Rust через rustup, то обновиться на версию языка Rust 1.54.0 все так же просто, как никогда: rustup update stable Если вы всё ещё не используете rustup, вы можете установить rustup на соответствующей странице нашего веб-сайта и ознакомиться с подробными примечаниями к выпуску 1.54.0 на GitHub. Что стабилизировано в 1.54.0 Этот выпуск содержит несколько новых возможностей языка.  Добавлены новые сценарии использования макросов Стабилизированы компиляторные вставки на платформе wasm32 Инкрементальная компиляция по умолчанию 
alizar;Вышел Rust 0.9;https://habr.com/ru/post/208664/;" Mozilla выпустила новую версию компилятора Rust 0.9 и соответствующих инструментов.   Rust — это компилируемый и мультипарадигмальный язык для системного программирования, который позиционируется как альтернатива С/С++. Визуально он похож на C, но отличается в деталях синтаксиса и семантики. Идеально подходит для параллельных вычислений.  Разработчики говорят о существенном улучшении рантайма и подсистемы ввода-вывода. Так, в компиляторе появились статические ссылки и поддерживается оптимизация во время линковки (link-time). В языке уменьшено количество разных видов замыканий, чтобы упростить и сделать более логичным синтаксис. "
potan;Числовые классы типов в Rust;https://habr.com/ru/post/239151/;"Абстракции Rust отличаются от привычных в ООП. В частности вместо классов (классов объектов) используются классы типов, которые называются «trait» (не следует путать с trait из Scala, где под этим термином прячутся примеси — mixin). Классы типов не уникальны для Rust, они поддержаны в Haskell, Mercury, Go, из можно реализовать слегка извращенным способом на Scala и C++.  Я хочу показать, как они реализуются в Rust на примере дуальных чисел и разобрать отдельные нетривиальные (или плохо проработанные) моменты.  Интерфейсы числовых типов довольно громоздки, и я буду вставлять здесь только фрагменты кода. Весь код доступен на github (Update: работающая версия доступна на crates.io). Большинство реализованных здесь интерфейсов имеют статус experemental или unstable и скорее всего будут меняться. Я постараюсь поддерживать код и текст актуальными.  Rust поддерживает перегрузку операций, но, в отличие от C++, у операций есть метод-синоним с обычным буквенным именем. Так a+b может быть записано a.add(b), а для переопределения операции '+' надо просто реализовать метод add.  "
namespace;Почему Go и Rust не соперники, а чертовы враги;https://habr.com/ru/post/262841/;"Прим. переводчика — это всего лишь перевод статьи, которая отражает альтернативную точку зрения на тему «Go против Rust». Вовсе не обязятельно показывать свое несогласие с мнением автора на карме переводчика, спасибо.  Эта статья — небольшой ответ к записи в блоге Дейва Чейни «Почему Go и Rust не соперники». Я настоятельно рекомендую вам почитать его доводы! Вероятно, вам также понравится замечательная дискуссия на реддите.  На самом деле, Go и Rust решают одну и ту же самую проблему: оба пришли в наш мир, чтобы сделать жизнь программистов проще. Go до безобразия упростил концепт конкурентного (ака многопоточного) программирования и мне кажется, сделал программирование приятным занятием, ведь код на Go действительно приятно читать. В то ж время, Rust подарил нам мощные zero-cost абстракции… для паттерн-матчинга. Звучит оправданно, не так ли? Шутки-шутками, но Rust действительно сделал многие непростые штуки проще (частое заблуждение: он не избавился от них). Его дьявольская система типов позволяет гарантировать безопасность памяти, и в том числе, избавиться от состояния гонки, что звучит очень заманчиво. "
greedykid;Rust в деталях, часть 2;https://habr.com/ru/post/278635/;"Часть 2: Отправка и получение сообщений В этой серии статей мы рассматриваем процесс создания масштабируемого сервера для чата в реальном времени, во всех деталях. Цель статьи — показать пример практического применения языка Rust на фоне изучения концепций системного программирования и системных API, шаг за шагом.  Вторая часть является прямым продолжением первой, поэтому если вы ее пропустили (или забыли контекст), то рекомендую сначала ознакомиться с ней. В этой части мы продолжаем реализацию протокола WebSocket. "
Virviil;Функциональный Rust: Готовим говядину;https://habr.com/ru/post/283450/; Попался мне на глаза Brainfuck-оподобный язык Cow. И решил я написать для него интерпретатор на новомодном Rust. А так как Rust — мультипарадигменный язык, то стиль написания программы будет функциональный. Чтобы узнать что получилось — прошу под кат.
mkpankov;Анонс Rust 1.9;https://habr.com/ru/post/301994/;Мы рады представить новую версию Rust 1.9. Rust — это системный язык программирования, нацеленный на безопасную работу с памятью, скорость и параллельное выполнение кода. Как обычно, вы можете установить Rust 1.9 с соответствующей страницы официального сайта, а также ознакомиться с подробным списком изменений в этой версии на GitHub. В этот релиз вошло порядка 1400 патчей. Что вошло в стабильную версию 1.9 Управляемая размотка стека Самое большое изменение в Rust 1.9 — стабилизация модуля std::panic, который предоставляет методы остановки процесса размотки стека, запущенного паникой:
varanio;FFI: пишем на Rust в PHP-программе;https://habr.com/ru/post/455614/;В PHP 7.4 появится FFI, т.е. можно подключать библиотеки на языке C (или, например, Rust) напрямую, без необходимости писать целый extension и разбираться в его многочисленных нюансах.  Давайте попробуем написать код на Rust, и используем его в PHP-программе
RustLangRu;Rust 1.46.0: track_caller и улучшения const fn;https://habr.com/ru/post/517018/;Команда Rust рада объявить о новой версии Rust 1.46.0. Rust — это язык программирования, который позволяет каждому создавать надёжное и эффективное программное обеспечение. Если у вас установлена предыдущая версия Rust через rustup, получить Rust 1.46.0 так же просто, как: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта и ознакомиться с подробными примечаниями к выпуску 1.46.0 на GitHub. Что вошло в стабильную версию 1.46.0 Этот выпуск достаточно небольшой, с улучшениями в const fn, стабилизацией двух новых API в стандартной библиотеке и одной опции, удобной для авторов библиотек. Смотрите подробные примечания к выпуску чтобы узнать о других изменениях, не представленных в данном анонсе.
MaxRokatansky;Обнаружение лиц в Node.js с использованием Rust и WebAssembly;https://habr.com/ru/company/otus/blog/530258/;В последней статье мы рассказывали, как вызывать функции Rust из Node.js. Сегодня мы расскажем, как написать приложение AIaaS (англ. Artificial Intelligence as a Service — «искусственный интеллект как услуга») на базе Node.js.Большинство приложений с искусственным интеллектом сейчас разрабатываются на языке Python, а главным языком программирования для веб-разработки является JavaScript. Для того чтобы реализовать возможности ИИ в вебе, нужно обернуть алгоритмы ИИ в JavaScript, а именно в Node.js.Однако ни Python, ни JavaScript сами по себе не подходят для разработки ИИ-приложений с большим объемом вычислений. Это высокоуровневые, медленные языки со сложной средой выполнения, в которых удобство использования достигается за счет снижения производительности. Для решения этой проблемы блоки интеллектуальных вычислений в Python оборачиваются в нативные C/C++-модули. Точно так же можно сделать и в Node.js, но мы нашли решение получше — WebAssembly.Виртуальные машины WebAssembly поддерживают тесную интеграцию с Node.js и другими средами выполнения JavaScript-кода. Они отличаются высокой производительностью, безопасны с точки зрения доступа к памяти, изначально защищены и совместимы с разными операционными системами. В нашем подходе сочетаются лучшие возможности WebAssembly и нативного кода.
seweb;Rust на примерах. Часть 1;https://habr.com/ru/post/232829/;"Этот цикл статей является вольным переводом книги «Rust by Example», которую пишет Хорхе Апарисио на Github.  На момент написания этого топика автор книги создал 49 глав, в первой части будет перевод первых пяти. Убедитесь, что Rust установлен и под рукой имеется документация.   Давайте начинать! "
a553;В Rust 1.0 исключений не будет;https://habr.com/ru/post/242269/;"Сегодня Аарон Тюрон — разработчик, недавно присоединившийся к разработке Rust в Mozilla — объявил об отсрочке реализации какого-либо механизма исключений, кроме уже существующего макроса try! и типа Result, до неопределённого момента после первого релиза языка программирования Rust.  Это означает, что в Rust 1.0 будут отсутствовать исключения первого класса — то есть, полностью интегрированные с другими фичами языка.  Для обработки ошибок в данной момент в Rust существует тип Result { Ok(value), Err(why) } и макрос try!. Тип Result представляет из себя перечисление (enum), похожее на Option { Some(value), None } и связанное с ним по смыслу. Вариант None типа Option говорит об отстутствии значения, а вариант Err(why) типа Result уточняет, почему значение отсутствует.  Rust предлагает возвращать тип Result из функций, чтобы передавать значение возврата или причину, по которой значение вернуть не удалось. Макрос try! в свою очередь позволяет автоматически возвращать Err(why) из текущей функции, если вызов другой функции не удался (применяется к объекту типа Result). "
kstep;Создание функции на Rust, которая возвращает String или &str;https://habr.com/ru/post/274565/;"От переводчика  Это последняя статья из цикла про работу со строками и памятью в Rust от Herman Radtke, которую я перевожу. Мне она показалась наиболее полезной, и изначально я хотел начать перевод с неё, но потом мне показалось, что остальные статьи в серии тоже нужны, для создания контекста и введения в более простые, но очень важные, моменты языка, без которых эта статья теряет свою полезность.  Мы узнали как создать функцию, которая принимает String или &str (англ.) в качестве аргумента. Теперь я хочу показать вам как создать функцию, которая возвращает String или &str. Ещё я хочу обсудить, почему нам это может понадобиться. "
FL3;Разработка игр на Rust. Обзор экосистемы;https://habr.com/ru/post/303976/; Здравствуйте! Я занимаюсь разработкой игры на Rust и хочу рассказать об этом.  Моя первая статья будет полезна тем, кто хочет начать делать игру на Rust, но не уверен, какие из пакетов (крейтов) стоит использовать и что вообще происходит в экосистеме Rust для игрового разработчика. 
Kaspersky_Lab;Второй митап сообщества любителей Rust в «Лаборатории Касперского»;https://habr.com/ru/company/kaspersky/blog/315502/;"Весной прошёл первый митап сообщества rustycrate.ru в штаб-квартире «Лаборатории Касперского». А в мире Rust за прошедшие полгода произошло много интересного: были реализованы футуры и асинхронный ввод-вывод поверх них, сделан первый выпуск системы поддержки IDE, появилась инкрементальная сборка. Иными словами, опять есть о чем поговорить.    Поэтому 22 ноября в 19:00 мы собираемся провести еще один митап сообщества, и приглашаем всех, кого интересует этот язык программирования, в наш московский офис. На встрече мы планируем обсудить опыт реального применения Rust в задачах системного программирования и тестирования, поговорим о том, что получается хорошо, а что — не очень. Докладчики из сообщества расскажут, как Rust помогает им и как его готовить, чтобы он помогал вам.  "
Kaspersky_Lab;Новый Rust-митап уже 18 мая в ЛК: приходите – будет полезно;https://habr.com/ru/company/kaspersky/blog/328500/;18 мая в московском офисе «Лаборатории Касперского» пройдёт третья по счету встреча любителей и профи, пишущих код на Rust. Гостей нашего митапа как всегда ждёт интересная и насыщенная программа с обсуждением самых актуальных вопросов: мы поговорим о реализации ООП в Rust и о криптографических библиотеках, а также раскроем все tips&tricks работы с экспортом функций.   
LooMaclin;Выпуск Rust 1.24;https://habr.com/ru/post/349252/;Команда Rust рада сообщить о новой версии Rust: 1.24.0. Rust — это системный язык программирования, нацеленный на безопасность, скорость и параллельное выполнение кода. Если у вас установлена предыдущая версия Rust, для обновления достаточно выполнить: $ rustup update stable Если же у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.24.0 можно ознакомиться на GitHub. Что вошло в стабильную версию 1.24.0 Этот релиз содержит две очень интересные новые фичи: rustfmt и инкрементальную компиляцию!
mr_elzor;Безопасно ускоряем Erlang приложение c помощью NIF на Rust;https://habr.com/ru/post/349398/;В статье освещен вопрос интеграции Erlang и Rust на примере реализации вероятностной структуры данных Бёртона Блума, позволяющей проверить принадлежность элемента множеству с необходимой точностью. 
m1rko;Rust в 2019 году и далее: ограничения на рост;https://habr.com/ru/post/434684/;"Как и просили, вот мои предложения по развитию Rust в 2019 году и далее.  Должен отметить, что говорю только за себя, а я даже не очень активный участник проекта. Более того, эти предложения в значительной степени относятся ко многим проектам. Rust — частный случай, но именно он сейчас наводит на некоторые размышления.  Ещё должен отметить, что я в целом доволен развитием Rust, и это предложение делается только ради сохранения дальнейшего благополучия, чтобы избежать некоторых проблем, которые я сейчас наблюдаю со стороны.  TL;DR: Важно осознать проблему и запланировать явные механизмы по ограничению роста двух вещей:   Обязательные общие технические артефакты, особенно само определение языка. Нагрузка на людей, участвующих в обсуждении этих артефактов. "
funkill;Выпуск Rust 1.34;https://habr.com/ru/post/448366/;"Привет, Хабр! Представляю вашему вниманию перевод статьи ""The Rust Release Team ""Announcing Rust 1.34.0"". Команда разработчиков Rust рада сообщить о выпуске новой версии Rust, 1.34.0. Rust — это язык программирования, который даёт возможность каждому создавать надёжное и эффективное программное обеспечение. Если у вас установлена предыдущая версия Rust с помощью rustup, то для обновления Rust до версии 1.34.0 вам достаточно выполнить: $ rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. Что вошло в стабильную версию 1.34.0 Основное улучшение этого выпуска это поддержка альтернативных cargo-реестров. Релиз также включает поддержку ? в документационных тестах, некоторые улучшения в #[attribute(...)] и стабилизацию TryFrom. Читайте далее о ключевых вещах или можете посмотреть подробные примечания к выпуску для дополнительной информации."
EvilMan;Rust crashcourse. Правило трёх — параметры, итераторы и замыкания;https://habr.com/ru/post/537546/;"Ниже представлен перевод одной из частей серии статей Rust Crash Course от Майкла Сноймана, которая посвящена механизмам передачи параметров, итераторам и замыканиям относительно того, как передаётся владение, и соотносится с мутабельностью и временами жизни.  Так же постарался переводить максимально близко к авторскому стилю, но сократил немного междомедий и восклицаний, не сильно значимых для смысла."
Andrey_ib;Rust включили в список основных языков для разработки платформы Android;https://habr.com/ru/company/selectel/blog/550176/;" На днях компания Google сделала важный шаг, объявив о включении языка программирования Rust в число языков, которые допускаются для разработки платформы Android. Да, еще в 2019 году компилятор Rust включили в дерево исходных текстов Android, но это была экспериментальная поддержка.  Сейчас в Android планируется добавить первые компоненты на Rust, это будут новые реализации механизма межпроцессного взаимодействия Binder и Bluetooth-стека. Все это хорошо, но зачем весь этот сыр-бор с включением Rust?"
JIghtuse;Heartbleed на Rust;https://habr.com/ru/post/249537/;"В комментариях к одной из ссылок на Hacker News некто утверждал, что использование Rust предотвратило бы Heartlbeed, что код бы даже не скомпилировался. Это прозвучало как вызов!  Тред начинается вот здесь. Я не собирался ни к кому придираться, но утверждение о предотвращении Heartbleed оказалось удачно сформулировано. В отличие от расплывчатых заявлений о безопасности работы с памятью в целом, конкретно данное утверждение можно протестировать. "
stalehard;Начинаем использовать Rust;https://habr.com/ru/post/270137/;"  Всем привет!  С недавнего времени я начал изучать прекрасный язык Rust. Практическое применение этого языка для себя я вижу во встраивании в критические по производительности места кода (по крайней мере, до момента «дозревания» и обрастания библиотеками и фреймворками).  Для закрепления теоретических навыков я решил сделать небольшой проект, суть которого состоит в следующем: динамическая библиотека на Rust реализует упрощенный вариант Алгоритма шинглов и посредством FFI позволяет подключать её (библиотеку). Всем кому интересно прошу под кат. "
deko;Rust 1.5: Cargo с блэкджеком;https://habr.com/ru/post/275157/;Под новогодние праздники был выпущен Rust 1.5. Так как близится релиз 1.6, хочу наверстать упущенное, и рассказать о том, что появилось в последней стабильной версии. Существенные изменения затронули Cargo! 
DarkEld3r;Анонс Rust 1.8;https://habr.com/ru/post/281152/;"Мы рады представить новую версию Rust — 1.8. Rust — это системный язык программирования, нацеленный на безопасную работу с памятью, скорость и параллельное выполнение кода.  Как обычно, вы можете установить Rust 1.8 с соответствующей страницы официального сайта, а также ознакомиться с подробным списком изменений в этой версии на GitHub. В этот релиз вошло порядка 1400 патчей.  "
vitvakatu;Прекрасные конечные автоматы на Rust;https://habr.com/ru/post/324382/;"Перевод статьи Andrew Hobden ""Pretty State Machine Patterns in Rust"". Ссылка на оригинал в конце. Последнее время я много размышлял о шаблонах проектирования и приемах, которые мы используем в программировании. Это и в самом деле прекрасно — начать исследовать проект и видеть знакомые шаблоны и стили, которые ты уже не раз встречал. Это облегчает понимание проекта и дает возможность ускорить работу. Иногда ты работаешь над новым проектом и понимаешь, что тебе нужно сделать что-то также, как ты делал это в прошлом проекте. Это может быть не часть функционала или библиотека, это может быть то, что нельзя обернуть в изящный макрос или маленький контейнер. Это может быть просто шаблон проектирования или структурная концепция, которые хорошо решают проблему. Один интересный шаблон, часто применяемый к таким проблемам — ""Конечный автомат"". Предлагаю потратить немного времени, чтобы понять, что именно имеется ввиду под этим словосочетанием, и почему же это так интересно."
FL3;Приглашаем на Rust Gamedev Митап 14 сентября;https://habr.com/ru/post/336388/;Привет хабр! Приглашаю на первую встречу энтузиастов Rust и игровой разработки в Санкт-Петербурге!  Rust — современный системный язык программирования с мощной системой типов. Безопасное управление памятью без сборщика мусора и абстракции с нулевой стоимостью делают Rust интересным выбором для игровой разработки. На мероприятии будет возможность из первых рук услышать об опыте применения Rust. 
cosmrc;LL(*) парсер с использованием Rust макросов;https://habr.com/ru/post/349054/;" Wow. Such Rust. Much macro. © картинка - Твиттер аккаунт Servo Язык Rust стремительно набирает обороты. Кто-то пророчит ему стать заменой C/C++, кому-то он просто нравится. Я скорее принадлежу ко второй группе. Разработчики стараются сделать его удобным и безопасным. В нем есть конструкции и принципы, которые еще не скоро появятся в ""плюсах"", ввиду инерции комитета и множества других причин. Поэтому, для всех личных проектов я предпочитаю использовать именно Rust. Так сложилось, что с переменным успехом я пишу компиляторы. Не успел правда написать ни одного, но мне более интересен сам процесс, чем результат. Однажды, когда я в очередной раз застрял с синтаксическим анализатором (он же ""парсер""), я подумал, что уж очень много я пишу однотипного кода. И этот однотипный код один в один ложится на грамматику в форме Бэкуса — Наура (БНФ). Немного подумав, я решил, что мне надо написать генератор кода на основе грамматики. И для этой задачи как нельзя хорошо подходят макросы в Rust.  В статье описана реализация LL(*) парсера с использованием макросов. И реализован парсер простых математических выражений. В итоге парсер для БНФ грамматики: expr ::= sum sum  ::= mul ""+"" sum | mul ""-"" sum | mul mul  ::= atom ""*"" mul | atom ""/"" mul | atom atom ::= ""("" expr  "")"" | number | neg; neg  ::= ""-"" atom Можно сгенерировать с помощью серии макросов: rule!(expr, sum); rule!(sum, or![      and![(mul, token('+'), sum) => make_operator],      and![(mul, token('-'), sum) => make_operator],      mul ]); rule!(mul, or![      and![(atom, token('*'), mul) => make_operator],      and![(atom, token('/'), mul) => make_operator],      atom ]); rule!(atom, or![     and![(token('('), expr, token(')')) => |_lbrace, stat, _rbrace| Some(stat)],     num,     neg ]); rule!(neg, and![(token('-'), atom) => |_, number| Some(Box::new(expression::Expression::Negate(number)))]);"
bmusin;Rust: используем serde для сериализации;https://habr.com/ru/post/350956/;Сериализация данных посредством serde. Недавно я писал Rust-код для работы со сторонним источником данных в TOML-формате. В других языках я бы подгрузил данные какой-либо TOML-библиотекой и прогнал бы по ним мою программу, однако я слышал про serde — библиотеку сериализации на Rust, так что я решил попробовать ее. Подробности — под катом.
ozkriff;Выпуск Rust 1.33;https://habr.com/ru/post/442244/;"Команда разработчиков Rust рада сообщить о выпуске новой версии Rust, 1.33.0. Rust — это язык программирования, который дает возможность каждому создавать надежное и эффективное программное обеспечение. Если у вас установлена предыдущая версия Rust с помощью rustup, то для обновления Rust до версии 1.33.0 вам достаточно выполнить: $ rustup update stable Если у вас еще не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. С подробными примечаниями к выпуску Rust 1.33.0 можно ознакомиться на GitHub. Что вошло в стабильную версию 1.33.0 Основные улучшения этого выпуска: значительное расширение возможностей const fn и стабилизация нового Pin API. Расширение возможностей const fn const fn теперь умеет гораздо больше, а именно:  безусловное (irrefutable) сопоставление с образцом (например, const fn foo((x, y): (u8, u8)) { ... }) let привязки (например, let x = 1;) изменяемые let привязки (например, let mut x = 1;) выражения присваивания (например x = y) и операторов присваивания (например, x += y), включая присваивание проекциям (например, полю структуры или результату оператора индексирования — x[3] = 42) инструкции выражений (expression statements) (например, 3;) "
sickfar;OS1: примитивное ядро на Rust для x86;https://habr.com/ru/post/445506/;Я решил написать статью, а если получится — то и серию статей, чтобы поделиться своим опытом самостоятельного исследования как устройства Bare Bone x86, так и организации операционных систем. На данный момент мою поделку нельзя назвать даже операционной системой — это небольшое ядро, которое умеет загружаться из Multiboot (GRUB), управлять памятью реальной и виртуальной, а также выполнять несколько бесполезных функций в режиме многозадачности на одном процессоре. При разработке я не ставил себе целей написать новый Linux (хотя, признаюсь, лет 5 назад мечтал об этом) или впечатлить кого-либо, поэтому особо впечатлительных прошу дальше не смотреть. Что мне на самом деле захотелось сделать — разобраться, как устроена архитектура i386 на самом базовом уровне, и как именно операционные системы делают свою магию, ну и покопать хайповый Rust. В своих заметках я постараюсь поделиться не только исходными текстами (их можно найти на GitLab) и голой теорией (ее можно найти на многих ресурсах), но и тем путем, который я прошел, чтобы найти неочевидные ответы. Конкретно в этой статье я расскажу о компоновке файла ядра, его загрузке и инициализации. Мои цели — структурировать информацию у себя в голове, а так же помочь тем, кто идет похожим путем. Я понимаю, что аналогичные материалы и блоги уже есть в сети, но чтобы прийти к моему текущему положению, мне пришлось долго собирать их воедино. Всеми источниками (во всяком случае, которые вспомню), я поделюсь прямо сейчас.
freecoder_xx;Замыкание обобщенного типа в Rust;https://habr.com/ru/post/454310/;" В этой короткой статье я расскажу о паттерне в Rust, который позволяет ""сохранять"" для последующего использования тип, переданный через обобщенный метод. Этот паттерн встречается в исходниках Rust-библиотек и я тоже иногда его использую в своих проектах. Мне не удалось найти в сети публикаций о нем, поэтому я дал ему свое название: ""Замыкание обобщенного типа"", и в этой статье хочу рассказать, что он из себя представляет, зачем и как его можно использовать."
RustLangRu;Выпуск Rust 1.38.0: конвейерная компиляция, #[deprecated] для макросов и std::any::type_name;https://habr.com/ru/post/469061/;Команда разработчиков Rust рада сообщить о выпуске новой версии, 1.38.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.38.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. Что вошло в стабильную версию? Изюминка данного выпуска — конвейерная компиляция.
Ontologic;Как написать смарт контракт на WebAssembly в сети Ontology? Часть 1: Rust;https://habr.com/ru/post/471878/;"  Технология Ontology Wasm снижает стоимость переноса смарт контрактов dApp со сложной бизнес- логикой на блокчейн, тем самым значительно обогащая dApp экосистему.  В настоящее время Ontology Wasm одновременно поддерживает разработку как на языке Rust, так и на языке C++. Язык Rust лучше поддерживает Wasm, а сгенерированный байт-код проще, что может еще больше снизить стоимость контрактных вызовов. Итак, как использовать Rust для разработки контракта в сети Ontology?"
RustLangRu;Выпуск Rust 1.43.0: улучшение производительности компилятора и вывода типов для примитивов, item в макросах;https://habr.com/ru/post/498998/;Команда Rust рада сообщить о выпуске новой версии, 1.43.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.43.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что вошло в стабильную версию 1.43.0 Значительных изменений и нововведений этот релиз не содержит. Мы стабилизировали несколько новых API, улучшили производительность компилятора и добавили некоторые изменения в систему макросов. Для более подробной информации смотрите подробные примечания к выпуску.
ppskriptum;Rust vs. State;https://habr.com/ru/post/516784/;"Важно: для комфортного прочтения статьи нужно уметь читать исходный код на Rust и понимать, почему оборачивать всё в Rc<RefCell<...>> — плохо. Введение Rust не принято считать объектно-ориентированным языком: в нём нет наследования реализации; инкапсуляции на первый взгляд тоже нет; наконец, столь привычные ООП-адептам графы зависимостей мутабельных объектов здесь выглядят максимально уродливо (вы только посмотрите на все эти Rc<RefCell<...>> и Arc<Mutex<...>>!) Правда, наследование реализации уже как несколько лет считают вредным, а гуру ООП говорят очень правильные вещи вроде ""хороший объект — иммутабельный объект"". Вот мне и стало интересно: насколько хорошо объектное мышление и Rust сочетаются друг с другом на самом деле? Первым подопытным кроликом станет паттерн State, чистой реализации которого и посвящена эта статья."
not_bad;Начало работы с MongoDB и Redis на Rust;https://habr.com/ru/post/568856/;В этой статье будет показано как создать Rust бэкэнд, который использует MongoDB, документо-ориентированную БД, для хранения данных и Redis для кэширования, ограничения количества HTTP запросов и нотификаций пользователя. Для большей наглядности созданное приложение также будет предоставлять REST API. В итоге будет получена следующая архитектура:  MongoDB является хранилищем, в то время как Redis используется для следующего:  кэш (включая изображения) ограничение количества HTTP запросов нотификации с использованием паттерна publish-subscribe 
deko;Rust попал в индекс TIOBE;https://habr.com/ru/post/268849/;Октябрьский индекс TIOBE обновил положение Rust в «пищевой цепочке». Язык занял почётное 49-е место войдя в 50-ку популярных языков потеснив Closure. Для сравнения в 50-ку не попадают весьма интересные: Common Lisp, Julia, Go. 
kstep;Создание функции на Rust, которая принимает String или &str;https://habr.com/ru/post/274455/;"От переводчика Статья — одна из серии постов, рассказывающих об использовании некоторых полезных библиотечных типажей и связанных с ними идиом Rust на примере строковых типов данных. Информация бесспорно полезная как для начинающих программистов на Rust, так и для тех, кто уже успел себя немного попробовать в этом языке, но ещё не совсем освоился с богатой библиотекой типажей. Оригинальный пост содержит несколько неточностей и опечаток в коде, которые я постарался исправить в процессе перевода, однако в общем и целом описанные подходы и мотивация правильные, подходящие под понятие «лучших практик», а потому заслуживают внимания.  В моём последнем посте (англ.) мы много говорили об использовании &str как предпочтительного типа для функций, принимающих строковые аргументы. Ближе к концу поста мы обсудили, когда лучше использовать String, а когда &str в структурах (struct). Хотя я думаю, что в целом совет хорош, но в некоторых случаях использование &str вместо String не оптимально. Для таких случаев нам понадобится другая стратегия. "
kstep;String и &str в функциях Rust;https://habr.com/ru/post/274485/;" Этот пост посвящается всем тем, кого смущает необходимость использовать to_string(), чтобы заставить программы компилироваться. И я надеюсь пролить немного света на вопрос о том, почему в Rust два строковых типа String и &str. "
DarkEld3r;Работа с С-объединениями (union) в Rust FFI;https://habr.com/ru/post/280063/;"Предлагаю вашему вниманию перевод статьи ""Working with C unions in Rust FFI"" за авторством Herman J. Radtke III.  Примечание: Эта статья предполагает, что читатель знаком с Rust FFI, порядком байтов (endianess) и ioctl.  При создании биндингов к коду на С мы неизбежно столкнёмся со структурой, которая содержит в себе объединение. В Rust отсутствует встроенная поддержка объединений, так что нам придётся выработать стратегию самостоятельно. В С объединение — это тип, который хранит разные типы данных в одной области памяти. Существует много причин, по которым можно отдать предпочтение объединению, такие как: преобразование между бинарными представлениями целых чисел и чисел с плавающей точкой, реализация псевдо-полиморфизма и прямой доступ к битам. Я сфокусируюсь на псевдо-полиморфизме. "
mkpankov;Анонс Rust 1.12;https://habr.com/ru/post/311384/;Мы рады представить новую версию Rust 1.12. Rust — это системный язык программирования, нацеленный на безопасную работу с памятью, скорость и параллельное выполнение кода. Как обычно, вы можете установить Rust 1.12 с соответствующей страницы официального сайта, а также ознакомиться с подробным списком изменений в этой версии на GitHub. В этот выпуск вошёл 1361 патч. Что вошло в стабильную версию 1.12 Выпуск 1.12 — возможно, самый значительный с момента выпуска 1.0. Нам есть о чём рассказать, но если у вас мало времени, вот краткое содержание.
varanio;Пробуем делать web-frontend на Rust (WebAssembly);https://habr.com/ru/post/325008/;" Недавно вышла новость про то, что webassembly теперь включен в firefox 52 из коробки. А потом еще и chrome 57 подтянулся (правда, там вроде бы были какие-то баги с запуском). Я решил, что обязательно надо попробовать. Для тех, кто не знает, что такое webassembly краткая информация: webassembly (или wasm) — это низкоуровневый язык, который понимают браузеры, и в который можно будет скомпилировать программы, написанные на популярных языках. Это гораздо более выгодно по скорости парсинга и выполнения, чем компилировать эти языки в чистый javascript или какой-нибудь asm.js.  Wasm задумывался в основном для c/c++, но, на удивление, уже все готово, чтобы скомпилировать программу на rust. Давайте сделаем небольшое приложение и посмотрим, что получится. Все это будем компилировать на Ubuntu. Без теоретических деталей, просто ""пощупаем"". "
32bit_me;Игрушечный фронтенд для LLVM, написанный на Rust: Руководство для начинающих;https://habr.com/ru/post/338420/;"Примечание переводчикаПриведённый в статье код скомпилирован с достаточно старыми версиями крейтов peg и peg_syntax_ext. Для текущих версий в исходники нужно внести минимальные изменения. Я вставил изменённые участки в спойлеры по тексту статьи. Для сборки кода установите компилятор nightly Rust. Полный исходник с моими правками можно скачать здесь: https://github.com/arktur04/rust-llvm-toy-frontend   В настоящее время я работаю над компилятором, который написан на Rust, и порождает LLVM IR. LLVM API выглядит немного пугающе для новичков, и по нему не так много руководств (и все они на C++, поэтому не вполне очевидно, как сделать то же самое на Rust). Я бы хотел, чтобы кто-то протянул мне руку помощи, когда я начинал всё это, и эта статья является тем, что я хотел бы показать самому себе в то время.    В Rust наилучшая возможность взаимодействия с LLVM — через крейт llvm-sys. Один добрый человек разместил документацию к нему здесь. Конечно, вам следует также изучить руководство по LLVM, так как оно поможет вам понять, как LLVM “думает”. Этот пост, в основном, является переводом на Rust подмножества из этого руководства.  Полный исходный код для этого руководства находится здесь."
romas1982;Делаем свою прошивку для IP-камеры на Rust и боремся с фродом;https://habr.com/ru/company/oleg-bunin/blog/347794/;Это продолжение рассказа о лучших (по мнению участников) докладах HighLoad++ 2017. В предыдущей статье я писал о двух лидерах рейтинга. Идем дальше. В этом материале — доклад Вадима Антонюка о фродах и Макса Лапшина  - о прошивке для IP-камеры на Rust.   
RustLangRu;"Rust 1.53.0: IntoIterator для массивов, ""|"" в шаблонах, Unicode-идентификаторы, поддержка имени HEAD-ветки в Cargo";https://habr.com/ru/post/563548/;Команда Rust рада сообщить о выпуске новой версии — 1.53.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.53.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что было стабилизировано в 1.53.0 Этот выпуск содержит несколько новых возможностей языка и ещё больше — стандартной библиотеки, включая долгожданную реализацию IntoIterator для массивов. Смотрите подробные примечания к выпуску, чтобы узнать о других изменениях, не представленных в данном анонсе.
alizar;Язык программирования Rust;https://habr.com/ru/post/129079/;"Разработчики из Mozilla Research опубликовали презентацию, в которой рассказали о прогрессе за последний год в разработке экспериментального языка программирования Rust, преимуществах Rust перед Google Go, о его применении в проектах Mozilla, а также о типичных примерах использования в будущем.  Rust — новый мультипарадигменный, исключительно функциональный, императивно-процедурный, объектно-ориентированный язык программирования, над которым Mozilla Research работает с 2009 года (сам проект ведёт историю с 2006 года). Исходные тексты распространяются через Github под лицензией BSD.  Как и Go, язык программирования Rust объединяет производительность и безопасность компилируемых языков (как С++) со скоростью разработки динамических языков (как Python). "
Antti;Вышел rust 0.11.0;https://habr.com/ru/post/228485/;" Mozilla и сообщество Rust выпустили новый релиз Rust, версии 0.11.0.  Несмотря на то, что язык находится в активной фазе разработки, работа была сфокусирована над улучшением системы типов и библиотек. Главная работа была проведена над имплементацией типов с динамическим размером (DST) и рефакторингом стандартной библиотеки. В этом релизе также удалили ~ и @ в угоду типам Box и Gc из стандартной библиотеки (компилятор пока знает о этих типах больше чем нужно, но вскоре эти типы станут самыми обычными типами Rust). "
kstep;Анонс Rust 1.6;https://habr.com/ru/post/275593/;"Привет в 2016-м году! Мы рады объявить первый в этом году релиз Rust — 1.6. Rust — системный язык программирования, нацеленный на безопасную работу с памятью, скорость и параллельное выполнение кода.  Как всегда, вы можете установить Rust 1.6 с соответствующей страницы нашего сайта, а также посмотреть подробный список изменений для версии 1.6 на Github. Этот релиз включил в себя 1100 патчей.  Что вошло в стабильную версию 1.6 В этот релиз вошли ряд небольших доработок, одно большое нововведение и изменение на Crates.io. "
yomayo;Почему владение/заимствование в Rust такое сложное?;https://habr.com/ru/post/278779/;"Оригинал статьи написан живущим на вашингтонщине Иваном Сагалаевым, мужем небезызвестной Алёны C++.   Сама статья.  Работать с чистыми функциями просто: вы передаете аргументы и получаете результат, при этом нет никаких побочных эффектов. С другой стороны, если функция производит побочные эффекты, такие, как изменение собственных аргументов или же глобальных объектов, то найти причины этого трудно. Мы привыкли также, что если видим что-то вроде player.set_speed(5), то можно быть уверенным, что тут собираются изменить объект player предсказуемым способом (и, возможно, посылают некоторые сигналы куда-нибудь).   Система владения/заимствования языка Rust сложна и она создает совершенно новый класс побочных эффектов. "
DataArt;Модули расширения Python на Rust;https://habr.com/ru/company/dataart/blog/279561/;"  “Absolute statements are the root of all evil. The key is balance. There are no answers, only questions.” ????  Автор статьи:  zolkko. Оптимизации Когда говорят про оптимизацию в контексте ПО, часто подразумевают оптимизацию производительности программиста и/или оптимизацию самого ПО.  Исходя из YAGNI-принципа, Python позволяет программисту сосредоточиться на реализации ПО, избавив его от необходимости заботиться о низкоуровневых вещах: регионах памяти, в которых выделяются объекты, освобождении памяти, соглашениях о вызовах.   На обратную проблему в одной из его лекций о Haskell указал Саймон Джонс. У него был слайд со стрелкой, закрашенной градиентом. В начале было написано “no types”, посередине — “Haskell”, в конце — “Coq”. Указав на Coq, он сказал: “This stresses power over usability. Right?! You need a PhD here!”[1]. Несмотря на то, что это была шутка, мантра Python — одна из любимых программистами особенностей этого языка. По моему опыту, это то, что позволяет выпускать готовый продукт несколько быстрее. "
AlexPikalov;Введение в CDRS, Apache Cassandra driver полностью написанный на Rust;https://habr.com/ru/post/321594/;CDRS (Apache Cassandra driver written in Rust) — это мой собственный open source проект, который я решился разрабатывать после того, как обнаружил, что в плане драйверов для Cassandra в Rust экосистеме образовался дефицит.
Virtuos86;Об устройстве встроенной функциональности тестирования в Rust (перевод);https://habr.com/ru/post/418095/;"Привет, Хабр! Представляю вашему вниманию перевод записи ""#[test] в 2018"" в блоге Джона Реннера (John Renner), которую можно найти здесь.  В последнее время я работал над реализацией eRFC для пользовательских тестовых фреймворков для Rust. Изучая кодовую базу компилятора, я изучил внутренности тестирования в Rust и понял, что было бы интересно этим поделиться."
ragequit;OpenPGP переписывают на Rust: проект Sequoia;https://habr.com/ru/company/vdsina/blog/518296/;" Секвойя Стагг в роще Олдер-Крик, Калифорния  В 2018 году три бывших разработчика GnuPG начали работу над проектом Sequoia — реализацией OpenPGP на Rust. Как известно, OpenPGP — это открытый стандарт шифрования данных, часто используемый для защищённой электронной почты; а GnuPG — эталонная реализация этого стандарта.  Сами разработчики так изложили мотивацию за создание новой библиотеки OpenPGP:   GnuPG трудно модифицировать. Код и API накапливались в течение 21 года. Модульные тесты отсутствуют. Компоненты тесно связаны друг с другом. Архитектура оставляет желать лучшего, и простой рефакторинг уже не поможет.  Многие разработчики недовольны программными интерфейсами GnuPG. У инструмента командной строки GnuPG и соответствующих программных библиотек разная функциональность: некоторые команды доступны только из командной строки.  Rust — безопасный для памяти язык, что автоматически исключает целый класс багов.  GnuPG невозможно использовать под iOS из-за ограничений GPL. "
ruvds;Обзор GameLisp: нового языка для написания игр на Rust;https://habr.com/ru/company/ruvds/blog/535904/;" Программист, подписывающийся псевдонимом Fleabit, уже полгода разрабатывает свой язык программирования. Сразу же возникает вопрос: ещё один язык? Зачем?  Вот его аргументы:   Разработка движка игры и разработка игры на этом движке — две очень разные задачи, и для них удобно использовать разные языки, при условии, что код на них хорошо стыкуется друг с другом. Например, код на языке с garbage collection и на языке с явным управлением памятью было бы сложно объединить в одном проекте. Rust идеально подходит для разработки движка игры: из языков, ориентированных на производительность скомпилированного кода, в нём максимум выразительных средств — enum-ы с полями; pattern matching с деструктуризацией; макросы, генерирующие произвольный код во время компиляции; и т.п. С другой стороны, для описания игровой механики Rust подходит плохо: задержки на перекомпиляцию усложняет подход «подправить и тут же проверить, что получилось»; строгое управление памятью усложняет использование одних данных одновременно несколькими объектами; а генераторы/сопрограммы, позволяющие удобно реализовать кооперативную многозадачность между внутриигровыми сущностями, ещё не реализованы. Для игровой механики идеально подходил бы скриптовый язык наподобие JavaScript, Lua, Python или Ruby; но интеграция кода на них в проект на Rust — нетривиальная задача, отчасти из-за того, что эти полновесные языки программирования устроены запредельно сложно. Вдобавок, внутри игры напрашивается очень простой garbage collector, отрабатывающий после генерации каждого кадра, чтобы частота кадров оставалась постоянной — без внезапных подвисаний раз в десять минут, когда GC решил пройтись по всем объектам, созданным за эти десять минут. Другое важное преимущество GameLisp перед популярными скриптовыми языками — гомоиконичность, упрощающая обработку и генерацию кода макросами. "
maxim_ge;Заменяем глобальный аллокатор в Rust;https://habr.com/ru/post/574522/;Вторая часть про работу с кучей, устанавливаем свой глобальный аллокатор. В принципе, это делается в несколько строк, но наша цель — действовать сознательно и профессионально, с глубоким проникновением в суть явлений, так что легкой жизни не будет (как и обещал).  Предыдущая часть: Работа с кучей в Rust Начало и содержание: Владение 
seweb;Rust на примерах. Часть 2;https://habr.com/ru/post/233621/;"Это вторая часть из цикла статей по переводу книги «Rust by Example». Первую часть можно прочитать здесь.  Продолжим? "
mkpankov;Создаём REST-сервис на Rust. Часть 4: переходим к REST API;https://habr.com/ru/post/268617/;"В прошлый раз мы реализовали обновление БД.  Осталось сделать только REST-интерфейс. Давайте займёмся этим.  Введение Эта часть будет, пожалуй, самой сложной — мы близко узнаем типажи Send и Sync, а также тонкости работы замыканий и времён жизни. По-другому я бы озаглавил её «зануда исследует, почему обязательно нужно клонировать данные». Она полезна тем, что затрагивает тонкие места Rust и показывает причины некоторых неочевидных ошибок. Так что если хотите разобраться досконально — добро пожаловать.  Также хочу отметить: если вам что-то непонятно относительно приведённого кода или сами объяснения кажутся недостаточно ясными, не стесняйтесь писать об этом в комментариях. Автор потратил не минуту и не полчаса, пытаясь понять, почему код работает именно в том виде, в котором он написан, и вынужден был не раз сходить в IRC и на форум за разъяснениями. "
mkpankov;Анонс Rust 1.11;https://habr.com/ru/post/308124/;Мы рады представить новую версию Rust 1.11. Rust — это системный язык программирования, нацеленный на безопасную работу с памятью, скорость и параллельное выполнение кода. Как обычно, вы можете установить Rust 1.11 с соответствующей страницы официального сайта, а также ознакомиться с подробным списком изменений в этой версии на GitHub. В этот релиз вошло 1109 патчей. Что вошло в стабильную версию 1.11 В 1.11 мы много работали над внутренностями компилятора, которые ещё не стабильны. Мы рады сообщить, что MIR скоро станет транслятором по умолчанию и мы делаем первые шаги в направлении инкрементальной компиляции. В выпуске 1.11 мы заложили фундамент для этой работы.
Halt;Свершилось! Процедурные макросы в Rust 1.15;https://habr.com/ru/post/321564/;Ребята, свершилось! После долгих шести недель ожидания наконец вышла версия Rust 1.15 с блекджеком и процедурными макросами. По моему нескромному мнению, это самый значительный релиз, после эпического 1.0. Среди множества вкусных вещей в этом релизе были стабилизированы процедурные макросы, взрывающие мозг своим могуществом, удобством и безопасностью. А что же это дает простым смертным? Практически бесплатную [де]сериализацию, удобный интерфейс к БД, интуитивный веб фреймворк, выводимые конструкторы и много чего еще. Да, если вы все еще не добрались до этого языка, то сейчас самое время попробовать, тем более, что теперь установить компилятор и окружение можно одной командой: curl https://sh.rustup.rs -sSf | sh Впрочем, обо всем по порядку.
bmusin;Rust: пробуем перегрузку функций;https://habr.com/ru/post/351570/;Rust не имеет перегрузки функций: вы не можете определить две функции, которые имеют одно и то же имя. Компилятор выдаст сообщение, что у вас имеется двойное задание одного и того же определения, хотя бы они и содержали разные типы аргументов. После нескольких попыток задача была успешно решена. Как — под катом.
Gorthauer87;Приемы обобщенного программирования в Rust: как мы переводили Exonum с Iron на actix-web;https://habr.com/ru/company/bitfury/blog/429450/;"Экосистема Rust еще не до конца устоялась. В ней часто появляются новые библиотеки, которые заметно лучше предшественников, а ранее популярные фреймворки устаревают. Именно это произошло с веб-фреймворком Iron, который мы использовали при разработке Exonum.  В качестве замены Iron был выбран actix-web. Дальше я расскажу, как мы портировали существующий код на новое решение, используя приемы обобщённого программирования.  "
BitfuryRussia;Generic Methods in Rust: How Exonum Shifted from Iron to Actix-web;https://habr.com/ru/company/bitfury/blog/439258/;The Rust ecosystem is still growing. As a result, new libraries with improved functionality are frequently released into the developer community, while older libraries become obsolete. When we initially designed Exonum, we used the Iron web-framework. In this article, we describe how we ported the Exonum framework to actix-web using generic programming.  
sickfar;OS1: примитивное ядро на Rust для x86. Часть 3. Карта памяти, Page fault exception, куча и аллокации;https://habr.com/ru/post/446214/;Первая часть Вторая часть Тема сегодняшнего разговора — работа с памятью. Я расскажу про инициализацию директории страниц, маппинг физической памяти, управление виртуальной и мою организацию кучи для аллокатора. Как я уже говорил в первой статье, я решил использовать страницы размером 4 МБ, чтобы упростить себе жизнь и не иметь дела с иерархическими таблицами. В дальнейшем я надеюсь перейти на страницы размером 4 КБ, как большинство современных систем. Я мог бы использовать готовый (например, такой блочный аллокатор), но написать свой было чуть интереснее и хотелось чуть больше понять, как живет память, так что мне есть, что вам рассказать.
Gorthauer87;Пишем API на Rust с помощью процедурных макросов;https://habr.com/ru/post/486740/;"Процедурные макросы в Rust — это очень мощный инструмент кодогенерации, позволяющий обходиться без написания тонны шаблонного кода, или выражать какие-то новые концепции, как сделали, к примеру, разработчики крейта async_trait. Тем не менее, многие вполне обоснованно побаиваются пользоваться этим инструментом, в основном из-за того, что разбор синтаксического дерева и атрибутов макроса зачастую превращается в ""закат солнца вручную"", так как задачу приходится решать на очень низком уровне. В данной статье я хочу поделиться некоторыми, на мой взгляд, удачными подходами к написанию процедурных макросов, и показать, что на сегодняшний день процедурные макросы можно создавать относительно просто и удобно."
not_bad;Введение в gRPC на Rust;https://habr.com/ru/post/557600/;В статье будет показано как создать gRPC сервер и клиент на Rust. Для большей наглядности клиент будет также Telegram ботом. В итоге будет получена следующая архитектура:  Статья является не всеобъемлющим руководством по gRPC в Rust, а скорее практическим гайдом, демонстрирующим основы и как создать приложение на основе gRPC.
Gorthauer87;Rust — сохраняем безразмерные типы в статической памяти;https://habr.com/ru/post/561012/;Не так давно в качестве хобби решил погрузиться в изучение embedded разработки на Rust и через какое-то время мне захотелось сделать себе логгер, который бы просто писал логи через UART, но который бы при этом не знал какая конкретно реализация используется. И вот тут я быстро осознал, именно в этом конкретном случае я не могу полагаться на статический полиморфизм и мономорфизацию, ведь компилятор не знает сколько нужно памяти выделять под конкретную реализацию. Фактически это означает, что нам нужно как-то уметь сохранять типы, размер которых неизвестен на этапе компиляции, и такой способностью обладает тип Box и для решения этой проблемы как раз и возникла идея написать свой аналог типа Box, но который сохраняет обьект не в куче, а в предоставленном пользователем буфере.
maxim_ge;Конспектируем Книгу Rust:: Времена и функции;https://habr.com/ru/post/567596/;После главы 4 (было здесь) переходим к 10.3. Валидация ссылок при помощи времён жизни. Ну а куда еще… такие нынче времена.
Bright_Translate;Использование потоков WebAssembly из C, C++ и Rust;https://habr.com/ru/company/ruvds/blog/569578/;"  Поддержка многопоточности стала одним из важнейших апгрейдов производительности в WebAssembly. Она позволяет выполнять либо части кода на разных ядрах параллельно, либо один код для независимых элементов входных данных, масштабируя его на максимально доступное пользователю число ядер. Все это значительно сокращает общее время выполнения.  В этой статье вы узнаете, как использовать потоки WebAssembly для переноса многопоточных приложений, написанных на языках C, C++ и Rust, в веб-среду."
lukretsiy;Графическое описание владения и заимствования в Rust;https://habr.com/ru/post/322140/;Ниже представлено графическое описание перемещения, копирования и заимствования в языке программирования Rust. В основном, эти понятия специфичны только для Rust, являясь общим камнем преткновения для многих новичков.  Чтобы избежать путаницы, я попытался свести текст к минимуму. Данная заметка не является заменой различных учебных руководств, и лишь сделана для тех, кто считает, что визуально информация воспринимается легче. Если вы только начали изучать Rust и считаете данные графики полезными, то я бы порекомендовал вам отмечать свой код похожими схемами для лучшего закрепления понятий. 
erlyvideo;«Ржавая» IP-камера: прошивка на Rust;https://habr.com/ru/company/erlyvideo/blog/334912/;"До появления ботнета Mirai только особо интересующиеся знали о том, что находится внутри обычных IP камер. В большинстве случаев там стоит обычный линукс, причем частенько с дефолтным рутовым паролем, а то и вообще без него: у нас в офисе стоит такая камера, с прошивкой от декабря 2016 года и беспарольным рутовым телнетом.  Но что же дальше, какой софт запущен на этом линуксе? Есть несколько классных статей datacompboy про поиск бага которого нет, есть ещё разрозненная информация, но в целом ситуация такая: на IP-камере стоит специально пропатченное ядро, которое дает доступ программе через специальную библиотеку к железу, выдающему сжатые видеокадры.  Грустная реальность в том, что очень часто этот софт написан далеко не лучшим образом. Достаточно сказать, что большинство камер, которые висят на улице очень страдают из-за большого расстояния до сервера, потому что авторы их прошивки освоили мастерство потерь данных по TCP.  Мы решили исправить эту ситуацию своей прошивкой, причем сделав ставку на Rust."
Jenyay;Optlib. Реализация генетического алгоритма оптимизации на Rust;https://habr.com/ru/post/448870/;В этой статье описывается библиотека optlib, предназначенная для решения задач глобальной оптимизации на языке Rust. На момент написания этой статьи в этой библиотеке реализован генетический алгоритм нахождения глобального минимума функции. Библиотека optlib не привязана к конкретному типу входных данных для оптимизируемой функции. Также библиотека построена таким образом, что при использовании генетического алгоритма можно легко менять алгоритмы скрещивания, мутации, отбора и другие этапы работы генетического алгоритма. По сути генетический алгоритм собирается как бы из кубиков.
Cerberuser;Тесты или типы? — Rust version;https://habr.com/ru/post/468145/;"Пару дней назад 0xd34df00d опубликовал здесь перевод статьи, описывающей, что можно узнать о функции в разных языках, если рассматривать её как ""чёрный ящик"", не используя информацию о её реализации (но, разумеется, не мешая ей пользоваться компилятору). Разумеется, получаемая информация очень сильно зависит от языка — в исходной статье рассматривались четыре примера:  Python — динамически типизированный, информации минимум, какие-то подсказки дают только тесты; C — слабо статически типизированный, информации ненамного больше; Haskell — сильно статически типизированный, с чистыми функциями, информации существенно больше; Idris — язык с зависимыми типами, информации достаточно, чтобы во время компиляции доказать корректность функции.  ""Есть C, есть Haskell, а где же Rust?!"" — немедленно прозвучал вопрос. Ответ — под катом."
Cerberuser;Tests vs. Types — Rust version;https://habr.com/ru/post/468271/;"A few days ago 0xd34df00d has published the translation of the article, describing the possible information about some function if we use it as a ""black box"", not trying to read its implementation. Of course, this information is quite different from language to language; in the original article, four cases were considered:  Python — dynamic typing, almost no information from signature, some hints are gained by the tests; C — weak static typing, a little more information; Haskell — strong static typing, with pure functions by default, a lot more information; Idris — dependent typing, compiler can prove the function correctness.  ""Here's C and there's Haskell, and what about Rust?"" — this was the first question in the following discussion. The reply is here."
andreevlex;Как работает panic в Rust;https://habr.com/ru/post/482358/;"Как работает паника в Rust Что именно происходит, когда вы вызываете panic!()? Недавно я потратил много времени на изучение частей стандартной библиотеки, связанных с этим и оказалось, что ответ довольно сложный! Мне не удалось найти документы, объясняющие общую картину паники в Rust, так что это стоит записать."
smallnibbler;Rust Embedded. Разработка под процессоры Cortex-M3 на примере отладочной платы STM32F103C8T6 (Black Pill);https://habr.com/ru/post/495948/;"Привет! Хочу познакомить вас с проектом Rust Embedded. Он позволяет нам использовать язык программирования Rust для разработки под встроенные платформы (Embedded Linux / RTOS / Bare Metal).   В этой статье, мы рассмотрим компоненты, которые необходимы для начала разработки под микропроцессоры Cortex-M3. После этого напишем простой пример — моргание встроенным светодиодом."
BOOTLOADER;Вызов Rust функции из Go;https://habr.com/ru/post/496192/;На Хабре в свое время была статья о том, как вызвать Rust код из Go. Статья неплохая, но довольно сложная для понимания и на самом деле отталкивающая новичков от желания смотреть в сторону обоих языков. Цель этого поста не столько залезть в «кишки» кросс-языковых вызовов, сколько показать насколько просто это можно сделать.   
websecret_by;2048 WASM или игра на Rust за 2 дня;https://habr.com/ru/post/538752/;Данная статья представляет из-себя эксперимент с Rust'ом с последующей его компиляцией в WASM. Было интересно пощупать данные технологии на чем-то сложнее, чем вычисление факториала, поэтому выбор пал на всем известную игру 2048.  
EvilMan;Объяснение легковесных потоков в 200 строк на Rust;https://habr.com/ru/post/543158/;"Объяснение легковесных потоков в 200 строк на Rust Легковесные потоки (ligthweight threads, coroutines, корутины, green threads) являются очень мощным механизмом в современных языках программирования. В этой статье Carl Fredrik Samson попытался реализовать рантайм для легковесных потоков на Раст, попутно объясняя, как они устроены ""под капотом"". Так же следует учесть, что статья не суперсвежая, так что для того, чтобы примеры заработали в современной ночной версии компилятора Раст, скорее всего понадобятся изменения, найти которые можно в репозитории кода для этой статьи. Переводил для себя большей частью. Обо всех замечаниях пишите — оперативно исправлю. Старался переводить близко к тексту, но в некоторых местах переформулировал, чтобы читалось легче и было понятнее."
RustLangRu;Rust 1.52.0: улучшения Clippy и стабилизация API;https://habr.com/ru/post/555180/;Команда Rust рада сообщить о выпуске новой версии — 1.52.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.52.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub. Что было стабилизировано в 1.52.0 Самое значительное изменение этого выпуска не касается самого языка или стандартной библиотеки. Это улучшения в Clippy. Ранее запуск cargo clippy после cargo check не запускал Clippy: кэширование в Cargo не видело разницы между ними. В версии 1.52 это поведение было исправлено, а значит, теперь пользователи будут получать то поведение, которое ожидают, независимо от порядка запуска этих команд.
deko;Выпущен Rust 1.4;https://habr.com/ru/post/269809/;Честно по графику встречаем Rust 1.4. Релиз вобрал в себя 1200 патчей с момента последнего релиза. Основное внимание уделили стабилизации языка, а это уже серьёзный аргумент, в пользу того, что язык приобрёл понятные формы, синтаксис и стандартную библиотеку. 
mkpankov;Анонс Rust 1.7;https://habr.com/ru/post/278649/;"Мы рады объявить новую версию Rust, 1.7. Rust — системный язык программирования, нацеленный на безопасную работу с памятью, скорость и параллельное выполнение кода.  Как всегда, вы можете установить Rust 1.7 с соответствующей страницы официального сайта, а также посмотреть подробный список изменений для версии 1.7 на Github. Этот релиз включил в себя 1300 патчей. "
FL3;Складываем числа на Rust;https://habr.com/ru/post/310572/;Реализация арифметики натуральных чисел с помощью чисел Пеано — популярная задача в обучение программированию. Мне было интересно, можно ли реализовать их на Rust. Таким образом моя задача: записать и сложить натуральные числа с проверкой на уровне типов. 
anastasiak2512;Релиз CLion 2018.1: новые возможности из С++17, поддержка WSL, CMake Install, плагин для Rust и многое другое;https://habr.com/ru/company/JetBrains/blog/352388/;"Привет, Хабр!  Вот и подоспел первый релиз CLion в этом году — 2018.1! В этом посте мы расскажем, что мы успели реализовать за эти месяцы и какие планы у нас на следующий релиз.   Cначала очень коротко о главном. В этот релиз вошли:   Поддержка языка C++  Поддержка возможности C++17: structured binding Поддержка возможности C++17: операторы if и switch с инициализаторами Множество баг-фиксов и улучшений   Возможность использовать файлы конфигурации Clang-Tidy в CLion, а также настраивать опции для проверок из Clang-Tidy в интерфейсе CLion Улучшения для пользователей Windows  Компилятор Microsoft Visual C++ включен по умолчанию Поддержка подсистемы WSL   CMake и не только  Вызов из IDE CMake Install Шаблоны для создания файлов CMakeLists.txt Возможность открыть файл или папку без проектной модели CMake   Экспериментальная поддержка hex view в отладчике Улучшения редактора:  “Хлебные крошки” (breadcrumbs) для C/C++ Действие Unwrap Сворачивание управляющих конструкций   Поддержка новых языков в CLion: Objective-C / Objective-C++, Rust, Fortran  Можно прямо сейчас скачать бесплатную 30-дневную версию с нашего сайта и попробовать новые возможности. Для этого мы даже подготовили специальный небольшой демо-проект. А ниже поговорим об улучшениях более подробно."
mark2b;FB2D — 2D framework for Linux Frame Buffer (Rust);https://habr.com/ru/post/421707/;"Вот решил поведать о библиотеке, которую написал недавно. Возможно кому-то и пригодится. Это 2D framework на языке Rust для рендеринга непосредственно в Linux Frame Buffer /dev/fb0. Задача была — на Raspberry Pi выводить на экран / телевизор простые 2D сцены. Raspberry Pi работает под управление собранного при помощи YoctoProject custom headless Linux. Window Managers отсутствуют, так же, как и OpenGL. Остается только Frame Buffer.  В случае с Frame Buffer обрабатывать приходится каждый пиксель. Так как я для Raspberry Pi пишу в основном на GoLang, то решил написать библиотеку на Go. Очень быстро понял что Go не подходит мне по производительности. Массивные операции с памятью он не смог выполнить за разумное время.  Тогда я обратил внимание на Rust, который выполнял похожие тесты намного быстрее. "
PsyHaSTe;Так ли страшен Rust, как его малюют;https://habr.com/ru/post/434200/;"Некоторое время назад я начал понимать необходимость разнообразить мой опыт программирования исключительно на C#. После некоторого изучения различных вариантов, таких как Haskell, Scala, Rust и некоторых других, выбор пал на последний. Со временем я начал обращать внимание, что Rust всё больше и больше рекламируется исключительно как ""системный язык"", который нужен для вырвиглазно сложных компиляторов и супер-нагруженных систем, с особыми требованиями к безопасности и многопоточности, а для вариантов попроще есть Go/Python/Java/..., в то время как я с удовольствием и весьма успешно использовал его как замену моей рабочей лошадке C#.  В этой статье я хотел рассказать, почему я считаю этот тренд в целом вредным, и почему Rust является хорошим языком общего назначения, на котором можно делать любые проекты, начиная со всяких микросервисов, и заканчивая скриптованием ежедневной рутины."
maxim_ge;Конспектируем Книгу Rust:: Времена и структуры;https://habr.com/ru/post/569496/;Продолжаем работать с 10.3.  КМБ.- Двойная жизнь.- Восстание мертвецов.- Ошибка в документации.- Ужасающие подробности из The Rustonomicon.- Архитектурные озарения.- Развязка.  Предыдущая часть: Времена и функции Начало и содержание: Владение 
maxim_ge;Работа с кучей в Rust;https://habr.com/ru/post/573422/;Продолжаем изучать Rust нетрадиционным способом. В этом раз будем разбираться в нюансах работы с кучей, для их понимания понадобятся: сырые указатели, выделение памяти в куче, размер экземпляра типа, запись значений в кучу и чтение из нее, const и static, unit-like структуры, переопределение глобального аллокатора, печать стека вызовов. Это, определенно, overkill для одной статьи, а вот половину списка вполне можно освоить.  Предыдущая часть: Времена и структуры Начало и содержание: Владение 
leventov;Вышел Rust 0.10;https://habr.com/ru/post/218359/;"  Rust — компилируемый мультипарадигмальный язык, позиционируется как альтернатива С/С++ с уклоном в параллельные вычисления, безопасность и удобство работы с памятью.  Что нового в Rust 0.10:  "
stack_trace;Мьютексы в стиле Rust для C++;https://habr.com/ru/post/237941/;"Здравствуй Хабрахабр!  Я часто разрабатываю программы на C++ и люблю этот язык, что бы о нём ни говорили. Наверное потому, что во многих областях замены ему пока что нет. Однако язык этот, как все мы знаем, не лишён недостатков, и поэтому я всегда с интересом слежу за новыми подходами, паттернами или даже языками программирования, призванными решить какую-то часть этих проблем.  Так, недавно, я с интересом просматривал презентацию Степана Кольцова stepancheg о языке программирования Rust, и мне очень понравилась идея реализации мьютаксов в этом языке. Причём никаких препятствий для реализации подобного примитива в C++ я не увидел и сразу же открыл IDE, с целью реализовать подобное на практике. "
kstep;Анонс Rust 1.0;https://habr.com/ru/post/258069/;Сегодня мы с гордостью представляем релиз Rust версии 1.0, нового языка программирования для создания более надёжных и эффективных систем. Раст объединяет в себе низкоуровневый контроль над производительностью с удобством и гарантиями безопасности языков высокого уровня. Лучше того, он при этом не требует сборщика мусора или среду выполнения, так что библиотеками на Расте можно безболезненно заменять библиотеки на C (англ.). Если вы хотите поэкспериментировать с Растом, лучше всего начать с раздела «Getting Started» книги Rust Book (если вы предпочитаете читать с электронных книг, Паскаль Хертлиф (Pascal Hertleif) поддерживает неофициальные версии этой книги в электронном виде). 
kstep;Фреймворк для процедурных макросов в Rust;https://habr.com/ru/post/274225/;"От переводчика Процедурные макросы — одна из наиболее ожидаемых фич Rust. На данный момент процедурные макросы возможно писать только под нестабильную версию компилятора, хотя есть несколько контейнеров, вроде syntex, позволяющие делать ограниченную кодогенерацию в рамках стабильного компилятора. Однако ситуацию это особо не облегчает, поскольку интерфейс к AST остаётся нестабильным, и, хотя авторы syntex стараются идти в ногу с ночными сборками, иногда случаются фейлы из-за изменений в структуре AST. В этом блог посте один из участников core team — Nick Cameron — поделился своим видением будущего процедурных макросов. Хотя пост полон технических подробностей по внутренностям компилятора, мне показалось, что хабрасообществу может быть интересно заглянуть немного за кулисы разработки Rust.  Фреймворк для процедурных макросов В этом посте я расскажу, как, по моему мнению, должны выглядеть процедурные макросы. Я уже рассказывал про синтаксис в другом посте, а когда мы опубликуем API для процедурных макросов, то напишу пост и про него. Я уже описывал целый ряд изменений в системе макросов, так что здесь я в чём-то повторюсь (отчасти противореча прошлому посту), но раскрою больше подробностей. "
VanquisherWinbringer;QtCreator и его использование в качестве IDE для Rust;https://habr.com/ru/post/437128/;"В общем попросил я у коллеги маленький гайд по тому как настроить QtCreator в качестве IDE для Rust и с его разрешения выкладываю. Сам Я использую CLion и позже напишу о том как с ним дела обстоят на этом поприще. Мопед не мой. Я просто разместил объяву. (с)  Что нужно современному программисту в первую очередь? Развитое абстрактное мышление? Сильный бэкграунд в математике? Возможно стрессоустойчивость??  Конечно же нет! Самое главное — хорошая IDE.   Если вы тоже, попытавшись осилить Rust, взгрустнули, взглянув на areweideyet   — добро пожаловать под кат. "
tongohiti;На пальцах: ассоциированные типы в Rust и в чём их отличие от аргументов типов;https://habr.com/ru/post/441444/;"Для чего в Rust есть ассоциированные типы (associated types), и в чём их отличие от аргументов типов (type arguments aka generics), ведь они так похожи? Разве недостаточно только последних, как во всех нормальных языках? У тех, кто только начинает изучать Rust, а особенно у людей, пришедших из других языков (""Это же дженерики!"" — скажет умудрённый годами джавист), такой вопрос возникает регулярно. Давайте разбираться. TL;DR Первые контролирует вызываемый код, вторые — вызывающий."
VanquisherWinbringer;Rust + CLion = Любовь;https://habr.com/ru/post/448820/;"  Привет, Хабр! В общем как я обещал вот рассказ о том как CLion в качестве IDE для Rust на MacOS использовать. Почему не IntelliJ IDEA? Потому что CLion может дебажить. Почему LLDB, а не GDB? Потому что LLDB у меня вместе с XCode был установлен. Мне нравится эта IDE, и поэтому я решил рассказать про нее вам. Если вам стало интересно, то добро пожаловать под кат."
balajahe;Какую цену мы платим за использование async/await в языках JS / C# / Rust;https://habr.com/ru/post/483734/;"Привет, Хабр ! Работая с Javascript / Typescript, я давно заметил, что асинхронное API работает медленней чем аналогичное синхронное, и даже знал что так должно быть. Но в последнем проекте асинхронная работа с файловой системой стала узким местом, и я озаботился замерами.  Известно, что await можно использовать только внутри функций или блоков async, а это значит, что если у нас самый нижний уровень API асинхронный, то придется использовать async/await практически везде, даже там, где оно очевидно не нужно.  К примеру, мы пишем сервисную функцию, которая достает из хранилища объект по ключу. В качестве хранилища мы можем использовать файл, БД, микросервис, то есть медленный источник с асинхронным интерфейсом. Для улучшения производительности — внутри нашей функции мы кэшируем ранее извлеченные объекты (складываем их в Map). По мере работы программы реальных обращений к хранилищу становится все меньше, объекты отдаются из быстрого кэша, но интерфейс функции остается асинхронным!  Какую цену мне приходится платить за каждый асинхронный вызов? Результаты тестов удручают..."
Seleditor;Операционная система Redox 0.6, написанная на Rust: что нового в выпуске?;https://habr.com/ru/company/selectel/blog/535182/;" Спустя полтора года разработки авторы операционной системы Redox 0.6, написанной с использованием языка Rust, опубликовали новый выпуск. Новинку можно протестировать — для этого в сеть выложены загрузочные образы. Их объем составляет 61 МБ. Свежая версия может тестироваться уже на обычном «железе», а не в QEMU и VirtualBox.   Операционная система распространяется под свободной лицензией MIT. Что нового в версии 0.6?"
khmheh;Размышления о Rust;https://habr.com/ru/post/541140/;Всем привет. Не сразу, но я полюбил Rust. И эта любовь привела меня в бескрайние моря лоулевельного кода. О том, что мне удалось найти - под катом.
khmheh;Как не копировать код в Rust;https://habr.com/ru/post/552064/;"Первое правило хорошего тона в программировании (или одно из первых) гласит: ""Не копируй код"". Используй функции и наследование."
DDtKey;Механизмы авторизации в web-приложениях на Rust;https://habr.com/ru/post/556888/;Для обеспечения безопасности приложений мы используем такие довольно известные механизмы, как аутентификация и авторизация. В этой статье мы сфокусируемся на понятие  авторизации и связанных с ней моделях контроля доступом. А также рассмотрим решения для web-приложений на Rust.
stack_trace;Релиз Rust 1.0 Alpha;https://habr.com/ru/post/247521/;"С удивлением обнаружил, что это ожидаемое многими событие почему-то обошло Хабр стороной. Думаю, что для многих программистов, следящих за этим языком программирования, будет полезно узнать, что тот самый релиз версии Rust 1.0.0 Alpha состоялся 9 января. В этой версии наконец-то стабилизировали ядро языка и большую часть стандартной библиотеки, так что теперь можно начинать писать на Rust'е программы не боясь, что через неделю что-то сломается после обновления компилятора.  От себя могу добавить, что язык действительно интересный и, как минимум, стоит внимания."
mkpankov;Создаём REST-сервис на Rust. Часть 3: обновляем базу из консоли;https://habr.com/ru/post/267779/;"В предыдущей части мы разобрали конфигурационный файл базы данных, чтобы считать из него параметры соединения.  Теперь давайте реализуем непосредственно операции обновления БД: создание, обновление, удаление наших записей и соответствующий им интерфейс командной строки. "
VanquisherWinbringer;Изучаю Rust: Как я UDP чат сделал c Azul;https://habr.com/ru/post/433624/;"  Я продолжаю изучать Rust. Я еще много не знаю, поэтому делаю много ошибок. В прошлый раз я попробовал сделать игру Змейка. Попробовал циклы, коллекции, работу с 3D Three.rs. Узнал про ggez и Amethyst. В этот раз я попробовал сделать клиент и сервер для чата. Для GUI использовал Azul. Так же смотрел Conrod, Yew и Orbtk. Попробовал многопоточность, каналы и работу с сетью. Учел ошибки прошлой статьи и постарался сделать эту более развернутой. За подробностями добро пожаловать под кат."
inv2004;Ещё одна статья о временах жизни (lifetimes) в Rust;https://habr.com/ru/post/442962/;"Первые месяцы начинающего растомана как правило сводятся к ударам головой о концепцию времени жизни и владения. Некоторые на этом ломаются, но тем, кто смог пережить — это уже не кажется чем-то необычным или неправильным. Я опишу ключевые моменты, которые, как мне кажется, помогли быстрее и лучше адаптироваться к концепции лайфтаймов и владений.  Разумеется официальный растбук полнее и подробнее, но так же требует больше времени и терпения для полного понимания и впитывания всей информации. Я попытался избежать большого количества деталей и представить всё в порядке возрастания сложности, в попытке сделать данную статью доступней тем, кто или только начал смотреть раст, или же не очень понял начальные моменты из официального растбука. Сподвигло меня написать и то, что, как, например, по монадам, можно найти некие официальные обучающие материалы, но не всегда они хорошо понимаются, а понимание возникает только после прочтение чего-то типа ""ещё одно введение"" по данной теме. Время жизни (lifetime) Для начала нам надо освоиться с двумя вещами — конец блока и перемещение значения в другой блок. Позже мы начнём усложнять, добавив ""одалживание"", ""мутабельность"" и ""скрытую мутабельность""."
menstenebris;Библиотеки для декодирования видео. Сравнение на Python и Rust;https://habr.com/ru/post/467537/;"Многие задаются вопросом — насколько медленный Python в операциях декодирования? Правда ли, что компилируемые языки дают прирост скорости во всем, чего касаются? Что быстрее: OpenCV или ничего? Ответы на эти и другие бесполезные вопросы под катом вы прочитать не сможете. Там обычное скучное исследование производительности в конкретной задаче. Все заинтересовавшиеся, добро пожаловать!"
l4l;Миграция на инфраструктуру async-await в Rust;https://habr.com/ru/post/475272/;" img source На прошлой неделе для Rust комьюнити случилось огромное событие — вышла версия компилятора 1.39, а в месте с ней и стабилизация async-await фичи. В этом посте я постараюсь резюмировать все релевантные изменения в компиляторе и экосистеме, а также предоставить инструкции по миграции на async-await парадигму. Детального разбора асинхронности в Rust я делать не буду, есть всё ещё актуальные статьи на хабре, которые помогут войти в тему:  чат на mio: часть 1, часть 2; tokio + futures-rs 0.1; обзор tokio; генераторы (тут используется непринятый вариант синтаксиса с макросом await!, он уже работать не будет, но подноготная осталась такой же). "
pronvis;Rust. Borrow checker через итераторы;https://habr.com/ru/post/499108/;"Привет, Хабр!  Я уже около года изучаю и, в свободное время, пишу на расте. Мне нравится как его авторы решили проблему управления памятью и обошлись без сборщика мусора — через концепцию заимствования. В этой статье подойду к этой идее через итераторы.  Последнее время scala является моим основным языком, так что сравнения будут с ней, но их не много и все интуитивно понятные, без магии :)  Статья рассчитана на тех кто что-то слышал о rust'e, но в детали не вдавался.   фотографии взяты отсюда и отсюда"
EvilMan;Rust crashcourse. Итераторы;https://habr.com/ru/post/533204/;"Ниже представлен перевод одной из частей серии статей Rust Crash Course от Майкла Сноймана, которая посвящена итераторам. Мне материал показался удачным в плане доступности изложения, поэтому перевод, сделанный для себя, решил опубликовать. Надеюсь, что это кому-то пригодится. Если данный материал будет интересен, то опубликую ещё несколько переводов из этой серии.  Так же постарался переводить максимально близко к авторскому стилю, но сократил немного междомедий и восклицаний, не сильно значимых для смысла."
khmheh;Макросы в Rust. macro_rules;https://habr.com/ru/post/550460/;Я долго откладывал этот день, но вечно откладывать было нельзя. Что ж, время пришло. Пора наконец разобраться с макросами в Rust. Ну или хотя бы начать.
kstep;Абстракции без накладных расходов: типажи в Rust;https://habr.com/ru/post/257775/;"В предыдущем посте (англ.) мы затронули два столпа дизайна Rust (поскольку во внутренней речи я постоянно склоняю название языка, дальше я буду использовать русскоязычное название «раст», что мне кажется более органичным — прим. перев.):  безопасное использование памяти без сборщика мусора, многопоточность без гонок данных.  Этот пост начинает рассказ о третьем столпе:  абстракции без накладных расходов.  Одна из мантр C++, которая делает его таким подходящим для системного программирования — принцип абстракции с нулевой стоимостью: Реализации C++ подчиняются принципу нулевой стоимости: ты не платишь за то, что не используешь [Страуструп, 1994]. Более того: то, что ты используешь, кодируется наилучшим образом.  – Бьёрн Страуструп  "
Gorthauer87;Rust: От &str к Cow;https://habr.com/ru/post/282708/;Одной из первых вещей, которые я написал на Rust'е была структура с &str полем. Как вы понимаете, анализатор заимствований не позволял мне сделать множество вещей с ней и сильно ограничивал выразительность моих API. Эта статья нацелена на демонстрацию проблем, возникающих при хранении сырых &str ссылок в полях структур и путей их решения. В процессе я собираюсь показать некоторое промежуточное API, которое увеличивает удобство пользования такими структурами, но при этом снижает эффективность генерируемого кода. В конце я хочу предоставить реализацию, которая будет одновременно и выразительной и высокоэффективной. 
FL3;Разработка игр на Rust. Моя история;https://habr.com/ru/post/323120/;"  Привет Хабр! Я занимаюсь разработкой игры на Rust. В этот раз я хочу показать немного гифок и показать всю историю игры от идеи до страницы в стиме.  Почему раст можно прочитать в начале прошлого поста. Но почему такой странный геймплей? Я же ненавижу футбол и всё что с ним связано! "
aprokurov;Пишем стэковую виртуальную машину на Rust'e;https://habr.com/ru/post/416505/;Здравствуй, Хабр! Уже несколько недель я занят разработкой своего языка программирования на Rust. Мне бы хотелось расказать о том с чем может столкнуться новичок в этом деле и о чем ему следует знать.
VanquisherWinbringer;Изучаю Rust: Как я игру «Змейка» сделал;https://habr.com/ru/post/428830/;"  Недавно начал изучать язык программирования Rust и так как когда я изучаю новый язык я делаю на нем «Змейку» то решил сделать именно ее.   Для 3D графики использовалась библиотека Three.rs  которая является портом библиотеки Three.js  → Код → Скачать и поиграть"
newpavlov;Rust: & и ref в паттернах;https://habr.com/ru/post/306582/;"(продолжение)  Как вам, думаю, известно, Раст входит в число языков реализующих сопоставление с образцом (pattern matching). В случае если вам незнаком данный термин, вы можете думать о нём как об обобщёном switch выражении в котором мы сравниваем объекты не только по значению, но и по структуре:  match hashmap.get(&key) {     Some(value) => do_something_with(value),     None => { panic!(""Oh noes!""); }, }  Разумеется сравнением дело не ограничивается. Как вы можете видеть в примере выше, объекты так же могут быть деструктурированы во время сопоставления (Some(value)) и их части присвоены другим переменным (value), которые могут быть далее использованы в соответствующей ветви match выражения.  Изящно, не правда ли? В Расте сопоставление с образцом это хлеб и масло не только для match, но и для for, (if) let и даже для обыкновенных аргументов функции.  Однако, долгое время я достаточно смутно представлял себе что происходит в случае когда мы добавляем к сопоставлению ссылки и заимствования. & и ref являются двумя «операторами» часто используемых при этом. Разнице между ними и будет посвящена данная статья. "
newpavlov;Rust: for и итераторы;https://habr.com/ru/post/306702/;"(предыдущая статья)  В данной статье мы обсудим for циклы, а так же родственные понятия итераторов и «итерируемых объектов».  В зависимости от вашего предыдущего опыта с другими языками программирования данные концепции могут показаться очень знакомыми в плане синтаксиса и семантики, или же совершенно новыми и непонятными. Наиболее близкие их аналоги можно найти в Питоне, но, думаю, программисты на Java, C# или же (современном) C++ так же увидят много пересечений с тем что есть в их языках. "
RustLangRu;Выпуск Rust 1.44.0: cargo tree, async/await в no_std, Unicode 13 и vec![] в const-контексте;https://habr.com/ru/news/t/505552/;"Данный анонс является компиляцией черновика анонса и подробных примечаний к выпуску. Официальный анонс короче, чем обычно: This is a shorter blog post than usual: in acknowledgement that taking a stand against the police brutality currently happening in the US and the world at large is more important than sharing tech knowledge, we decided to significantly scale back the amount of promotion we're doing for this release.  The Rust Core TeamКоманда Rust выпустила новую версию, 1.44.0. Rust — это язык программирования, позволяющий каждому создавать надёжное и эффективное программное обеспечение. Если вы установили предыдущую версию Rust средствами rustup, то для обновления до версии 1.44.0 вам достаточно выполнить следующую команду: rustup update stable Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта, а также посмотреть подробные примечания к выпуску на GitHub."
RustLangRu;Rust Foundation;https://habr.com/ru/post/541772/; Сегодня от имени команды Rust Core я рада объявить о Rust Foundation — новой независимой некоммерческой организации, управляющей языком программирования Rust и его экосистемой, которая исключительно ориентирована на поддержку всех сопроводителей — тех, кто создаёт проекты и управляет ими. Первое совещание Rust Foundation состоится завтра, 9 февраля, в 16:00 СТ (22:00 UTC+3). Совет директоров состоит из 5 директоров из компаний-учредителей: AWS, Huawei, Google, Microsoft и Mozilla, и 5 директоров из управления проектом. Двое из них — представители Core Team (Основной команды), трое — разных частей проекта: Reliability (Надёжности), Quality (Качества) и Collaboration (Взаимодействия).
ph_piter;Книга «Программирование на Rust»;https://habr.com/ru/company/piter/blog/523266/;" Привет, Хаброжители! Официальный гайд по языку программирования Rust поможет вам создавать более быстрое и надежное программное обеспечение. Высокоуровневая эргономика и низкоуровневое управление часто противоречат друг другу, но Rust бросает вызов этому конфликту.  Авторы книги входят в команду разработчиков языка, а значит, вы получите всю информацию из первых рук — от установки языка до создания надежных и масштабируемых программ. От создания функций, выбора типов данных и привязки переменных вы перейдете к более сложным концепциям:   Владение и заимствование, жизненный цикл и типажи. Гарантированная безопасность программ. Тестирование, обработка ошибок и эффективный рефакторинг. Обобщения, умные указатели, многопоточность, типажные объекты и сопоставления. Работа со встроенным менеджером пакетов Cargo для создания, тестирования, документирования кода и управления зависимостями. Продвинутые средства работы с Unsafe Rust.  Вы найдете множество примеров кода, а также три главы, посвященные созданию полноценных проектов для закрепления знаний: игры-угадайки, создание инструмента командной строки и многопоточного сервера."
LooMaclin;Пишем Telegram-бота на Rust, который будет запускать код на… Rust?;https://habr.com/ru/post/326830/;Доброй ночи! Сегодня хотелось бы кратко рассказать о том, как написать Telegram-бота на Rust, который будет запускать код на Rust. У статьи нет цели произвести полное погружение в API telegram_bot, Serde, Telegram или в нюансы разработки на Rust. Она скорее носит ознакомительный характер. Числа Пеано с помощью системы типов складывать не будем.  
m1rko;Как обновление Rust 1.26 ускорило мой код в три с лишним раза;https://habr.com/ru/post/358974/;"Хочу поделиться небольшой историей о мощи LLVM и преимуществах языков высокого уровня над ассемблером.  Я работаю в компании Parity Technologies, которая поддерживает клиент Parity Ethereum. В этом клиенте нам нужна быстрая 256-битная арифметика, которую приходится эмулировать на программном уровне, потому что никакое оборудование не поддерживает её аппаратно.  Долгое время мы параллельно делаем две реализации арифметики: одну на Rust для стабильных сборок и одну со встроенным ассемблерным кодом (который автоматически используется nightly-версией компилятора). Мы так поступаем, потому что храним 256-битные числа как массивы 64-битных чисел, а в Rust нет никакого способа умножить два 64-битных числа, чтобы получить результат более 64 бит (так как целочисленные типы Rust только доходят до u64). Это несмотря на то, что x86_64 (наша основная целевая платформа) нативно поддерживает 128-битные результаты вычислений с 64-битными числами. Так что мы разделяем каждое 64-битное число на два 32-битных (потому что можно умножить два 32-битных числа и получить 64-битный результат)."
bmusin;Rust: зачем нужны макросы;https://habr.com/ru/post/350716/;Как-то я сказал своему коллеге, что в Rust имеются макросы, ему показалось, что это плохо. Раньше у меня была такая же реакция, но Rust показал мне, что макросы не обязательно плохи.  Где и как их уместно применять? Смотрите под катом.
m1rko;Бесстрашная защита. Безопасность памяти в Rust;https://habr.com/ru/post/438288/;"В прошлом году Mozilla выпустила Quantum CSS для Firefox, который стал кульминацией восьми лет разработки Rust — безопасного для памяти языка системного программирования. Потребовалось более года, чтобы переписать основной компонент браузера на Rust.   До сих пор все основные браузерные движки написаны на C++, в основном по соображениям эффективности. Но с большой производительностью приходит большая ответственность: программисты C++ должны вручную управлять памятью, что открывает ящик Пандоры уязвимостей. Rust не только устраняет такие ошибки, но его методы также предотвращают гонки данных, позволяя программистам более эффективно внедрять параллельный код.  "
bmusin;Rust: «Векторы — это значения»;https://habr.com/ru/post/348866/;В последнее время я долго думал над персистентными коллекциями и в особенности над тем, как они относятся к Rust. Хочу поделиться с вами своими наблюдениями. О том, как устроены персистентные векторы, быстрее ли они традиционных коллекций — смотрите под катом.
justboris;Возможно, вам не нужен Rust, чтобы ускорить ваш JS;https://habr.com/ru/post/350018/;"Несколько недель назад я обнаружил пост ""Окисляем Source Maps с Rust и WebAssembly"" распространяющийся по Твиттеру и расказывающий о выигрыше в производительности от замены обычного JavaScript в библиотеке source-map на Rust, скомпилированный в WebAssembly. Пост возбудил мой интерес не потому, что я большой фанат Rust или WASM, скорее потому что я всегда интересовался фичами языков и оптимизациями, которых не хватает Javascript для того чтобы достичь аналогичной производительности. Так что я скачал библиотеку с GitHub и отправился в небольшое исследование производительности, которое я документирую здесь практически дословно."
Deluar;Линус Торвальдс остался недоволен рядом моментов в использовании Rust для Linux;https://habr.com/ru/company/selectel/blog/552142/;" В прошлом году разработчики ядра Linux предложили использовать Rust для нового встроенного кода. В марте 2021 года эта идея была частично реализована — в состав ветки linux-next, на которой будет базироваться Linux 5.13, включили начальный набор компонентов для разработки драйверов устройств на Rust.  Тогда же была опубликована документация по использованию Rust в ядре Linux с практическими примерами. Изначально Торвальдс не выступал резко против нововведений (не делает этого он и сейчас). Заявил лишь, что нужно проверить, как все эти новинки работают на практике. Сейчас Линус Торвальдс провел рецензирование патчей с реализацией возможности создания драйверов на Rust для Linux и высказал ряд критических замечаний."
PatientZero;Пишем игру «Жизнь» для NES на Rust;https://habr.com/ru/post/504262/;" Этот пост — о программе на Rust…  $ cargo install conway-nes …выводящей двоичный файл NES…  $ conway-nes > life.nes …в котором выполняется конвеевская игра «Жизнь»!  $ fceux life.nes    # fceux is a NES emulator Запустив игру на эмуляторе, нажмите любую кнопку контроллера, чтобы начать заново с рандомизированного состояния."
Siemargl;Портируем утилиту командной строки с Go/Rust на D;https://habr.com/ru/post/517790/;Несколько дней назад, на реддите в «программировании», Paulo Henrique Cuchi поделился своим опытом разработки утилиты командной строки на Rust и на Go (перевод на Хабре). Утилита, о которой идет речь, — это клиент для его пет-проекта Hashtrack. Hashtrack предоставляет GraphQL API, с помощью которого клиенты могут отслеживать определенные хэштэги твиттера и получать список соответствующих твитов в реальном времени. Будучи спровоцированным комментарием, я решил написать порт на D, чтобы продемонстрировать, как D может быть использован для подобных целей. Я постараюсь сохранить ту же структуру, которую он использовал в своем блогпосте.  Исходники на Гитхабе   Видео по клику
lelyakuznetsova;Бьярне Страуструп о контроле над языком, удалении старых функций, заимствованиях у Rust и многом другом;https://habr.com/ru/company/jugru/blog/525288/;Этим летом на онлайн-конференции C++ Russia побывал самый почетный гость, какой только может быть на мероприятии по C++: создатель этого языка Бьярне Страуструп. Мы поговорили с ним о контроле над языком, нововведениях, удалении старых функций, о том, почему у языка нет четкой экосистемы, и как так получилось, что у С++ нет стандартной сетевой библиотеки. А поскольку сообщество C++ вечно обсуждает Rust, не обошлось и без вопроса о заимствованиях между этими языками.  Бьярне не нуждается в представлении, но у него столько активностей и заслуг, что попробуем перечислить:   написал множество публикаций, в том числе книги «Язык программирования С++» и «Программирование: Принципы и практика использования C++» работает управляющим директором в отделе технологий компании «Морган Стенли» в Нью-Йорке преподает в Колумбийском университете принимает активное участие в работе комитета по стандартизации C++ состоит в Национальной академии инженерии США, IEEE, Ассоциации по вычислительной технике. Исследует программирование в области распределенных вычислений, инструменты развития ПО и языки программирования.  магистр и заслуженный профессор Орхусского университета и доктор по направлению «Информатика» Кембриджского университета, почетный член научного сообщества Колледжа Черчилля, заслуженный профессор Санкт-Петербургского ИТМО  Вопросы ему задавали Сергей Платонов (С++ программист, организатор С++ Siberia) и Сергей Федоров (руководитель разработки бэкенда Яндекс.Лавки). Под катом — перевод, а также видеозапись интервью для тех, кто хочет послушать на английском.
m1rko;Бесстрашная защита. Безопасность потоков в Rust;https://habr.com/ru/post/441370/;"Это вторая часть цикла статей «Бесстрашная защита». В первой мы рассказывали про безопасность памяти   Современные приложения многопоточны: вместо последовательного выполнения задач программа использует потоки для одновременного выполнения нескольких задач. Все мы ежедневно наблюдаем одновременную работу и параллелизм:   Веб-сайты одновременно обслуживают несколько пользователей.  UI выполняет фоновую работу, которая не мешает пользователю (представьте, что каждый раз при вводе символа приложение подвисает для проверки орфографии).  На компьютере может одновременно выполняться несколько приложений.  Параллельные потоки ускоряют работу, но привносят набор проблем синхронизации, а именно взаимные блокировки и состояние гонки. С точки зрения безопасности, почему мы заботимся о безопасности потоков? Потому что у безопасности памяти и потоков одна и та же основная проблема: недопустимое использование ресурсов. Здесь атаки приводят к таким же последствиям, как атаки на память, включая повышение привилегий, выполнение произвольного кода (ACE) и обход проверок безопасности."
Cerberuser;Имитируем функционал зависимых типов в системе типов Rust;https://habr.com/ru/post/477330/;"Системы типов — это настоящее безумие.  Некоторое время назад я уже отметился здесь со статьёй, в которой пытался разобрать, какие гарантии в compile-time может дать система типов Rust. Кое-какие интересные моменты удалось выловить уже тогда, однако больше всего меня зацепил весьма развёрнутый комментарий, описывающий некоторые вещи, доступные в зависимо-типизированном Idris. Разумеется, я не мог остаться в стороне. Результат исследований доступен на github, а детальный разбор — под катом."
denis-19;Mail.ru запустила онлайн-редактор для программирования на Python, Java, C++, PHP, Node JS, Go, Erlang, Rust и Swift;https://habr.com/ru/news/t/551380/;"  8 апреля 2021 года Mail.ru Group запустила на своей платформе для разработчиков All Cups онлайн-редактор кода с возможностью совместной работы. Сейчас там доступны такие языки программирования: Python 3.8, Java 11, C++ 17, PHP 7.4, Node JS 14, Go 1.15, Erlang OTP 23, Rust 1.51 и Swift 5.3.3. Mail.ru пообещала расширить в будущем этот список.   Максимальный размер кода ограничен 50 тыс. символами. Если разработчик достигнет этого предела, то код не будет отправляться на сервер и синхронизироваться между участниками проекта, а также появится ошибка о превышении лимита."
bmusin;Rust: состояния типов;https://habr.com/ru/post/350372/;Раньше в Rust были состояния типов, которые были удалены из языка еще до официального релиза первой версии. В этой статье я раскрою вам тайну: Rust поддерживает состояния типов. Прошу под кат.
m1rko;Пишем операционную систему на Rust. Реализация страничной памяти (новый вариант);https://habr.com/ru/post/445618/;"В этой статье разберёмся, как реализовать поддержку страничной памяти в нашем ядре. Сначала изучим различные методы, чтобы фреймы физической таблицы страниц стали доступны ядру, и обсудим их преимущества и недостатки. Затем реализуем функцию преобразования адресов и функцию создания нового сопоставления.  Этот цикл статей опубликован выложен на GitHub. Если у вас какие-то вопросы или проблемы, открывайте там соответствующий тикет. Все исходники для статьи лежат в этой ветке.  Ещё одна статья о страничной организации памяти?  Если вы следите за этим циклом, то видели статью «Страничная память: продвинутый уровень» в конце января. Но меня раскритиковали за рекурсивные таблицы страниц. Поэтому решил переписать статью, применив иной подход для доступа к фреймам."
Ejhi;Ускоряем numpy, scikit и pandas в 100 раз с Rust и LLVM: интервью с разработчиком Weld;https://habr.com/ru/post/497346/;"Привет, Хабр! Представляю вашему вниманию перевод статьи «Interview with Weld’s main contributor: accelerating numpy, scikit and pandas as much as 100x with Rust and LLVM».  Проработав несколько недель с data science инструментарием в Python и R, я начал задаваться вопросом, а нет ли какого промежуточного представления (Intermediate representation, IR) наподобие CUDA, которое можно использовать в разных языках. Должно же быть что-то получше, чем реимплементация и оптимизация одних и тех же методов в каждом языке. В дополнение к этому было бы неплохо иметь общую среду выполнения (common runtime), чтобы оптимизировать всю программу целиком, а не каждую функцию в отдельности.   После нескольких дней исследования и тестирования различных проектов я нашел Weld (можете ознакомиться с академической статьей).   К моему удивлению одним из автором Weld является Матей Захария (Matei Zaharia), создатель Spark.  Итак, я связался с Шоумиком Палкаром (Shoumik Palkar), основным контрибьютором Weld, и взял интервью у него. Шоумик — аспирант факультета компьютерных наук в Стэнфордском университете, куда поступил по совету Матея Захарии.  Weld еще не готова к промышленному использованию, но весьма перспективна. Если вам интересно будущее data science и Rust в частности, вам понравится это интервью."
m1rko;Операционная система на Rust. Страничная память: продвинутый уровень;https://habr.com/ru/post/439066/;"В этой статье объясняется, как ядру операционной системы получить доступ к фреймам физической памяти. Изучим функцию для преобразования виртуальных адресов в физические. Также разберёмся, как создавать новые сопоставления в таблицах страниц.  Этот блог выложен на GitHub. Если у вас какие-то вопросы или проблемы, открывайте там соответствующий тикет. Все исходники для статьи здесь.  Введение Из прошлой статьи мы узнали о принципах страничной организации памяти и о том, как работают четырёхуровневые страничные таблицы на x86_64. Мы также обнаружили, что загрузчик уже настроил иерархию таблиц страниц для нашего ядра, поэтому ядро работает на виртуальных адресах. Это повышает безопасность, но возникает проблема: как получить доступ к настоящим физическим адресам, которые хранятся в записях таблицы страниц или регистре CR3?"
LooMaclin;Введение в Iron: плавим руду на Rust;https://habr.com/ru/post/305714/; Iron — это высокоуровневый веб-фреймворк, написанный на языке программирования Rust и построенный на базе другой небезызвестной библиотеки hyper. Iron разработан таким образом, чтобы пользоваться всеми преимуществами, которые нам предоставляет Rust. 
m1rko;Пишем операционную систему на Rust. Страничная организация памяти;https://habr.com/ru/post/436606/;"В этой статье представляем страницы, очень распространённую схему управления памятью, которую мы тоже применим в нашей ОС. Статья объясняет, почему необходима изоляция памяти, как работает сегментация, что такое виртуальная память и как страницы решают проблему фрагментации. Также исследуем схему многоуровневых таблиц страниц в архитектуре x86_64.  Этот блог выложен на GitHub. Если у вас какие-то вопросы или проблемы, открывайте там соответствующий запрос."
Seleditor;Опубликован релиз Sequoia 1.0, реализации OpenPGP на языке Rust;https://habr.com/ru/company/selectel/blog/533622/;" Спустя три года после начала разработки опубликован релиз Sequoia 1.0. Это реализация OpenPGP на языке Rust, содержащая обширную библиотеку функций и инструментарий командной строки. Релиз опубликован после того, как разработчики закончили работу над низкоуровневым API — в нем как раз и реализован в полной мере стандарт OpenPGP.  Написано все это на Rust, а распространяется пакет под лицензией GPLv2+. Есть версии для всех основных платформ — Linux, FreeBSD, Windows, macOS, Android и iOS. Команда разработчиков небольшая, ее основа — три участника разработки GnuPG из компании g10code. Эта же команда создала и сервис ключей Hagrid, который применяется в сервисе keys.openpgp.org. О том, что представляет из себя пакет — под катом."
Seleditor;Вышел пакет Sequoia 0.20.0, реализация OpenPGP на Rust;https://habr.com/ru/company/selectel/blog/523980/;" Вчера был представлен выпуск пакета Sequoia 0.20.0. Он предлагает библиотеку функций и инструментарий командной строки с реализацией стандартов OpenPGP (RFC-4880). Команда проекта состоит из трех человек — участников проекта OpenPGP (RFC-4880). Для повышения безопасности и надежности кодовой базы они решили создать новую свободную реализацию OpenPGP на языке Rust. Код проекта распространяется под лицензией GPLv2+.  Цель разработчиков — не только повышение безопасности продукта, но и избавление от недостатков GnuPG. Без нарушения совместимости или кардинальной переработки кодовой базы их нельзя устранить в основном проекте. Так, связь между отдельными компонентами GnuPG достаточно сильная, так что вносить изменения сложно, не говоря уже о создании системы unit-тестирования. Инструментарий командной строки gpupg не синхронизирован по функциональности и библиотекой функций, так что ряд действий можно выполнить лишь при помощи утилиты."
varanio;Tagged Unions в PHP (примерно как в Rust);https://habr.com/ru/post/541670/;"UPD. Во избежание путаницы по просьбам трудящихся хочу еще раз уточнить, что это только черновик, который еще пока что не был официально предложен В предыдущей статье я писал про добавление enums в PHP8.1. Голосование прошло успешно, так что можно считать, что вопрос решенный. Однако та реализация enums — лишь часть глобального плана. Сегодня мы рассмотрим следующий пункт, tagged unions, по-русски это переводится как ""тип-сумма"".  Голосования по нему пока не проходило, но предлагается также включить его в PHP 8.1. Все эти термины ""алгебраические типы данных"", ""тип-сумма"" звучат страшно, но на деле всё довольно просто. Зачем всё это вообще нужно? Result как в Расте Если вы писали на языке Rust, то наверняка встречали встроенный enum Result. В Rust, Go и т.д. нет механизма exception, так как в этих языках считается, что явная обработка ошибок гораздо надёжнее. Язык вынуждает тебя явно проработать все варианты событий, а не кидать исключение в надежде, что кто-то наверху знает о нём и умеет правильно обрабатывать. (Не будем здесь холиварить, на тему exceptions vs return type, у каждого своё мнение). Если говорить конкретно про Раст, то результатом вызова функции, которая может породить ошибку, часто делают значение типа Result. Result состоит из двух вариантов (case-ов в терминологии enum в PHP): Ok и Err. Варианты мы могли бы сделать и с помощью предыдущего функционала enum, или даже констант, но нам нужно возвращать еще и сами значения. Причем, в случае успеха значением может быть строка, а в случае ошибки какой-нибудь другой тип. Например, integer (статус HTTP-ответа). Как это будет выглядеть в PHP, если голосование будет успешным: enum Result {     case Ok(public string $json);     case Err(public int $httpStatus); }  function requestApi($url): Result {     // }"
shurup;nushell — современный shell, сочетающий Unix-конвейеры и объекты в духе PowerShell;https://habr.com/ru/company/flant/news/t/465335/;На днях был представлен проект nushell (краткое название — Nu). Он появился благодаря идеям из «философии классических конвейеров в Unix, подхода со структурированными данными из PowerShell, функционального программирования, системного программирования и так далее». На GitHub проект лаконично описан как «современный shell эры GitHub, написанный на Rust».  
maybe_elf;Google: команде безопасности ядра Linux не хватает примерно сотни инженеров;https://habr.com/ru/news/t/571734/;Команда безопасности Google заявила, что код ядра Linux недостаточно хорош, так как еженедельно выходит более 100 исправлений, и для работы над ним требуется еще как минимум 100 инженеров.
AloneCoder;Что я изменил бы в Go;https://habr.com/ru/company/mailru/blog/325046/; В течение полугода я программировал преимущественно на Go. И я разочарован. По двум причинам:  В Go особенно трудно придерживаться функциональной парадигмы. По сути, язык препятствует функциональному программированию. Меня это разочаровало, потому что в императивном коде, который я пишу, большое количество шаблонных кусков. К тому же, как мне кажется, в этом случае выше риск ошибок, в отличие от использования функциональных абстракций.  Я считаю, что Go упускает свои шансы. В программных языках появились замечательные нововведения (особенно в сфере проверки и вывода типов — type inference), делающие код безопаснее, быстрее и чище. Мне хотелось бы, чтобы Google использовала своё влияние, чтобы поддержать некоторые из этих идей.  Я не первый, кто воспринимает Go подобным образом. Вот публикации других людей, разделяющих мои впечатления:  Why Go Is Not Good Everyday hassles in Go Three Months of Go (from a Haskeller’s perspective) The Language I Wish Go Was  Ниже я добавлю свои соображения. Чтобы показать, как именно можно улучшить Go, я буду сравнивать его с Rust.
ph_piter;О нет! Моя Data Science ржавеет;https://habr.com/ru/company/piter/blog/509516/;"Привет, Хабр!  Предлагаем вашему вниманию перевод интереснейшего исследования от компании Crowdstrike. Материал посвящен использованию языка Rust в области Data Science (применительно к malware analysis) и демонстрирует, в чем Rust на таком поле может посоперничать даже с NumPy и SciPy, не говоря уж о чистом Python.    Приятного чтения!"
Nurked;Как мы ржавели. История внедрения и обучения;https://habr.com/ru/post/537790/;Все говорили – переходи на rust! Начинай пользоваться самым-самым языком, который самый любимый язык на stackoverflow и всё такое. Я тяжело вздохнул и огляделся. Ну опять двадцать-пять. Ладно, давайте разбираться, как правильно покрывать всё ржавчиной. Профессионально я программирую уже 17 лет. В далёкие-предалёкие времена я начал изучать программирование с x86 Assembly. Такой жестокий подход к изучению компьютера дал мне глубокое понимание того как работает процессор и что делают другие языки программирования. Учить новые языки для меня никогда не было проблемой. Я их просто учил. C, C++, шарпы, ГО, тысячи разных скриптов и фреймворков. Чего уж там, ещё один язык, можно и выучить. Ага. Только вот не с этой ржавой развалюхой. Я просидел две недели над официальным руководством, пялился в VSCode и не мог выдавить из себя больше чем fn main() {}. Ну какого же чёрта? Я просто закрыл глаза, открыл руководство на рандомной странице и начал его читать. И прикол в том, что я понял о чём там говориться. И тут до меня дошло… Руководство написано наизнанку. Начало и конец ничуть не лучше чем в Мементо Кристофера Нолана. Они как-то умудрились запутать в общем-то нормальное руководство.  После этого всё пошло получше. Ржавые шестерёнки заскрипели и начали крутиться. Программа пошла-поехала. Если хотите знать как я внедрил rust в продакшин, как я ему научился и что из этого вышло – добро пожаловать под кат. Реальные люди, коммиты, примеры и никаких todo-list и хеллоу-ворлдов. 
m1rko;Microsoft не изолировала Windows Defender в песочнице, так что это сделал я;https://habr.com/ru/post/334792/;"Microsoft подвергла своих пользователей немалому риску, когда выпустила Windows Defender вне песочницы. Меня это удивило. Песочница — одна из самых эффективных техник усиления безопасности. Почему Microsoft изолировала в песочнице другие высоковероятные цели атаки, вроде кода JIT в Microsoft Edge, но оставила Windows Defender без защиты?  В качестве PoC (proof-of-concept) я изолировал Windows Defender, а сейчас выкладываю свой код в открытый доступ как Flying Sandbox Monster. Основа Flying Sandbox Monster — это AppJailLauncher-rs, фреймворк на Rust для помещения ненадёжных приложений в AppContainers. Он также позволяет вынести I/O приложения за TCP-сервер, чтобы приложение в песочнице работало на полностью другой машине. Это дополнительный уровень изоляции.  В статье я опишу процесс и результаты создания этого инструмента, а также выскажу свои мысли о Rust на Windows."
lain8dono;"Операционные системы с нуля; уровень 1 (старшая половина)";https://habr.com/ru/post/351774/;" Настало время следующей части. Это вторая половина перевода лабы №1. В этом выпуске мы будем писать драйверы периферии (таймер, GPIO, UART), реализуем протокол XMODEM и одну утилитку. Используя всё это мы напишем командную оболочку для нашего ядра и загрузчик, который позволит нам не тыкать microSD-карточку туда-сюда. Младшая половина. Начинать чтение стоит с нулевой лабы."
vorona_karabuta;Интервью со спикером конференции RubyRussia Годфри Чаном;https://habr.com/ru/company/railsclub/blog/422925/;"Всем привет! 6 октября в Москве пройдет конференция RubyRussia — cтарый добрый RailsClub, но с новым именем. Спикеры этого года: Aaron Patterson, Charles Nutter, Godfrey Chan, Maciej Mensfeld, Markus Schirp и не только. Ну и конечно, 600 участников, лучшие компании со стендами в холле и огненное афтепати.  Традиционно, перед конференцией мы разговариваем о самых актуальных темах в Ruby и Rails. Сегодня знакомим вас с Godfrey Chan — ex-Rails core team, работает в Tilde, где разрывается между созданием умного Rails-профайлера Skylight, работой над Ember.js и развитием JavaScript на TC39. Тим-лид из Evrone Дмитрий Матвеев задал нашему гостю важные вопросы.   "
Quintanar;Векторные языки — SQL интерпретатор в 100 строк;https://habr.com/ru/company/dbtc/blog/552852/;В предыдущей статье я описал векторные языки и их ключевые отличия от обычных языков. На коротких примерах я постарался показать, как эти особенности позволяют реализовывать алгоритмы необычным образом, кратко и с высоким уровнем абстракции. В силу своей векторной природы такие языки идеально присоблены для обработки больших данных и в качестве доказательства в этой статье я полностью реализую на векторном языке простой SQL интерпретатор. А чтобы продемонстрировать, что программист на векторном языке может писать на векторном языке на любом языке, я реализую тот же самый интерпретатор на Rust. Преимущества векторного подхода столь велики, что даже интерпретатор в интерпретаторе сможет обработать select с группировкой таблицы в 100 миллионов строк за полминуты. 
Googolplex;Стабильность как результат;https://habr.com/ru/post/243315/;"Эта статья — перевод второй части из серии блог-постов, приуроченных к предстоящему релизу первой стабильной версии языка Rust. Перевод первой части можно прочитать здесь.  Замечания к переводу прошу слать в личку.    Много важного несёт с собой предстоящий релиз Rust 1.0, но самым главным в нём являются наши усилия по обеспечению стабильности, аналогичные нашей постоянной ориентации на безопасность.  Начиная с версии 1.0, мы перейдём на шестинедельный цикл релизов и к набору «каналов». Канал стабильных релизов обеспечит безболезненные обновления, а канал ночных сборок предоставит первопроходцам доступ к тому функционалу, над которым в данным момент ведётся работа.  "
lain8dono;"Операционные системы с нуля; уровень 2 (старшая половина)";https://habr.com/ru/post/353024/; Пришло время написать файловую систему. Файловая система сама себя не напишет. В этой половинке лабы мы таки реализуем файловую систему FAT32, прикрутим к ней драйвер SD-карты и чуть-чуть повзаимодействуем с ней через нашу интерактивную оболочку. Нулевая лаба Первая лаба: младшая половина и старшая половина Младшая часть. Продолжение под катом.
kvark;Ржавая очевидность;https://habr.com/ru/post/259299/;"Каждый ищет в языках программирования что-то своё: кому-то важна функциональная сторона, кому-то богатство библиотек, а другой сразу обратит внимание на длину ключевых слов. В данной статье я хотел бы рассказать, что особенно важно для меня в Rust — его очевидность. Не в том, что его легко изучить с нуля, а в том, как легко исследовать поведение кода, глядя на его фрагменты. Я перечислю особенности языка, позволяющие точно определить, что делает та или иная функция, вырванная из контекста.  Особенно отмечу, что не пытаюсь полностью описать язык, а только одну его сторону. Это мой личный взгляд на философию Rust, не обязательно совпадающий с официальной позицией разработчиков! Кроме того, Rust не будет очевиден пришельцу из других языков: кривая обучение довольно резкая, и не раз компилятор заставит вас мысленно сказать «wtf» на пути к просветлению. "
redfenix;Syncookied — OpenSource ddos protection system;https://habr.com/ru/company/beget/blog/301892/;"Когда в нашей компании LTD BeGet встала задача прозрачной фильтрации атак на 4 уровне модели OSI, мы написали свое решение Syncookied. Данным решением мы бы хотели поделиться с Internet-сообществом, так как на текущий момент аналогов ему мы не нашли (или мы о них не знаем). Есть платные решения на подобии Arbor, F5, SRX, но стоят они совершенно других денег и в них используются другие технологии защиты.  Почему для разработки мы выбрали язык Rust и фреймворк NetMap, с какими сложностями мы столкнулись в процессе — будет рассказано в этой статье.  » GitHub  » GitHub модуль ядра » Страница проекта  "
bmusin;Что такое Tokio и Async I/O и зачем это нужно?;https://habr.com/ru/post/347726/;Сообщество Rust в последнее время сконцентрировало много своих усилий на асинхронном вводе/выводе, реализованном в виде библиотеки Tokio. И это замечательно. Многим из участников сообщества, тем, которые не работали с веб-серверами и связанными с этим вещами, не ясно, чего же мы хотим добиться. Когда эти вещи обсуждались во времена версии 1.0, я тоже имел смутное представление об этом, никогда прежде не работав с этим раньше.  Что это такое — Async I/O? Что такое корутины (coroutines)? Что такое легковесные нити (threads)? Что такое футуры? (futures)? Как они сочетаются между собой?  Рассмотрим модели многопоточности на примере Rust и Go.
lain8dono;"Операционные системы с нуля; Уровень 0";https://habr.com/ru/post/349248/; Добрый день/вечер/ночь/утро! Есть один экспериментальный курс по операционным системам. Есть он в Стэнфордском университете. Но часть материалов доступно всем желающим. Помимо слайдов доступны полные описания практических занятий.  Чем этот курс отличается от прочих других? Большая часть кода пишется самостоятельно и выполняется на вполне реальном современном железе. В качестве целевой платформы выбран Raspberry Pi 3 model B. Т.е. достаточно актуальная архитектура AArch64. ARMv8 Cortex-A53, четыре ядра, 64-бита и вот это всё. В качестве основного языка программирования выбран Rust. Который безопасный, быстрый, без GC и так далее. Его, Rust, предполагается изучать во время курса. Тут есть про диски, файловые системы, операции ввода-вывода, потоки /процессы, планирование, виртуальную память, защиту и безопасность, прерывания, параллелизм и синхронизацию. Как и в любом другом, уважающем себя курсе. Разница в актуальности материала и в количестве практики. Коддить придётся много.
olegchir;«Придётся писать самим. Сели и написали»: жизнь разработчиков лабораторного кластера супермассивов в Сбертехе;https://habr.com/ru/company/sberbank/blog/350990/;"Существует миф, что банки — это очень закостенелые структуры, в которых нет места эксперименту. Чтобы опровергнуть этот миф, мы провели небольшое интервью с Валерием Выборновым — начальником отдела разработки лабораторного кластера супермассивов в Сбербанк-Технологиях. У себя в команде они не боятся пользоваться всей мощью Scala, Akka, Hadoop, Spark, и даже пишут прототипы на Rust.  Основные вопросы:  Обсуждение примера экспериментального проекта (работа с социальным графом) с техническими подробностями; Используемые языки и технологии (Scala, Akka, Hadoop, Spark, Rust, и т.п.); Можно ли прийти в Сбертех сразу на руководящую должность? Как там внутри всё организовано, какие есть грейды? Как живётся простому разработчику? Подробности внедрения Сберджайла;   "
AlexFTF;Что нового в ядре Linux;https://habr.com/ru/post/520950/;" После всех этих лет, разработчики ядра Linux продолжают внедрять новшества. Новые версии будут быстрее и стабильнее. Linux работает практически на всем: все 500 из 500 самых быстрых суперкомпьютеров мира; большинство общедоступных облаков, даже Microsoft Azure; и 74 процента смартфонов. Действительно, благодаря Android, Linux является самой популярной операционной системой для конечных пользователей, чуть обойдя Windows на 4 процента (39% против 35%). Итак, что же будет дальше с Linux? После освещения Linux на протяжении всех 29 лет его истории и зная практически любого, кто хоть как-то связан с разработкой Linux, включая Линуса Торвальдса, я думаю, что у меня есть ответ на этот вопрос."
Source;Пять перспективных языков программирования со светлым будущим;https://habr.com/ru/post/310252/; Если разделять языки программирования по популярности, то они делятся на три эшелона. Первый эшелон включает мейнстрим-языки, такие как Java, JavaScript, Python, Ruby, PHP, C#, C++ и Objective-C. Несмотря на то, что некоторые из ведущих языков возможно увядают, вам лучше знать один или несколько из них, если вы хотите иметь возможность легко найти работу. Языки второго эшелона пытаются пробиться в мейнстрим, но ещё не добились этого. Они доказали свою состоятельность путем создания сильных сообществ, но они до сих пор не используются большинством консервативных IT-компаний. Scala, Go, Swift, Clojure и Haskell — языки, которые я бы отнёс ко второму эшелону. Некоторые компании используют эти языки для отдельных сервисов, но широкое применение встречается редко (за исключением Swift, который начинает обгонять Objective-C в качестве основного языка для iOS). Go и Swift имеют хорошие шансы на переход из второго эшелона в первый в течение ближайших двух-трёх лет. Большинство языков в первом эшелоне прочно укоренились на своих позициях. Поэтому выпадение языка с лидирующих позиций занимает ощутимое время, а для языка второго эшелона очень трудно пробиться в первый. Перспективные языки из данной статьи относятся к третьему эшелону, и они только начинают свой путь наверх. Некоторые языки пребывают в третьем эшелоне на протяжении многих лет, не получая популярности, в то время как другие врываются на сцену всего за пару лет. Как, например, языки, про которые пойдёт речь в статье.  
vorona_karabuta;Интервью c Аароном Паттерсоном, спикером конференции RubyRussia 2018;https://habr.com/ru/company/railsclub/blog/424787/;Привет! Продолжаем серию интервью со спикерами конференции RubyRussia. Аарон Паттерсон (он же tenderlove) — член Ruby core team и Rails core team, ведущий инженер-программист в маленьком стартапе под названием GitHub. Павел Аргентов пообщался с Аароном перед его второй поездкой в Россию.    Начнем со стандартного вопроса. Какова твоя личная ruby-история? Как ты сел на этот поезд? Расскажи про свои достижения? Получилось ли сделать мир лучше?
snuk182;Декларативное управление памятью;https://habr.com/ru/post/470129/;"(достаточно вольный перевод огромной эмоциональной статьи, которая на практике наводит мосты между возможностями Си и Rust в плане решения бизнес-задач и разрешение багов, связанных с ручным управлением памятью. Также должно быть полезно и людям с опытом сборки мусора — отличий в плане семантики намного меньше, чем может показаться — прим.пер.) С момента, когда я заинтересовался Rust, прошла будто целая вечность. Тем не менее я отчетливо помню знакомство с анализатором заимствований (borrow checker, далее — БЧ — прим.пер.), сопровождаемое головной болью и отчаянием. Разумеется я не один такой страдающий — статей в интернете на тему общения с БЧ предостаточно. Однако я хотел бы выделиться и осветить в данной статье БЧ с точки зрения практической пользы, а не только лишь генератора головной боли. Периодически мной встречаются мнения, что в Rust — ручное управление памятью (вероятно, раз не автоматическое с GC, тогда какое же еще? — прим.пер.), однако я совершенно не разделяю данную точку зрения. Способ, примененный в Rust, я называю термином ""декларативное управление памятью"". Почему так — сейчас покажу."
lain8dono;"Операционные системы с нуля; уровень 2 (младшая половина)";https://habr.com/ru/post/352414/; В этой части мы напишем менеджер памяти для того, чтоб разблокировать использование Vec, String, HashMap и всего этого. Сразу после этого реализуем файловую систему FAT32 и подключим драйвер для EMMC (такая штука для общения с SD-карточками). В конце концов в нашей командной оболочке появятся пара новых команд: cd, pwd, cat, ls. Нулевая лаба Первая лаба: младшая половина и старшая половина
lain8dono;"Операционные системы с нуля; уровень 3 (младшая половина)";https://habr.com/ru/post/353994/; В этой лабе мы будем реализовывать возможность запуска пользовательских программ. Т.е. процессы и всю зависимую инфраструктуру. В начале разберёмся как переключаться из привилегированного кода, как переключать контексты процессов. Затем реализуем простенький round-robin планировщик, системные вызовы и управление виртуальной памятью. В конце концов выведем наш шелл из пространства ядра в пространство пользователя. оригинал Нулевая лаба Первая лаба: младшая половина и старшая половина Вторая лаба: младшая половина и старшая половина
gobwas;Как выбрать язык программирования?;https://habr.com/ru/company/mailru/blog/273341/;"  Именно таким вопросом задалась команда Почты Mail.Ru перед написанием очередного сервиса. Основная цель такого выбора — высокая эффективность процесса разработки в рамках выбранного языка/технологии. Что влияет на этот показатель?  Производительность; Наличие средств отладки и профилирования; Большое сообщество, позволяющее быстро найти ответы на вопросы; Наличие стабильных библиотек и модулей, необходимых для разработки веб-приложений; Количество разработчиков на рынке; Возможность разработки в современных IDE; Порог вхождения в язык.  Кроме этого, разработчики приветствовали немногословность и выразительность языка. Лаконичность, безусловно, так же влияет на эффективность разработки, как отсутствие килограммовых гирь на вероятность успеха марафонца. "
elena_voronina;RailsClub 2016: интервью со Steve Klabnik;https://habr.com/ru/company/railsclub/blog/312746/;"RailsClub 2016 22 октября, билетов осталось совсем мало. Не откладывайте регистрацию, если собираетесь идти! Мы публикуем разговоры с нашими спикерами, и сегодня это Steve Klabnik — член Rust core team, активный open source контрибьютер и очень интересный собеседник! Автор книг “The Rust Programming Language”, “Rails 4 in Action” и “Designing Hypermedia APIs”. Живет в Бруклине, сам о себе пишет, что «проводит слишком много времени на GitHub».  Стив уже выступал на RailsClub в 2012 году. И мы также публиковали интервью с ним (любопытным можно посмотреть тут). С тех пор Стив плотно занялся Rust, сделал много интересных штук и мы поняли, что нужно обязательно пригласить его снова :)  Думаю, эта наша публикация будет интересна не только рубистам, но и поклонникам Rust, которых в России становится все больше. На последнем митапе к нам подошли ребята из русскоязычного Rust-сообщества rustycrate.ru . Приглашают всех, кто после RailsClub заинтересуется Rust, не стесняться присоединяться и задавать вопросы.   Доклад на нашей конференции — Exploring Ruby through Rust. Ruby написан на C. Многие классы, которые мы знаем и любим, написаны на Ruby, некоторые нет. Изучая, как работает MRI мы можем узнать о Ruby много интересного. В докладе Стив покажет веселый хак: перепишет куски Ruby-интерпретатора на Rust. В процессе много узнаем о внутреннем устройстве Ruby и о том, как начать хакать код на С.  Под катом приводим наши вопросы, ответы Стива в оригинале и нашем вольном переводе: "
grigoryvp;Бинарные модули для Python;https://habr.com/ru/company/oleg-bunin/blog/418449/;"Python — классный. Мы говорим «pip install» и скорее всего нужная библиотека поставится. Но иногда ответ будет: «compilation failed», потому что есть бинарные модули. Они практически у всех современных языков страдают какой-нибудь болью, потому что архитектур много, что-то нужно собирать под конкретную машину, что-то нужно линковать с другими библиотеками. В целом интересный, но малоизученные вопрос: а как же их делать и какие там проблемы? На этот вопрос постарался ответить Дмитрий Жильцов (zaabjuda) на MoscowPython Conf в прошлом году.   Под катом текстовая версия доклада Дмитрия. Ненадолго остановимся на том, когда бинарные модули нужны, а когда от них лучше отказаться. Обсудим правила, которые стоит соблюдать при их написании. Рассмотрим пять возможных вариантов реализации:   Native C/C++ Extension SWIG Cython Ctypes Rust  О спикере: Дмитрий Жильцов занимается разработкой больше 10 лет. Работает в компании ЦИАН системным архитектором, то есть несет ответственность за технические решения и контроль сроков. В своей жизни успел попробовать и ассемблер, Haskell, C, а последние 5 лет активно программирует на Python."
b0r1s;Хорошую вещь ржавчиной не назовут;https://habr.com/ru/post/446414/;"Многие компании ненавидят движение OpenSource особенно утилиты GNU и ядро Linux. Коммерческие компании выкупают OpenSource сервисы и компании. В 2018 году был получен контроль над OpenSource-компаниями GitHub, RedHat.  Однако самый сильный и сокрушительный удар может быть нанесен манипуляцией сознанием конечных разработчиков. "
Source;Пять перспективных языков программирования со светлым будущим (3 года спустя);https://habr.com/ru/post/467207/;" В 2016-м году я опубликовал перевод статьи про 5 перспективных языков программирования, в которой прогнозировался их рост в ближайшие 2-3 года. Зачастую прогнозы так и остаются прогнозами, без последующего анализа. Но я решил, что это непорядок. И посколько 3 года уже пролетели, пора подвести промежуточные итоги и посмотреть, что произошло с этими языками за это время.  Однако, прежде чем мы перейдём к пятёрке наших героев, хочется уделить немного внимания предсказанному в той же статье переходу Swift и Go из второго эшелона в первый.  про эшелоныВ исходной статье языки программирования условно делятся на 3 эшелона по популярности. Первый эшелон включает мейнстрим-языки, такие как Java, JavaScript, Python, Ruby, C# и т.д. Языки второго эшелона пытаются пробиться в мейнстрим, но ещё не добились этого. Они доказали свою состоятельность путем создания сильных сообществ, но они до сих пор не используются большинством консервативных IT-компаний. Большинство языков в первом эшелоне прочно укоренились на своих позициях. Поэтому выпадение языка с лидирующих позиций занимает ощутимое время, а для языка второго эшелона очень трудно пробиться в первый. К третьему эшелону относятся непопулярные языки, а также относительно новые перспективные языки (о которых пойдёт речь), которые только начинают свой путь наверх. Некоторые языки пребывают в третьем эшелоне на протяжении многих лет, не получая популярности, в то время как другие врываются на сцену всего за пару лет."
IvaYan;Архитектура браузерного движка Servo;https://habr.com/ru/post/274815/;"От переводчика. Позвольте представить на суд хабрасообщества перевод части документации о браузерном движке Servo. Этот движок разрабатывается сообществом Mozilla на языке Rust, и является, пожалуй, самым большим активным проектом на этом языке. В этом документе рассказывается об архитектуре движка, как разработчики используют Rust совместно с C++ и с какими трудностями они столкнулись при разработке. Оригинал доступен в wiki проекта на github.  Это очень поверхностный обзор архитектуры Servo. Servo остаётся прототипом, и некоторые части архитектуры ещё не представлены в виде кода. Некоторые важные аспекты системы ещё не были подробно рассмотрены.  Обзор и цели  "
randall;Что читать о перспективных языках программирования;https://habr.com/ru/company/mailru/blog/279193/;"  Начнем с важной информации: совсем не обязательно перспективные языки являются новыми. Им не так много лет, как вашим любимым Python или Ruby, их нет ни в одной топовой десятке популярных рейтингов (GitHut, RedMonk, TIOBE Index), а знание этих языков не дает пока существенной прибавки к зарплате (за исключением, возможно, Swift). Но и назвать их революцией, набирающей обороты в среде избранных, тоже нельзя. Безусловно, у них есть своя ниша, определенная доля рынка (до 2%) и сложившееся комьюнити. Просто в будущем именно они могут посягнуть на лавры топ-5, если не случится событие типа «черный лебедь».  За последние годы в рейтингах популярности языков мало что изменилось — одни опускаются, другие поднимаются, но никто не врывается в топ под лозунгом «лучший из лучших». Процесс захвата новых территорий для языка чаще всего занимает годы, и за это время успевает сформироваться необходимая база развития. Поэтому никаких эксклюзивов и написанных за вчерашний вечер уникальных языков в обзоре не будет — просто потому, что их время еще не настало. Но в ближайшие годы популярность незыблемых столпов, таких как Java (вся), JavaScript или PHP, будет снижаться, а их место постепенно займут «новички». "
DarkEld3r;Утечки не нарушают безопасность памяти;https://habr.com/ru/post/281370/;"Ошибки доступа к памяти и утечки памяти представляют собой две категории ошибок, которые привлекают больше всего внимания, так что на предотвращение или хотя бы уменьшение их количества направлено много усилий. Хотя их название и предполагает схожесть, однако они в некотором роде диаметрально противоположны и решение одной из проблем не избавляет нас от второй. Широкое распространение управляемых языков подтверждает эту идею: они предотвращают некоторые ошибки доступа к памяти, беря на себя работу по освобождению памяти.  Проще говоря: нарушение доступа к памяти — это какие-то действия с некорректными данными, а утечка памяти — это отсутствие определённых действий с корректными данными. В табличной форме:                     Корректные данные     Некорректные данные Используются        OK                    Ошибка доступа к памяти Не используются     Утечка памяти         OK Лучшие программы выполняют только действия из ОК-ячеек: они манипулируют корректными данными и не манипулируют некорректными. Приемлемые программы могут также содержать некоторые корректные, но неиспользуемые данные (утечки памяти), а плохие пытаются использовать некорректные данные.  Когда язык обещает безопасную работу с памятью, как это делает Rust, это не гарантирует невозможность утечек памяти.  "
ozkriff;Неявность;https://habr.com/ru/post/348282/;"Часто, когда я обсуждаю дизайн Rust на RFCs или на internals-форуме с другими пользователями, я замечаю характерные высказывания насчет явности. Обычно что-то в духе: Мне не нравится <дизайн возможности X>, потому что он менее явный. Всякая магия уместна в <другом языке Y>, а Rust — это явный язык, так что следует использовать <дизайн возможности Z>.Подобные комментарии жутко меня раздражают, потому что дают очень мало полезной обратной связи. Они лишь утверждают, что ""явное лучше неявного"" (при этом предполагается, что это бесспорное утверждение), и что какой-то дизайн менее явный, чем альтернатива (хотя часто даже не приводится объяснений, почему именно критикуемый дизайн менее явный), из чего следует, что их подход предпочтительнее. В своей опубликованной ранее в этом году заметке Аарон пытался докопаться до сути вопроса явности, обсуждая размер контекста (reasoning footprint). Он попытался разбить понятия ""явность"" и ""неявность"" на составные части, чтобы подготовить почву для суждения о явности дизайна той или иной возможности. Я же хочу изложить немного другой взгляд на проблему и попытаюсь очертить в общих словах, что мы подразумеваем под словом ""явный"". Английский — довольно нечеткий язык, в котором прилагательные имеют множества контекстно-зависимых значений, например, как используется слово ""нечеткий"" (fuzzy) в предыдущем предложении. Слово ""явный"" тоже многозначно, так что я не могу утверждать наверняка, что кто-то неправильно использует это слово. Однако я предлагаю выражать свои мысли при обсуждении ""явности"" более четко, чтобы все лучше понимали, о чем именно идет речь."
ProductivityInside;Технологии, которые будут популярны в 2020 году;https://habr.com/ru/company/productivity_inside/blog/462163/;"  Хоть это и кажется невероятным, 2020 год уже вот-вот наступит. Эта дату мы до сих пор воспринимали как нечто сошедшее со страниц научно-фантастических романов, и тем не менее, дела обстоят именно так — до 2020 года совсем рукой подать.  Если вам любопытно, каким может оказаться будущее для мира программирования, то вы по адресу. Возможно, я ошибаюсь по каждому пункту — не считайте мои слова непогрешимой истиной — однако ниже я изложу свои соображения о том, что нас ждет. Дара провидения у меня нет, но я могу сделать некоторые предположения на основании доступных данных. "
AlekDikarev;Через всю географию: навигационные и геодезические задачи на разных языках;https://habr.com/ru/post/485776/;"Приветствую вас, глубокоуважаемые! «… истинное место судна хотя и неизвестно, но оно не случайно, оно есть, но неизвестно в какой точке» Алексишин В. Г. и др. Практическое судовождение, 2006. стр. 71 «С двух краев галактики вышли пешеходы...» (С) Сергей Попов (Астрофизик) В свете новых тенденций стиля арт-нуво я хотел написать о решении геодезических задач на плоской земле. Но пока еще заявление о том, что форма земли удобно аппроксимируется эллипсоидом не является ересью и крамолой, предлагаю всем интересующимся приобщиться к более консервативным моделям.   расстояние между двумя географическими точками определение точки по известной, расстоянию до нее и азимутальному углу определение положения точки по измеренным дальностям до известных точек (TOA, TOF) определение положения точки по измеренным временам прихода сигнала (TDOA)  Все это на C#, Rust и Matlab, на сфере и эллипсоидах, с картинками, графиками, исходным кодом — под катом.  А это, релевантная КДПВ:  "
lain8dono;"Операционные системы с нуля; Уровень 1 (младшая половина)";https://habr.com/ru/post/351082/; Эта часть посвящена улучшению навыков работы с Rust и написанию парочки полезных утилиток и библиотек. Напишем драйверы для GPIO, UART и встроенного таймера. Реализуем протокол XMODEM. Используя это всё, напишем простенький шелл и загрузчик. Перед прочтением настоятельно рекомендуется убедиться в прочтении Книги. По крайней мере от начала и до конца. Для ленивых, но чуть более опытных можно рекомендовать это. На русском можно поковырять вот тут. Ну и разумеется обходить стороной нулевой уровень совершенно не стоит. Алсо где-то половина этой части не требует малинки.
steanlab;О простых вещах-сложно. «Cпящая сталь». Чем смазать заржавевшие болты или Не WD-40 единым…;https://habr.com/ru/post/448808/;"Посвящается всем отчаявшимся и потерявшим надежду… открутить заржавевшую гайку!  На улицы наших городов определенно пришла весна. Потеплело и люди с радостью начали отдавать предпочтение своим настоящим железным друзьям, хоть на время забывая про планшеты и смартфоны. Велосипедисты, мотоциклисты и еще множество любителей сезонных средств передвижения достали свое добро и вдруг обнаружили, что что-то заржавело, что-то невозможно открутить и т.д. и т.п. Признаюсь, я один из этих, обнаруживших :) И чтобы не пропал даром труд по борьбе с коррозией, решил накопленный материал оформить в хабра-статью.  Информация точно будет полезна абсолютно всем, кому хотя бы раз приходилось бороться с ржавыми деталями, не только автолюбителям и самодельщикам, но и реставраторам техники, тем кто собирается красить ржавые столбы на даче/страдает от ржавых разводов на раковине и просто желающим докопаться до сути процесса ржавления и найти методы эффективной борьбы с этой напастью. Сегодня говорим о том, как разбудить «заснувшую сталь».  Ну и, традиционно — не забудь закинуть в закладки, %USERNAME%, пригодится! :)  "
iskorotkov;Указатели сложны, или Что хранится в байте?;https://habr.com/ru/post/460953/;"Привет, Хабр! Представляю вашему вниманию перевод статьи ""Pointers Are Complicated, or: What's in a Byte?"" авторства Ralf Jung. Этим летом я снова работаю над Rust фуллтайм, и я снова буду работать (помимо прочих вещей) над ""моделью памяти"" для Rust/MIR. Однако, прежде чем я заговорю о своих идеях, я наконец должен развеять миф, что ""указатели просты: они являются просто числами"". Обе части этого утверждения ошибочны, по крайней мере в языках с небезопасными фичами, таких как Rust или C: указатели нельзя назвать ни простыми, ни (обычными) числами. Я бы также хотел обсудить часть модели памяти, которую необходимо затронуть, прежде чем мы можем говорить о более сложных частях: в какой форме данные хранятся в памяти? Память состоит из байтов, минимальных адресуемых единиц и наименьших элементов, к которым можно получить доступ (по крайней мере на большинстве платформ), но каковы возможные значения байта? Опять же, оказывается, что ""это просто 8-битное число"" не подходит в качестве ответа."
ob1;С лёгким налётом ржавчины или куда делся NULL;https://habr.com/ru/post/552652/;Давно начал следить за языком Rust, кажется, ещё до выхода версии 1.0. За это время язык сильно изменился, оформился и стал совсем взрослым, можно в производство. При этом из коробки программисту предлагается довольно много интересных концепций для разработки надёжного ПО с длительным жизненным циклом. Однако сфера промышленной автоматизации не так динамична (как нам иногда бы хотелось), поэтому пока приходится только присматриваться к Rust. Тем не менее надо знакомиться поближе. Просто так читать книжки или заметки не продуктивно, надо что-то пробовать делать. Например, можно начать с решения задачек на LeetCode (что я и решил попробовать). А при решении таких задачек иногда натыкаешься на что-то такое, с чем и Stack Overflow может не помочь, не только книжки. В результате поисков дополнительной информации наткнулся на серию заметок, которой хотелось бы поделиться с общественностью (да-да, он воровал тексты у богатых и переводил их бедным). Под катом перевод первой маленькой заметки про (отсутствие) NULL в Rust.
owlofmacloud;Оптимизируем производительность: JavaScript (V8) vs AssemblyScript (WebAssembly);https://habr.com/ru/company/macloud/blog/554860/;"  Чтобы повысить производительность web-приложений, используйте WebAssembly в связке с AssemblyScript, чтобы переписать критически важные для производительности компоненты web-приложения, написанные на JavaScript. «И это действительно поможет?», — спросите вы.  К сожалению, на этот вопрос нет чёткого ответа. Всё зависит от того, как вы будете их использовать. Вариантов много: в одних случаях ответ будет отрицательный, в других — положительный. В одной ситуации лучше выбрать JavaScript вместо AssemblyScript, а в другой — наоборот. На это влияет множество различных условий.  В данной статье мы проанализируем эти условия, предложим ряд решений и проверим их на нескольких тестовых примерах кода.  Кто я такой и почему занимаюсь этой темой?  (Данный раздел можете пропустить, это несущественно для понимания дальнейшего материала).  Мне по-настоящему нравится язык AssemblyScript. Я даже в какой-то момент начал помогать разработчикам финансово. У них небольшая команда, в которой каждый серьёзно увлечён этим проектом. AssemblyScript — очень молодой язык, похожий на TypeScript и способный компилироваться в WebAssembly (Wasm). Именно в этом и заключается одно из его преимуществ. Раньше, чтобы использовать Wasm, web-разработчик должен был учить чуждые ему языки типа С, C++, C#, Go или Rust, так как в WebAssembly изначально могли компилироваться именно такие высокоуровневые языки со статической типизацией.   Хотя AssemblyScript (ASC) и похож на TypeScript (TS), он не связан с этим языком и не  компилируется в JS. Схожесть в синтаксисе и семантике нужна, чтобы облегчить процесс «портирования» с TS на ASC. Такое портирование в основном сводится к добавлению аннотаций типов."
namespace;Начинаем любить Go;https://habr.com/ru/post/266851/;"Если что, это вольный перевод статьи из блога Jeremy Mikkola.  Эта статья о том, как некоторое время спустя я распробовал и таки полюбил язык Go (аки golang).  Жалобы Еще год назад у меня было полно жалоб на тот или иной аспект Go. В основном я жаловался на то, что при том, что ты не можешь использовать Go как «настоящий системный язык» (в плане написать-на-нем-операционку), тебе все равно приходится думать о том, о чем обычно приходится думать в системных языках: например, использовать тут указатель или нет. Система типов лежит в непродуктивном ущелье между достаточной строгостью, чтобы стать «автоматичной» (привет адептам Haskell!) и достаточной динамичностью, чтобы не отвлекать (как в Python). Какое-то время я тупил на таких вещах, как проход по юникодовой строке не символами, а байтами, и всякое такое. Я обвинял Go в том, что он так-то не всегда следует своему принципу простоты, так как в нем есть много разных узких штук, вроде make(). И конечно же я жаловался на то, что при работе с Go постоянно приходится повторять блоки if err != nil { return err }.  Поначалу я точно не мог назвать себя фанатом Go.  В техническом плане я согласен с тем, что большинство моих жалоб корректны. Я согласен с тем, что систему типов можно было бы придумать и покруче, а от указателей не помешало бы немного абстрагироваться. Но как только я начинаю понимать, что (не все, но многие) проблемы, на которые я жаловался, на самом деле вроде как даже и не непрягают. В действительности это напоминало нытье на целый лес, из-за пары некрасивых деревьев. В повседневном использовании языка большинство вещей, о которых я так волновался, вообще не давали о себе знать. Я ни разу не встречал баг, так или иначе связанный с проходом по строке. В реальном коде ты почти не кастишь interface{} так часто, как хотелось бы тем ребятам, которые дрочат на системы типов. Ах да, нет беды в том, чтобы вызывать make() в одном месте и new() в другом. Больше всего я ругался на те архитектурные решения языка, которые усложняли создание абстракций. Ты не можешь просто так сделать структуру данных, которая станет альтернативой к встроенным структурам данных (привет кодогенерации!). Без обобщений ты не сможешь строить большие обобщенные абстракции. Скорее всего, это сделано намеренно. "
RustLangRu;Выпуск Rustup 1.20.0: поддержка профилей, улучшения в командах update и doc;https://habr.com/ru/post/471614/;Рабочая группа rustup рада сообщить о выпуске новой версии, 1.20.0. Rustup — рекомендуемая утилита для установки Rust, языка программирования, позволяющего каждому создавать надёжное и эффективное программное обеспечение. Если у вас уже установлен rustup, то для обновления до версии 1.20.0 вам достаточно выполнить следующую команду: rustup self update Также rustup автоматически обновляется после обычного обновления набора инструментов: rustup update Если у вас ещё не установлен rustup, вы можете установить его с соответствующей страницы нашего веб-сайта. Что нового в rustup 1.20.0 Изюминками данного выпуска являются поддержка профилей, возможность получить последний доступный nightly выпуск, имеющий все необходимые вам компоненты, и улучшения в команде rustup doc. Вы также можете посмотреть список изменений, чтобы узнать обо всех изменениях, включённых в этот выпуск.
iskorotkov;Опасности конструкторов;https://habr.com/ru/post/460831/;"Привет, Хабр! Представляю вашему вниманию перевод статьи ""Perils of Constructors"" автора Aleksey Kladov. Один из моих любимых постов из блогов о Rust — Things Rust Shipped Without авторства Graydon Hoare. Для меня отсутствие в языке любой фичи, способной выстрелить в ногу, обычно важнее выразительности. В этом слегка философском эссе я хочу поговорить о моей особенно любимой фиче, отсутствующей в Rust — о конструкторах. Что такое конструктор? Конструкторы обычно используются в ОО языках. Задача конструктора — полностью инициализировать объект, прежде чем остальной мир увидит его. На первый взгляд, это кажется действительно хорошей идеей:  Вы устанавливаете инварианты в конструкторе. Каждый метод заботится о сохранении инвариантов. Вместе эти два свойства значат, что можно думать об объектах как об инвариантах, а не как о конкретных внутренних состояниях.  Конструктор здесь играет роль индукционной базы, будучи единственным способом создать новый объект. К сожалению, в этих рассуждениях есть дыра: сам конструктор наблюдает объект в незаконченном состоянии, что и создает множество проблем."
Grado;Реверс-инжиниринг тетриса на Nintendo для добавления Hard Drop;https://habr.com/ru/company/skillfactory/blog/548952/;Тетрис на Nintendo — одна из моих любимых версий тетриса. Моя единственная жалоба заключается в том, что ему не хватает возможности «Hard Drop» — мгновенного падения текущей фигуры и её фиксации на месте. Давайте её добавимВ этом посте описывается модификация, которую я внёс в тетрис, — нажатие кнопки «вверх» приводит к мгновенному падению текущей фигуры и отображению «призрачной фигуры» — точечный контур текущей фигуры, показывающий, где она приземлится.
alex_zinin;Что под капотом у R-Vision Threat Intelligence Platform?;https://habr.com/ru/company/rvision/blog/559838/;Привет, Хабр! Меня зовут Александр Зинин, я разработчик платформы управления данными киберразведки R-Vision Threat Intelligence Platform (TIP).В проекте TIP мы используем актуальный стек технологий: React для фронта, Node.js и TypeScript для не особо нагруженного бэкенда, Rust для тех мест, где важна предсказуемость и скорость. В части БД у нас достаточно стандартный набор: PostgreSQL, Redis, RocksDB, ClickHouse.В статье я поделюсь нашей внутренней кухней, расскажу, как с архитектурной точки зрения у нас работает логика загрузки и хранения различных сущностей, помогающих расследовать инциденты безопасности.
AnthonyMikh;Как написать FizzBuzz на собеседовании;https://habr.com/ru/post/578198/;Здравствуй, Хабр. Недавно я проходил собеседование в одну солидную айтишную контору. Когда мы разобрались с формальностями, начался технический этап, на котором мне поручили написать fizzbuzz. По не вполне понятным мне причинам обсуждение решения этой задачи растянулось на довольно большой срок, после которого время на интервью уже вышло. Мы расстались на хорошей ноте, и мне пообещали перезвонить. Пока я жду оффер, я решил поделиться своим опытом прохождения интервью с широкой публикой, равно как и своим решением, ибо они показалось мне заслуживающим внимания.
alizar;Mozilla и Samsung создают браузерный движок нового поколения Servo;https://habr.com/ru/post/175353/;"Mozilla и Samsung неожиданно объявили о совместном проекте: разработке веб-движка «нового поколения», оптимизированного под будущие «более быстрые, многоядерные, гетерогенные компьютерные архитектуры». Проект получил название Servo (код на Github).  «Servo — попытка создать веб-браузер заново с нуля на современном оборудовании и переосмыслить старые посылки. Это значит устранить сами причины уязвимостей в системе безопасности и в то же время создать платформу, которая полностью использует производительность массовых параллельных вычислений на оборудовании завтрашнего дня. Поэтому Servo пишется на языке Rust, новом, безопасном языке системного программирования, разработанном в Mozilla совместно с большим сообществом энтузиастов», — сказано в официальном сообщении на сайте Mozilla. "
LukinB;Ваш язык программирования — отстой;https://habr.com/ru/post/315152/;"1 Почему JavaScript отстой • 1.1 Плохая конструкция • 1.2 Система типов • 1.3 Плохие функции • 1.4 Отсутствующие функции • 1.5 DOM 2 Почему Lua отстой 3 Почему PHP отстой • 3.1 Исправлено в поддерживаемых в настоящее время версиях 4 Почему Perl 5 отстой 5 Почему Python отстой • 5.1 Исправлено в Python 3 6 Почему Ruby отстой 7 Почему Flex/ActionScript отстой 8 Почему скриптовые языки отстой 9 Почему C отстой 10 Почему C++ отстой 11 Почему .NET отстой 12 Почему C# отстой 13 Почему VB.NET отстой 15 Почему Objective-C отстой 16 Почему Java отстой • 16.1 Синтаксис • 16.2 Исправлено в Java 7 (2011) • 16.3 Модель • 16.4 Библиотека • 16.5 Обсуждение 17 Почему Backbase отстой 18 Почему XML отстой 19 Почему отстой XSLT/XPath 20 Почему CSS отстой • 20.1 Исправлено в CSS3 21 Почему Scala отстой 22 Почему Haskell отстой 23 Почему Closure отстой 24 Почему Go отстой • 24.1 Базовые средства программирования (базовый язык) • 24.2 Взаимосовместимость • 24.3 Стандартная библиотека • 24.4 Набор инструментальных средств • 24.5 Сообщество 25 Почему Rust отстой • 25.1 Безопасность • 25.2 Синтаксис • 25.3 Конструкция API и система типов • 25.4 Сообщество • 25.5 Набор инструментальных средств  Почему JavaScript отстой Учтите, что некоторые положения относятся не к самому JavaScript, а к программным интерфейсам веб-приложений (https://developer.mozilla.org/en/docs/Web/API).   Плохая конструкция • Каждый скрипт исполняется в едином глобальном пространстве имён, доступ в которое возможен в браузерах с оконным объектом. • Camel-регистр никуда не годится:  XMLHttpRequest HTMLHRElement "
vitvakatu;Передача намерений;https://habr.com/ru/post/326896/;Rust — элегантный язык, который несколько отличается от многих других популярных языков. Например, вместо использования классов и наследования, Rust предлагает собственную систему типов на основе типажей. Однако я считаю, что многим программистам, начинающим свое знакомство с Rust (как и я), неизвестны общепринятые шаблоны проектирования. В этой статье, я хочу обсудить шаблон проектирования новый тип (newtype), а также типажи From и Into, которые помогают в преобразовании типов.
zharko_mi;Merkle Tree: ржавое и быстрое;https://habr.com/ru/post/455260/; Всем привет! Недавно открыл для себя язык Rust. О своих первых впечатлениях поделился в предыдущей статье. Теперь решил копнуть немного глубже, для этого необходимо что-то посерьёзнее списка. Выбор мой пал на дерево Меркла. В этой статье я хочу:  рассказать про эту структуру данных посмотреть на то, что уже есть в Rust предложить свою реализацию сравнить производительность 
gerasimovich;«Хитрый питон» Михаил Корнеев, Григорий Петров, Илья Беда и другие классные спикеры-тезисы выступлений на PyCon Weekend;https://habr.com/ru/company/it_people/blog/545554/;"Конференции PyCon – это способ присоединиться к дружной компании единомышленников. Общение с интересными и умными людьми, обмен опытом и возможность расширить круг профессиональных знакомств.   Участники пайкона не просто слушают доклады и «мотают на ус» лайфхаки и инсайты. Главное, для чего нужны офф-лайн конференции – это живое общение. А где еще можно сначала подискутировать со спикерами во время официальной части мероприятия, а потом обсуждать код за распитием кружки глинтвейна?   PyCon Weekend состоится уже через 2 недели (19-20 марта 2021). А пока мы попросили спикеров рассказать вам о своих докладах.      Михаил Корнеев BestDoctor, создатель и автор канала «Хитрый питон» на You Tube Тема доклада: как автоматические проверки помогают нам делать код лучше «Как и любой растущий проект, мы столкнулись с несколькими проблемами:  — кода становится больше, он становится сложнее  — команда растет, приходят люди с разным опытом и привычками  — многие проблемы регулярно всплывают на код-ревью Эти проблемы нельзя решить мгновенно и решить полностью, но за несколько лет в команде выработался хороший подход — если мы регулярно сталкиваемся с проблемой и ее проверку можно автоматизировать — нужно это сделать. Подход не новый и кажущийся очевидным, но у многих команд просто не хватает времени, чтобы начать его внедрять. Я расскажу о том, как проверки устроены у нас, как начать внедрять с минимумом затрат и как сделать это частью процесса разработки» "
rwscar;Кроссплатформенная растеризация SVG — сравниваем библиотеки и экспериментируем;https://habr.com/ru/company/2gis/blog/572152/;На карте 2ГИС очень много картинок — те же знаки дорожного движения и логотипы компаний. Графические API, которые в наши карты предоставляют Android и iOS, обычно не могут рисовать векторную графику напрямую, поэтому нам приходится её растеризовать. А так как мы заранее не знаем нужный размер картинки и не можем её растеризовать до сборки ресурсов, используем растеризаторы.И если для 2ГИС на Android и iOS мы можем использовать платформенные решения, то затаскивать их в Mobile SDK было бы, мягко говоря, не очень правильно.Под катом — небольшая история, как работает растеризация в мобильных 2ГИС и какое решение мы выбрали для Mobile SDK 
gshep;Слегка ржавое EFI-приложение;https://habr.com/ru/company/ruvds/blog/575630/;"После двух твитов, оставленных на прошлой неделе, про мои игры с UEFI и Rust, несколько человек попросили опубликовать заметку, объясняющую как создать UEFI-приложение, полностью написанное на Расте и продемонстрировать тестовое окружение.  Так что сегодняшняя цель — это создание UEFI-приложения на Расте, которое распечатывает карту памяти, отфильтрованную по доступности для использования (такая память называется традиционной памятью в описании UEFI-спецификаций):   "
deviator;Сравнение производительности языков на примере простейшего классификатора;https://habr.com/ru/post/261201/;"Доброго времени суток, хабр!   Моим основным ЯП является D. Всегда понимал, что он будет проигрывать C++ из-за сборщика, каких-то высокоуровневых плюшек и т.д. Но никогда не доходили руки проверить насколько. Решил написать простенький классификатор (даже не помню метод как называется) и проверить. Результат меня приятно удивил: версия C++ отработала за 5.47 сек, версия D — за 5.55 сек. «0.08 сек при обработке файла в 74Мб это не так уж и много» — подумал я. Но, на всякий случай, решил попробовать собрать код на D с помощью gdc (dmd как frontend, gnu backend) и тут уже в душу закрались сомнения, что я всё сделал правильно: код отработал за 4.01 сек, что более чем на 20% быстрее версии на С++. Решил собрать с помощью ldc2 (dmd frontend, llvm backend): 2.92(!!) сек. Тут я решил разобраться. "
mkpankov;Почему мы занимаемся переводом книги с английского на площадке GitHub;https://habr.com/ru/post/266813/;"Всем привет!  Недавно команда rust_book_ru закончила перевод книги «The Rust Programming Language» на русский язык.    Когда я только присоединился к проекту перевода, начатого kgv, нам несколько раз говорили: «Вы делаете перевод на GitHub? Странные вы, для краудсорсинг-перевода есть другой сервис — вот ссылка». Мы не стали переходить на другие сервисы и в итоге это решение полностью оправдалось.  Я хочу рассказать о том, почему мы всё же разместили книгу на GitHub и почему даже переводчику полезно быть немного программистом. "
Virtuos86;Фокусируясь на владении;https://habr.com/ru/post/418735/;Прим. переводчика: запись датирована 13 мая 2014 года, поэтому некоторые детали, в том числе и исходный код, могут не соответствовать текущему положению вещей. Ответом на вопрос, зачем нужен перевод столь давнего поста, будет ценность его содержания для формирования понимания такой одной из основополагающих концепций языка Rust, как владение. Со временем я убедился, что было бы лучше отказаться от различия между изменяемыми и неизменяемыми локальными переменными в Rust. По крайней мере, многие люди скептически относятся к этому вопросу. Я хотел изложить свою позицию публично. Я приведу различные мотивы: философский, технический и практический, а также обращусь к главной защите нынешней системы. (Примечание: я рассматривал это как Rust RFC, но решил, что тон лучше подходит для сообщения в блоге, и у меня нет времени переписывать его сейчас.)
SergeyMaslov;Коллектор логов на старом железе или встречайте Vector 32bit;https://habr.com/ru/company/X5Group/blog/532400/;В любой большой компании, и X5 не исключение, имеется «старое железо» которое успешно работает и работает хорошо, но приходит время и с него тоже необходимо начать забирать логи и метрики. В нашем случае это машины c x86_32 Debian 9.5 и 512Мб оперативной памяти. 
ob1;С лёгким налётом ржавчины или немного о владении;https://habr.com/ru/post/553088/;Предыдущая заметка получилась не такая, как я задумывал. Но вызвала небольшую дискуссию. Может быть и в этот раз получится подискутировать. Или получится не так. В любом  случае хотелось бы продолжить воровать тексты у богатых и переводить их бедным, т.е. делиться с общественностью пусть даже иногда для кого-то очевидными вещами. «Поговорим за» динамическую память?
varanio;Опрос разработчиков от StackOverflow (2017);https://habr.com/ru/post/325636/;" В конце марта вышел очередной мега-опрос разработчиков от StackOverflow, в котором приняли участие десятки тысяч человек. Ссылка на результаты опроса здесь. Отчет получился внушительным по размеру, поэтому давайте просто рассмотрим некоторые интересные моменты из него.  Кстати, на КДПВ — список ""Most Loved"" языков, это языки, на которых опрашиваемые пробовали писать, и им понравилось. "
alinatestova;Взгляд на Tokio: как устроен этот асинхронный обработчик событий;https://habr.com/ru/company/bitfury/blog/351824/;"И для чего он используется в фреймворке для приватных блокчейнов Exonum Tokio — это фреймворк для разработки сетевых масштабируемых приложений на Rust, использующий компоненты для работы с асинхронным вводом/выводом. Tokio часто служит основой для других библиотек и реализаций высокопроизводительных протоколов. Несмотря на то что он является довольно молодым фреймворком, ему уже удалось стать частью экосистемы межплатформенного программного обеспечения.  И хотя Tokio критикуют за излишнюю сложность в освоении, он уже используется в продакшн-средах, поскольку код, написанный на Tokio, легче поддерживать. Например, его уже интегрировали в hyper, tower-grpc и сonduit. Мы тоже обратились к этому решению при разработке нашей платформы Exonum.  Работа над Exonum началась в 2016 году, когда Tokio еще не существовал, поэтому сперва нами использовалась библиотека Mio v0.5. С появлением Tokio стало ясно, что используемая библиотека Mio устарела, более того, с её помощью было сложно организовывать событийную модель Exonum. Модель включала несколько типов событий (сетевые сообщения, таймауты, сообщения из REST API и др.), а также их сортировки по степени приоритетности.  Каждое событие влечет за собой изменение состояния узла, а значит их необходимо обрабатывать в одном потоке, в определенном порядке и по одному принципу. На Mio схему обработки каждого события приходилось описывать вручную, что при поддержании кода (добавлении/изменении параметров) могло оборачиваться большим количеством ошибок. Tokio позволил упростить этот процесс за счет встроенных функций.  Ниже мы расскажем о компонентах стека Tokio, которые позволяют эффективно организовывать обработку асинхронных задач.  "
Albibek;Bioyino — распределённый, масштабируемый агрегатор метрик;https://habr.com/ru/company/avito/blog/354714/;Итак, вы собираете метрики. Как и мы. Мы тоже собираем метрики. Конечно же, нужные для бизнеса. Сегодня мы расскажем о самом первом звене системы нашего мониторинга — statsd-совместимом сервере агрегации bioyino, зачем мы его написали и почему отказались от brubeck.  
lain8dono;"Операционные системы с нуля; уровень 3 (старшая половина)";https://habr.com/ru/post/354784/;"В этой части мы допишем обработку прерываний и возьмёмся за планировщик. Наконец-то у нас появятся элементы многозадачной операционной системы! Разумеется это только начало темы. Одно прерывание таймера, один системный вызов, базовая часть простого планировщика потоков. Ничего сложного. Однако этим мы подготовим плацдарм для создания полноценной системы, которая будет заниматься самыми настоящими процессами безо всяких ""но"". Прямо как в этих ваших линупсах и прочих. До конца этого курса осталось уже чуть менее половины. Нулевая лаба Первая лаба: младшая половина и старшая половина Вторая лаба: младшая половина и старшая половина Третья лаба: младшая половина"
mr_elzor;Rocker — rocksdb драйвер для Erlang;https://habr.com/ru/post/413353/;Введение В интернетах довольно много информации и споров по поводу выбора sql/nosql подхода, а также плюсах и минусах того или иного KV-хранилища. То, что вы сейчас читаете, не является пособием по rocksdb или агитацией за использование именного этого хранилища и моего драйвера к нему. Я хотел бы поделиться промежуточным результатом работы по оптимизации процесса разработки NIF для Erlang. В данной статье представлен работоспособный драйвер для rocksdb, разработанный за пару вечеров.
sobolevn;9 лучших опенсорс находок за сентябрь 2019;https://habr.com/ru/post/469753/;"Доброго Хактоберфеста, дамы и господа. Подготовил для вас подборку самых интересных находок из опенсорса за сентябрь 2019.  За полным списком новых полезных инструментов, статей и докладов можно обратиться в мой телеграм канал @OpensourceFindings (по ссылке зеркало, если не открывается оригинал). В сегодняшнем выпуске. Технологии внутри: Python, C, Rust, Ruby, JavaScript, Go. Тематика: веб разработка, администрирование, инструменты разработчика. Прошлый выпуск."
Salat13;А вы умеете готовить nested_flatbuffers?;https://habr.com/ru/post/529846/;"У протокола FlatBuffers имеется интересная возможность — использовать вложенную структуру внутри другой структуры, но хранить ее, как массив сырых данных. Такая оптимизация позволяет уменьшить затраты на память и производительность при чтении/записи данных. Для этого необходимо использовать специальный атрибут — nested_flatbuffers.   Правда, как это часто водится за разработчиками протоколов, на нормальные примеры сил им уже не хватает. И даже на тематических форумах типа stackoverflow, groups.google и т.п. сложно найти полную информацию — приходится буквально по крупицам собирать все части паззла, чтобы в конце концов понять, как именно написать рабочий код.  В статье я раскрою проблему подробнее и приведу примеры на C, C++ и Rust.  In concept this is very simple: a nested buffer is just a chunk of binary data stored in a ubyte vector, typically with some convenience methods generated to access a stored buffer. In praxis it adds a lot of complexity.  "
VASExperts;Linux kernel 5.14 — что изменится в новом ядре;https://habr.com/ru/company/vasexperts/blog/570940/;Линус Торвальдс представит его в конце августа. Поговорим об изменениях — инженеры удалили устаревший IDE-драйвер, сделали шаги для принятия Rust в качестве официального инструмента разработки и обновили сетевые компоненты.
ph_piter;Parallelism vs Concurrency: правильно подбираем инструменты;https://habr.com/ru/company/piter/blog/274569/;Здравствуйте, уважаемые хабровчане! Мы решили возобновить публикации еще до окончания больших праздников, но в сегодняшней статье все-таки раскрыта тема справедливой раздачи подарков. Сама же статья, как понятно из названия, посвящена сравнительному анализу параллелизма и конкурентности.   
Virviil;Traits из коробки;https://habr.com/ru/post/277461/;"В стандартной библиотеке языка Rust есть несколько трейтов, которые можно объявить ""на халяву"" с помощью derive. Эти трейты обязательно пригодятся при объявлении собственных структур, они очень часто встречаются в различных open-source библиотеках, но их реализация генерируется компилятором и может вызывать вопросы. Часто видите:   #[derive(RustcEncodable, RustcDecodable, Clone, Eq, Default)] struct Foo { } и не понимаете, что это и где?  "
freetonik;Статическая и динамическая типизация;https://habr.com/ru/post/308484/;"Эта статья рассказывает о разнице между статически типизированными и динамически типизированными языками, рассматривает понятия ""сильной"" и ""слабой"" типизации, и сравнивает мощность систем типизации в разных языках. В последнее время наблюдается четкое движение в сторону более строгих и мощных систем типизации в программировании, поэтому важно понимать о чем идет речь когда говорят о типах и типизации.  Тип — это коллекция возможных значений. Целое число может обладать значениями 0, 1, 2, 3 и так далее. Булево может быть истиной или ложью. Можно придумать свой тип, например, тип ""ДайПять"", в котором возможны значения ""дай"" и ""5"", и больше ничего. Это не строка и не число, это новый, отдельный тип. Статически типизированные языки ограничивают типы переменных: язык программирования может знать, например, что x — это Integer. В этом случае программисту запрещается делать x = true, это будет некорректный код. Компилятор откажется компилировать его, так что мы не сможем даже запустить такой код. Другой статически типизированный язык может обладать другими выразительными возможностями, и никакая из популярных систем типов не способна выразить наш тип ДайПять (но многие могут выразить другие, более изощренные идеи). Динамически типизированные языки помечают значения типами: язык знает, что 1 это integer, 2 это integer, но он не может знать, что переменная x всегда содержит integer. Среда выполнения языка проверяет эти метки в разные моменты времени. Если мы попробуем сложить два значения, то она может проверить, являются ли они числами, строками или массивами. Потом она сложит эти значения, склеит их или выдаст ошибку, в зависимости от типа."
TheRussianFella;GoToChain: как школьники блокчейн в деревне писали;https://habr.com/ru/company/goto/blog/339796/;Был жаркий август. Шла очередная летняя школа. На направлении функционального программирования все было неспокойно: вместо пота с нас капали монады, и в небе пролетала хмурая тень Coq-а. Школа проходила вполне обычно, как и все детские лагеря. После накоживания чисел Пеано на Хаскелле мы пилили компиляторы и интерпретаторы разных сортов и размеров (от самопального до LLVM), писали своё ядро на Rust и обсуждали теорию групп, проводя аналогии с лёгкими французскими романами в общем, было задорно. А ещё у нас был хакатон. Одна из команд, вдохновившись Zeitgeist и партнёрскими спиннерами, взялась за разработку системы проведения конкурсов и обработки решений с помощью смарт-контрактов, запланировав несколько идей применения блокчейна для сообщества вокруг школы. Какие инновации из этого вышли — под катом. 
m1rko;Небольшая история о команде `yes` в Unix;https://habr.com/ru/post/342002/;"Какую вы знаете самую простую команду Unix? Есть echo, которая печатает строку в stdout, и есть true, которая ничего не делает, а только завершается с нулевым кодом.  Среди множества простых Unix-команд спряталась команда yes. Если запустить её без аргументов, то вы получите бесконечный поток символов ""y"", каждый с новой строки:  y y y y (...ну вы поняли мысль) Хотя на первый взгляд команда кажется бессмысленной, но иногда она бывает полезной:  yes | sh boring_installation.sh Когда-нибудь устанавливали программу, которая требует ввести ""y"" и нажать Enter для установки? Команда yes приходит на помощь! Она аккуратно выполнит эту задачу, так что можете не отвлекаться от просмотра Pootie Tang."
F0iL;WebAssembly и манипуляции DOM;https://habr.com/ru/post/347804/;"Про WebAssembly в наше время слышали, я думаю, практически все. Если Вы не слышали, то на Хабре есть замечательный вводный материал об этой технологии.   Другое дело, что очень часто можно встретить комментарии вида “Ура, теперь будем писать фронтенд на C++!”, “Давайте перепишем React на Rust” и прочее, прочее, прочее…"
vorona_karabuta;Чарльз Наттер. Как перенести древний монолитный проект на JRuby и стоит ли это делать?;https://habr.com/ru/company/railsclub/blog/425379/;"Через пару дней в Москве пройдет конференция RubyRussia. Наш гость Чарльз Наттер (работает над JRuby и JVM поддержкой в Red Hat) ответил на пару вопросов.  Как вы попали в мир программирования и Ruby?  В 2004 году я работал по контракту в правительственной фирме в качестве Java Enterprise архитектора. Я работал над проектом для Министерства сельского хозяйства США, и проводил пару недель в месяц в Вашингтоне. Одна из таких поездок совпала с RubyConf 2004, и поскольку один из моих друзей давно рекомендовал мне обратить внимание на Ruby, я решил сходить на конференцию. Так я оказался на мероприятии, посвященном Ruby, не имея никакого представления об этом языке… но я понял каждый кусочек кода, каждый приведенный пример. Я был поражен и пообещал себе найти способ принести Ruby в мой Java-мир.  Над какими проектами вы работаете сейчас?"
sobolevn;9 лучших опенсорс находок за август 2019;https://habr.com/ru/post/465855/;"Доброй осени, дамы и господа. Подготовил для вас подборку самых интересных находок из опенсорса за август 2019.  За полным списком новых полезных инструментов, статей и докладов можно обратиться в мой телеграм канал @OpensourceFindings (по ссылке зеркало, если не открывается оригинал). В сегодняшнем выпуске. Технологии внутри: Python, Rust, JavaScript, Go. Тематика: веб разработка, администрирование, инструменты разработчика."
PsyHaSTe;Неблагодарный opensource: разработчик самого быстрого веб сервера удалил его репозиторий;https://habr.com/ru/post/484436/;" Краткая суть ситуации: наш соотечественник fafhrd91 на протяжении 3 лет практически самостоятельно (см. кдпв) писал actix-web — один из популярнейших крейтов в инфраструктуре раста, лидер в большинстве различных бенчмарков, и за это время подвергался как минимум трём волнам гонений за ""неправильное использование раста"". После последнего раза автор психанул, и перенес репозиторий к себе в аккаунт с пометкой ""Планирую скрыть репозиторий"". Конечно, куча людей сразу наделало зеркал и бекапов, но на мой взгляд это не сильно исправляет ситуацию. На месте репозитория автор оставил единственный postmortem, который я ниже и цитирую целиком: "
ThomasAlva;Почему будущее не за Python;https://habr.com/ru/company/edison/blog/495610/;"Хотя, безусловно, этот язык программирования будет востребован ещё много лет.    Сообществу программистов понадобились десятилетия, чтобы по достоинству оценить Python. С начала 2010-х годов он переживает бум — и в итоге превосходит C++, C#, Java и JavaScript по популярности.  Но до каких пор эта тенденция будет сохраняться? Когда Python в конечном итоге будет заменён другими языками и почему это неизбежно произойдёт?"
greedykid;В поиске вопросов, или как создать новый отладчик;https://habr.com/ru/post/514332/;"Мы уделяем много внимания инструментам разработки: участвуем в горячих спорах о редакторах (Vim или Emacs?), долго настраиваем IDE под свой вкус, и тщательно выбираем языки программирования и библиотеки, которые с каждым днем становятся все лучше и удобнее. Однако, здесь можно выделить одну категорию, которая по какой-то причине остается незаслуженно забытой: отладчики не сильно изменились за последний десяток лет, хотя по-прежнему являются одним из базовых инструментов для отлова ошибок и навигации в коде.  Изображение: Timothy Dykes @timothycdykes, unsplash.com Гораздо чаще мы предпочитаем быстро добавить пару printов вместо того, чтобы поставить в нужном месте точку останова и пройтись к ней отладчиком — и вопрос ""почему?"" не перестает меня занимать — ведь логи и printы дают ограниченную информацию и не позволяют интерактивно взаимодействовать с запущенным процессом (а отладчики могут работать даже и с ""умершими"" процессами!). Одной из главных причин я вижу как раз отсутствие значительного прогресса в разработке отладчиков."
Siemargl;Независимый HttpBench для D, или врут ли тесты TechEmpower?;https://habr.com/ru/post/523434/;Простой фреймворк для тестирования HTTP-серверов, вдохновленный Simple Web Benchmark (Прим.пер.Там есть график для многих других языков), но сфокусированный на dlang фреймворках и библиотеках. Он измеряет достижимый RPS (запросы в секунду) в сценарии простого текстового ответа (plaintext). Тесты были собраны или изменены из различных мест (в том числе TechEmpower). Он использует докер-контейнер для построения и размещения сервисов и может работать локально или использовать нагрузочный тестер с удаленного хоста. В качестве генератора нагрузки используется по умолчанию wrk и запрашивает статистику у коллектора, но hey тоже поддерживается (просто используйте ключ --tool). Тесты можно запускать и без докера, достаточно лишь установить компиляторы для протестированных языков и генератор загрузки wrk/hey (но протестировано только на linux).
ITSumma;Языки любимые и языки страшные. Зелёные пастбища и коричневые поля;https://habr.com/ru/company/itsumma/blog/556288/;"  Результаты опроса Stack Overflow являются отличным источником информации о том, что происходит в мире разработки. Я просматривал результаты 2020 года в поисках некоторых идей, какие языки добавить в нашу документацию по контейнерным сборкам, и заметил кое-что интересное о типах языков. Мне кажется, это не часто встречается в различных дискуссиях о предпочтениях разработчиков.  В опросах есть категории «Самые страшные языки программирования» (The Most Dreaded Programming Languages) и «Самые любимые языки». Оба рейтинга составлены на основе одного вопроса:  На каких языках вы провели обширную работу по разработке за последний год, и на каких хотите работать в следующем году? (Если вы работаете с определённым языком и намерены продолжать это делать, пожалуйста, установите оба флажка)."
NeoCode;Кортежи в языках программирования. Часть 1;https://habr.com/ru/post/276871/;"Сейчас во многих языках программирования существует такая конструкция, как кортежи (tuples). Где-то кортежи в той или иной мере встроены в язык, иногда — опять же в той или иной мере — реализуются средствами библиотек. C++, C#, D, Python, Ruby, Go, Rust, Swift (а также Erlang, F#, Groovy, Haskell, Lisp, OCaml и многие другие)… Что же такое кортеж? В Википедии дается достаточно точное определение: кортеж — упорядоченный набор фиксированной длины. Определение хоть и точное, но для нас пока бесполезное, и вот почему: задумывается ли большинство программистов, зачем понадобилась эта сущность? В программировании существует множество структур данных, как фиксированной, так и переменной длины; они позволяют хранить различные значения — как однитипные, так и разных типов. Всевозможные массивы, ассоциативные массивы, списки, структуры… зачем еще и кортежи? А в языках со слабой типизацией — и тем более, разница между кортежами и списками/векторами совсем размытая… ну нельзя добавлять в кортеж элементы, ну и что с того? Это может ввести в некоторое заблуждение. Поэтому стоит копнуть глубже и разобраться, зачем же на самом деле нужны кортежи, чем они отличаются от других языковых конструкций, и как сформировать идеальный синтаксис и семантику кортежей в идеальном (или близком к идеальному) языке программирования.  В первой части мы рассмотрим кортежи и кортежеподобные конструкции в распространенных и не очень языках программирования. Во второй части я попытаюсь обобщить и расширить и предложить наиболее универсальный синтаксис и семантику кортежей. "
elena_voronina;RailsClub 2016: 22 октября в Москве выступит создатель Ruby Yukihiro Matsumoto и не только он;https://habr.com/ru/company/railsclub/blog/307416/;"Привет Хабр! Осталось три месяца до главного Ruby-события года в России. Конференция RailsClub 2016 пройдет в этом году 22 октября в Москве, в Конгресс-центре Технополис. Отличный список спикеров, самые горячие темы, один день, два потока, 500 участников. Начинаем раскрывать детали!    Для нас конференция в этом году особенно важна. В первую очередь потому, что после долгих лет уговоров к нам таки приедет выступать сам создатель Ruby Юкихиро Мацумото! Мы очень долго готовились к этому событию, записали с помощью всего сообщества ролик-приглашение для Мацумото-сан. Если еще не видели, то смотрите:    Все получилось! "
alizar;Альфа-версия браузера на движке Mozilla Servo выйдет в июне;https://habr.com/ru/post/391701/;"Экспериментальный движок Mozilla Servo близок к выпуску альфа-версии. На днях разработчики сообщили, что планируют первый релиз Servo+Browser.html на июнь 2016 года.  Servo – движок, написанный с нуля на языке программирования Rust. Он отличается лучшей безопасностью, модульностью, а также исключительно высокой производительностью за счёт алгоритма параллельной компоновки страниц и новых парсеров CSS3 и HTML5 на Rust. Два важных компонента используют существующие модули на C++ от Mozilla: это движок SpiderMonkey для обработки JavaScript и библиотека 2D-графики Azure для OpenGL и Direct3D. "
eup;Utreexo: сжимаем множество UTXO Bitcoin;https://habr.com/ru/post/456424/; Привет, Хабр! В сети Bitcoin все узлы в ходе консенсуса соглашаются над множеством UTXO: сколько монет доступно для траты, кому именно и при каких условиях. Множество UTXO — это минимально необходимый для узла-валидатора набор данных, без которого узел не сможет удостовериться в валидности приходящих транзакций и блоков, их содержащих. В связи с этим предпринимаются попытки всячески уменьшить хранимое представление этого множества, сжать его без потери гарантий безопасности. Чем меньше объем хранимых данных, тем ниже требования к дисковому пространству узла-валидатора, что делает запуск узла-валидатора дешёвым, позволяет наращивать сеть и увеличивать тем самым устойчивость сети. В этой заметке мы запилим Rust-прототип недавнего предложения от соавтора Lightning Network Paper, Thaddeus Dryja — Utreexo: a dynamic hash-based accumulator optimized for the Bitcoin UTXO set, позволяющего уменьшить требования к дисковому пространству для узлов-валидаторов.
PsyHaSTe;Монады как паттерн переиспользования кода;https://habr.com/ru/post/490112/;" В предыдущей статье мы обсуждали, почему функциональное программирование это совсем не то, что распиарено, и что оно совершенно не противоречит ООП, так, что даже сам ""Дядя Боб"" пишет про хороший ФП дизайн порождающий хороший ООП дизайн программы (и наоборот). Сейчас же я хочу рассказать, что такое монады на самом деле, чем они полезны для обычного практикующего разработчика, и приведу примеры, почему недостаточная поддержка их в распространенных языках приводит к копипасте и ненадежным решениям. Но ведь в интернете буквально сотни статей про ФП и монады, зачем писать еще одну? Дело в том, что все их (по крайней мере те что я читал) можно поделить условно на две категории: с одной стороны это статьи где вам объяснят что монада это моноид в категории эндофункторов, и что если монада T над неким топосом имеет правый сопряжённый, то категория T-алгебр над этой монадой — топос. На другой стороне располагаются статьи, где вам рассказывают, что монады — это коробки, в которых живут собачки, кошечки, и вот они из одних коробок перепрыгивают в другие, размножаются, исчезают… В итоге за горой аналогий понять что-то содержательное решительно невозможно.  Получается, что первые обычно полезны тем, кто и так знает обсуждаемую тему, а вторые даже не знаю на кого рассчитаны: сколько я их не прочитал, ничего полезного понять из них мне не удалось. Я же хотел бы занять промежуточную позицию, и рассказать про монады без заумных терминов, но и без котиков, используя понятные ООП разработчикам термины: интерфейсы, паттерны, копипаста, инкапсуляция сложности, бойлерплейт, и так далее. В процессе работы над статьёй ни один термин теории категории использован не был."
PsyHaSTe;Парсите, а не валидируйте;https://habr.com/ru/post/498042/;"Еще в декабре мне попалась одна совершенно замечательная статья на английском, посвящённая использованию системы типов языка для более широкого класса задач, для повышения надежности приложений и простоты рефакторинга. К сожалению, в тот момент я был слишком занят написанием статей по ФП, которые крайне важно было написать, пока свежи воспоминания. Но теперь, когда с этой задачей я справился, наконец дошли руки перевести эту замечательную заметку. Оригинальный язык примеров — Хаскель, но я решил переписать их на раст, для более широкого охвата аудитории. Однако язык тут совершенно неважен, советы этой статьи я применяю в ежедневной разработке на вполне себе ""приземлённых"" C# и TypeScript, так что если вы просто стараетесь писать надёжный и поддерживаемый код, то, вне зависимости от языка, статья вам будет в тему. Благодарю за вычитку и помощь в переводе Hirrolot, funkill и andreevlex  "
l4l;Мьютекс в мире асинхронного кода;https://habr.com/ru/post/505080/;" Фото: James P. Blair/National Geographic Creative Вы когда-нибудь сталкивались со следующей проблемой в rust, когда использовали std::sync::Mutex в асинхронном коде?  7  |     tokio::spawn(/* some future here */);     |     ^^^^^^^^^^^^ future returned by `fut` is not `Send`     | 127 |         T: Future + Send + 'static,     |                     ---- required by this bound in `tokio::task::spawn::spawn`     |"
ragequit;Вышел минималистичный Linux-дистрибутив Bottlerocket для запуска контейнеров. Самое главное о нём;https://habr.com/ru/company/vdsina/blog/518290/;"  Компания Amazon объявила о финальном релизе Bottlerocket — специализированного дистрибутива для запуска контейнеров и эффективного управления ими.  Bottlerocket (кстати, так называют мелкие самодельные ракеты на дымном порохе) — не первая ОС для контейнеров, но вполне вероятно, что она получит широкое распространение благодаря дефолтной интеграции с сервисами AWS. Хотя система ориентирована на облако Amazon, открытый исходный код позволяет собрать её где угодно: локально на сервере, на Raspberry Pi, в любом конкурирующем облаке и даже в среде без контейнеров.  Это вполне достойная замена дистрибутиву CoreOS, который похоронила Red Hat."
lelyakuznetsova;Герб Саттер о будущем С++, работе в комитете, фонде C++ Foundation и синтаксическом сахаре;https://habr.com/ru/company/jugru/blog/524600/;Герба Саттера (Herb Sutter) знает любой программист, пишущий на C++. Он автор книг, председатель комитета по стандартизации C++, а также архитектор языка программирования в Microsoft.  На C++ Russia 2020 Moscow Герб ответил на вопросы сообщества, заданные Анастасией Казаковой из JetBrains и Сергеем Федоровым из Яндекс.Лавки и поделился своими мыслями о С++20, стандартной библиотеке, концептах, синтаксическом сахаре и не только.  Мы перевели это интервью и теперь хотим поделиться с вами. Если хочется послушать интервью на английском — под катом есть также видеозапись.
m1rko;Как пересчитать электронную таблицу;https://habr.com/ru/post/537722/;"Предположим, я заказываю буррито для двоих друзей и хочу рассчитать общую стоимость заказа:    Поток данных в этой таблице немного сложно проследить, поэтому вот эквивалентная диаграмма, которая представляет таблицу в виде графа:    Округляем стоимость буррито El Farolito super vegi до 8 долларов, поэтому при доставке стоимостью 2 доллара общая сумма составит 20 долларов."
eup;Фитнес-трекер для скейта;https://habr.com/ru/post/540226/;Привет, Хабр!Как в одной из прошлых статей, я изложу свой путь в разработке небольшого устройства со специфичной задачей. Надеюсь на то, что кому-то эта статья послужит источником интересной и полезной информации или вдохновит сдуть пыль с одного из своих проектов.Компоненты, схема, плата, производство в Китае и результаты, обо всём этом –– под катом.
denisredozubov;Как мы выбираем языки программирования в Typeable;https://habr.com/ru/company/typeable/blog/554516/;" Неоднократно меня спрашивали, почему я предпочитаю использовать такие языки программирования как Haskell и Rust, т.к. они не являются самыми широко используемыми и популярными инструментами. Этот пост написан с целью демистифицировать то, что происходит у меня в голове, когда я думаю о выборе технологии."
wladwm;BGPexplorer – машина времени для IP/MPLS сетей;https://habr.com/ru/post/562218/;"Современные сети, основанные на маршрутизации IP-пакетов, а точнее сервисы, которые они предоставляют, по факту управляются протоколом BGP. Этот протокол был спроектирован в конце 80-хх на трех салфетках. Да, с тех пор в этот протокол добавили массу возможностей, в том числе обмен маршрутной информацией VPN, правилами фильтрации трафика и всяким прочим полезным, но основа там осталась все той же, описанной на трех салфетках. И в этом есть свой плюс, потому что этот протокол в своей сути очень прост.Но я хотел поговорить не о его простоте, а о ""махании кулаками после драки"", с которой частенько приходится сталкивать любой службе эксплуатации сети. Поступает жалоба на то что вот недавно что-то не работало. Или же что что-то сломалось и не очень ячно как же оно работало раньше. А узнать историю без дополнительного инструментария (или машины времени) нет возможности. Предлагаю рассмотреть такой инструмент."
Gexon;Изменение размера изображения с учётом содержимого;https://habr.com/ru/post/324284/;"Изменение размера изображения с учётом содержимого (Content Aware Image Resize), жидкое растяжение (liquid resizing), ретаргетинг (retargeting) или вырезание шва (seam carving) относятся к методу изменения размера изображения, где можно вставлять или удалять швы, или наименее важные пути, для уменьшения или наращивания изображения. Об этой идее я узнал из ролика на YouTube, от Shai Avidan и Ariel Shamir. В этой статье будет рассмотрена простая пробная реализация идеи изменения размера изображения с учётом содержимого, естественно на языке Rust. Для подопытной картинки, я поискал по запросу1 ""sample image"", и нашел её2: "
maxpy;Pygest #18. Релизы, статьи, интересные проекты, пакеты и библиотеки из мира Python [5 ноября 2017 — 15 ноября 2017];https://habr.com/ru/post/342604/;" Всем привет! Это уже восемнадцатый выпуск дайджеста на Хабрахабр о новостях из мира Python.   В связи с загруженностью andrewnester, автора предыдущих digests, и с его разрешения, честь опубликовать данный выпуск выпала мне.   Итак, поехали! "
VanquisherWinbringer;Как я свою онлайн игру создавал. Часть 1: Работа с сетью;https://habr.com/ru/post/435384/;"  Привет всем! У меня недавно был отпуск, и появилось время спокойно попрограммировать свои домашние проекты. Захотел я, значит, свою простенькую онлайн игру сделать на Rust. Точнее, простенькую 2D стрелялку. Решил сначала сделать сетевую часть, а там уже видно будет, что да как. Так как жанр предполагает экшен во все поля, поэтому решил использовать протокол UDP. Начал проектировать архитектуру сетевой части. Понял что можно это все вынести в отдельную библиотеку. Получившуюся библиотеку я еще и на crates.io залил, под лицензией MIT, потому, что: а) Мне самому будет ее потом удобнее оттуда в свои проекты подключать. б) Может она еще кому-то пригодится и принесет пользу. За подробностями добро пожаловать под кат."
AlekDikarev;Самая полная классификация подводных навигационных систем, что вы можете найти;https://habr.com/ru/post/478448/;"Приветствую вас, глубокоуважаемые! «Гидроакустика — продажная девка империализма!» (С) Почему вообще подводная навигация важна? Да потому, что без нее любой подводный аппарат — дорогая игрушка, которая находится неизвестно где, потому что проще и дешевле сделать тысячи однотипных подводных роботов, и для того, чтобы уничтожить подводную лодку с десятками человек обученного экипажа хватит и одного из них.  Ну и что же? Длинная, короткая, ультрокороткая? О, нет, все гораздо глубже! Дьявол, как обычно кроется в реализации. Как устроены подводные навигационные системы в реальном мире, почему они устроенны именно так, как работают — сегодня я все это разложу по полочкам. Со следовыми количествами матана в качестве специй, конечно.   Бонусом идет библиотека с открытым кодом, для решения навигационных задач.  Кто не испугался — добро пожаловать в прохладные декабрьские воды нашего пруда!  "
mr_elzor;5 вещей, которые я бы хотел знать до начала разработки биржи;https://habr.com/ru/post/487884/;“Скажи мне — и я забуду, покажи мне — и я запомню, дай мне сделать — и я пойму”.  Когда я со своим котом начинал разработку движка биржи, именно эта цитата Конфуция звучала в моей голове. Мы были сплоченной и мотивированной на результат командой. Интерес и готовность преодолевать трудности, возникающие на пути к MVP, — вот как можно было описать наше состояние. Вызовы и открытия, возникшие в процессе разработки, определенно внесли свои коррективы и стоили затраченного времени. Об основных из них, а также об итогах эксперимента, я и хочу поведать сегодня. Для нетерпеливых — вот ссылка на демо версию биржи, которую можно запустить на своих машинах.  Всех остальных прошу под кат.
p4ymak;Ray Casting Visual Search (RCVS). Простой и быстрый алгоритм поиска схожих по геометрии 3D моделей;https://habr.com/ru/post/490760/;"  Для меня эти две модели очень похожи, однако у них нет очевидных характеристик, по которым можно было бы измерить их сходство. У этих моделей разное количество вершин, рёбер и полигонов, они разного размера, к тому же по-разному повёрнуты в пространстве, и у обеих одинаковые трансформации (Положение = [0,0,0], Вращение в радианах = [0,0,0], Масштаб = [1,1,1]). Как определить их подобие?"
p4ymak;Ray Cast Visual Search (RCVS). Fast and simple algorithm for searching 3D objects with similar shapes;https://habr.com/ru/post/491196/;" For me, these two models are quite similar, but in fact they don’t have obvious characteristics to measure this similarity. These models have different numbers of vertices, edges and polygons. They are of different sizes, rotated differently and both have the same transforms (Location = [0,0,0], Rotation in radians = [0,0,0], Scale = [1,1,1]). So how to determine their similarity?"
sobolevn;9 лучших опенсорс находок за март 2020;https://habr.com/ru/post/495882/;"Доброго карантинного апреля, дамы и господа. Подготовил для вас подборку самых интересных находок из опенсорса за март 2020.  За полным списком новых полезных инструментов, статей и докладов можно обратиться в мой телеграм канал @OpensourceFindings (по ссылке зеркало, если не открывается оригинал). В сегодняшнем выпуске. Технологии внутри: Rust, TypeScript, JavaScript, Go, Python. Тематика: веб разработка, тестирование, инструменты разработчика, администрирование и документирование. Прошлый выпуск (аж ноябрь 2019!)."
Halt;Проект LLHD — универсальный язык описания аппаратуры;https://habr.com/ru/post/496720/;Буквально на днях на arXiv-е была выложена очень занятная статья швейцарских исследователей, в которой представлены подробности проекта LLHD. Это проект создания многоуровневого промежуточного представления для языков описания аппаратуры, наследующий идеологию и принципы проекта LLVM. Говоря простыми словами — это новый язык описания аппаратуры, лишенный недостатков его предшественников и уже сейчас демонстрирущий приличную производительность, гибкость и совместимость с существующей инфраструктурой. Приятным моментом является то, что код основных инструментов написан на языке Rust. Предлагаемая иерархия инструментов (здесь и далее изображения из оригинальной статьи) У проекта есть все шансы стать тем же, чем GCC и LLVM в свое время стали для мира открытого программного обеспечения. Сложно даже представить, насколько это может изменить ситуацию вокруг разработки железа. Под катом описание текущего положения дел, краткий обзор языка и отличия нового подхода.
MaxRokatansky;Первые мысли о Deno;https://habr.com/ru/company/otus/blog/506004/;"Перевод статьи подготовлен в преддверии старта курса «Разработчик Node.js».     В Codegram мы любим экспериментировать с новыми технологиями, а Deno вышел всего неделю назад! Прочитайте статью, если хотите узнать об этой новой среде выполнения JavaScript и о том, что думает по этому поводу Codegram.  Возможно, вы уже слышали о Deno, а возможно нет, но сейчас интернет пестрит информацией о нем и на то есть причина! Появилась новая среда выполнения JavaScript с симпатичным динозавриком в качестве логотипа (некоторые считают, что на логотипе грустный носок, но нет…). Мы даже написали твит о нем за неделю до первого релиза, но, сказать по правде, мы впервые услышали о Deno еще два года назад после просмотра этого потрясающего выступления Райана Даля.  В этой статье мы поверхностно пробежимся по Deno и поделимся своими мыслями о нем. Приступим!"
skillfactory_school;Как просто и быстро искать данные с помощью Whale;https://habr.com/ru/company/skillfactory/blog/524578/;" В этом материале рассказывается о простейшем и быстром инструменте обнаружения данных, работу которого вы видите на КДПВ. Интересно, что whale создан таким образом, чтобы размещаться на удаленном git-сервере. Подробности под катом."
grvelvet;Wasm в Armory Engine;https://habr.com/ru/post/531964/;Для тех кто в танке - wasm или WebAssembly это язык программирования низкого уровня для виртуальной стековой машины раз разработанный как портативная цель компиляции для высокоуровневых языков, таких как Си, C++, C#, Rust, Go. Проще говоря вы можете писать высокопроизводительный, компактный и переносимый код используя wasm. Наш Armory тоже использует wasm. Благодаря ему движок может работать в браузере и на других платформах с использованием Krom. 
MaxRokatansky;Modern Reverse Engineering: TTD;https://habr.com/ru/company/otus/blog/532994/;Обратная разработка сегодня это достаточно трудоемкий процесс в первую очередь потому, что в период с 2000х по 2020 годы вышло в свет много языков программирования, которые ставили перед собой задачу стать интуитивными и простыми для изучения, безопасными и в то же время эффективными для решения поставленных задач. Что значит интуитивными и простыми? Это когда не нужно тратить время на синтаксически сложные для запоминания конструкции языка и писать чистый код, который не нужно разбирать часами, чтобы понять что он делает.Статья расскажет о способах анализа современных языков программирования на примере Crackmes. Среди исследуемых языков: •   Go•   Python•   RustОпишем некоторые проблемы обратной разработки связанных с каждым из перечисленных языков программирования.
AlexWriter;Chipmunk: обновления;https://habr.com/ru/post/551502/;Короткий обзор очередных обновлений смотрелки логов chipmunk. Много исправлений, много корректировок и немного фишек, в том числе запрашиваемых сообществом.
Doublesharp;Инструмент для отслеживания DNS-запросов: dnspeep;https://habr.com/ru/company/skillfactory/blog/555780/;Недавно я создала небольшой инструмент под названием dnspeep, который позволяет понять, какие DNS-запросы отправляет ваш компьютер и какие ответы он получает. Всего мой код занял 250 строк на Rust. В этой статье я расскажу о коде, объясню, для чего он нужен, почему в нём возникла необходимость, а также расскажу о некоторых проблемах, с которыми я столкнулась при его написании. И, конечно, вы сами сможете попробовать код в действии.
wladwm;Сетевая безопасность — IPS с использованием BGP;https://habr.com/ru/post/568336/;В вопросах именно сетевой безопасности функционально выделяются два компонента:IDS - Intrusion Detection System, система обнаружения вторжений.IPS - Intrusion Prevention System, система предотвращения вторжений, компонент, блокирующий злоумышленнику сетевой доступ к атакуемому приложения. Реализована эта система может быть как встроенная в приложение функция, настраиваемый пакетный фильтр на хосте, как фаерволл на периметре защищаемого сегмента сети или же обычный сетевой маршрутизатор с BGP. Вот про этот вариант сегодня и поговорим.
svistunov;История платформы Highload.Fun для соревнований в оптимизации кода;https://habr.com/ru/post/575190/;Привет Хабр! Сегодня я хочу рассказать о платформе, где люди соревнуются в том, кто больше сможет сэкономить тактов CPU для решения задач. Её история началась весной 2021 года, после очередного HighLoad Cup'а от Mail.ru. Мне очень нравится этот конкурс, но, к сожалению, он проходит довольно редко (2017, 2018, 2021 года) и наблюдается тренд ухода от оптимизации на уровне операционной системы и железа к массовости, чтобы в лидерах были решения не только на C/C++, но и на более медленных языках программирования. В 2017 году нужно было сделать HTTP сервер, реализующий простую бизнес логику, лидеры писали свои решения с использованием низкоуровневых вызовов функций ядра и только вызов функции epoll_wait со временем ожидания -1, вместо 0, не позволило мне подняться в TOP-6 с 9 места. Если интересны технические детали, то можно почитать эту статью. В 2021 году нужно было обращаться к серверу, в котором были искусственные ограничения и нужно было разобраться в них, а не выжать из железа всё возможное. После конкурса был созвон, на котором участники давали обратную связь, по итогам которого стало понятно, что есть небольшое количество людей, которым интересна именно низкоуровневая оптимизация, а не только улучшение алгоритмов на уровне Big O. Так и родилась идея этой платформы. Под катом история и устройство платформы, а также набитые шишки.
platoff;Как я нашел лучший в мире язык программирования. Часть Йо (2.72);https://habr.com/ru/post/260149/;Поскольку после второй части у меня случился перерыв на работу, я поимел возможность получить некоторый фидбек, который я хоть и еще не обработал, все же заставляет меня написать внеплановую часть Йо, которая мне кажется важной для дальнейшего разговора. С тем же перерывом на работу связана задержка третьей части, прошу меня извинить тех, кто действительно ждал и пока не дождался.  
andvgal;Мета-инструмент разработки: FutoIn CID;https://habr.com/ru/post/325764/;" Сейчас мало кого удивишь инструментами управления зависимостями проекта вроде npm, composer, bundler, pip, maven, cargo и других. Их общий недостаток — невозможность управлять непосредственно средой выполнения. Такая задача решается через nvm, php-build, rvm, virtualenv, sdkman, rustup и прочие глобальные ""манагеры"" версий runtime, обычно написанные под Bash/Zsh. Следующий уровень ""проблем"" начинается, когда универсальный разработчик ежедневно занимается проектами с использованием совершенно разных технологий. Переменные окружения превращаются в месиво, а запуск шелла может занимать несколько секунд. Неизбежно начинаются бытовые ошибки в работе с этим зоопарком. Далее разброд и шатание настегает Continuous Integration & Delivery, где ручные танцы с бубном установки инструментов и активирования конкретных версий совершенно не приветствуются, а в идеале требуется в принципе максимально абстрагироваться от используемых технологий и довести процесс до примитивных нейтральных команд: подготовить к релизу, затегить, скачать, подготовить, построить, упаковать, выложить, проверить, одобрить(подписать), выкатить. Тут сам собой напрашивается инструмент, унифицировано работающий поверх уже существующих технологий, который из себя и представляет FutoIn CID — FutoIn Continuous Integration & Delivery tool."
m1rko;Надёжность Go в инфраструктуре Dropbox;https://habr.com/ru/post/335056/;"Об авторе: Тэмми Бутов — технический руководитель инфраструктуры для разработчиков в Dropbox. Это управление потоками кода — полный цикл использования Go в Dropbox, от программирования до выпуска. Она выступала на конференции GopherCon 2017 на тему того, как разработчики Dropbox создают и поддерживают работу крупномасштабных сервисов на Go.   Как Dropbox пришёл к использованию Go Тэмми цитирует статью Роба Пайка «Go в компании Google: языковой дизайн в службе разработки ПО» от 2012 года, поскольку она в целом хорошо передаёт, почему Go хорошо работает и в Dropbox:  «Go — эффективный, масштабируемый и производительный язык. Некоторые программисты получают удовольствие от работы с ним; другие находят его прозаическим, даже скучным. В этой статье мы расскажем, почему все эти позиции не противоречат друг другу. Go спроектирован для решения проблем, возникающих в софтверной разработке в Google, что привело к созданию языка, который не является прорывным с исследовательской точки зрения, тем не менее это прекрасный инструмент для разработки крупных софтверных проектов». — Роб Пайк, 2012 Масштаб Dropbox впечатляет:   Более 500 млн пользователей 200 000 бизнес-пользователей 500 петабайт пользовательских данных Многоэкзабайтная система хранения Go "
alinatestova;Как создать блокчейн-проект на Exonum: краткое руководство;https://habr.com/ru/company/bitfury/blog/342208/;"Exonum — это фреймворк с открытым исходным кодом для создания приложений на основе блокчейна. Он ориентирован на работу с закрытыми блокчейнами и применим в любых сферах: FinTech, GovTech и LegalTech.   Сегодня мы проведем небольшой обзор решения, а также в рамках образовательного формата разберемся с тем, как построить простой блокчейн-based проект на Exonum. Весь код, приведенный ниже, вы найдете в репозитории на GitHub.   "
LooMaclin;Минимальный multiboot загрузчик;https://habr.com/ru/post/351568/;Эта статья объясняет как создать минимальное ядро операционной системы, используя стандарт мультизагрузки. По факту, оно будет просто загружаться и печатать OK на экране. В последующих статьях мы расширим его, используя язык программирования Rust.  Я попытался объяснить всё в деталях и оставить код максимально простым, насколько это возможно. Если у вас возникли вопросы, предложения или какие-либо проблемы, пожалуйста, оставьте комментарий или создайте таску на GitHub. Исходный код доступен в репозитории. 
mr_elzor;Aрифметика произвольной точности в Erlang;https://habr.com/ru/post/428111/; @rawpixel Даже школьникам известно про существование различных систем счисления и тот факт, что не каждая конечная десятичная дробь является конечной дробью в двоичной системе счисления. Немногие задумываются о том, что вследствие этого факта операции над float и double не являются точными. Если говорить про Erlang, то он, как и многие другие языки, реализует IEEE754 стандарт для float, в то время как стандартный тип Integer в Erlang реализован с использованием арифметики произвольной точности. Однако, хотелось бы иметь не только bigint, но и возможность оперирования рациональными, комплексными и числами с плавающей точкой с необходимой точностью. В статье представлен минимальный обзор теории кодирования чисел с плавающей точкой и наиболее яркие примеры возникающих эффектов. Решение, обеспечивающее необходимую точность операций через переход в представление с фиксированной точкой, оформлено в виде библиотеки EAPA (Erlang Arbitrary Precision Arithmetic), призванной удовлетворить потребности финансовых приложений, разрабатываемых на Erlang / Elixir.
nagayev;Что мне не нравится в C и С++;https://habr.com/ru/post/432488/;"Просьба не читать профессиональным Си/ С++ программистам).  В статье я выражаю свою точку зрения, если несогласны — обоснуйте в комментариях. Цель данной статьи: указать на недостатки С и С++, которые мне очень не нравятся и побудить Вас использовать новую версию языка или возможно даже предложить какие-то идеи по улучшению стандарта.  Что ж, самое время разжечь холивар."
xenmayer;Современные устройства ввода-вывода быстрее, чем процессоры. Обзор статьи;https://habr.com/ru/post/451966/;" Хочу рассказать о статье ""I/O Is Faster Than the CPU – Let’s Partition Resources and Eliminate (Most) OS Abstractions"", опубликованной на личной странице одного из разработчиков ScyllaDB, Pekka Enberg. О ней узнал из видео. С докладом по этой статье авторы должны были выступать на HOTOS17 (Hot Topics in Operating Systems) воркшопе 12 -15 мая 2019. Насколько понял там обсуждают наработки на ранних этапах их жизни. Моя статья носит новостной характер с целью возбудить пытливые умы на обдумывание этой темы и размышления в комментариях."
katyateria;Открытые онлайн-материалы от Computer Science центра, часть 2;https://habr.com/ru/company/JetBrains-education/blog/495014/;В первой части поста мы рассказали о наших популярных онлайн-курсах на Stepik, а теперь выкладываем записи открытых лекций и видеокурсов на YouTube.    
host_m;Если бы языки программирования могли рассказать о себе сами;https://habr.com/ru/company/vdsina/blog/498732/;" Фото Lee Soo hyun   Разработка программного обеспечения — одна из областей, которая даёт людям очень разный опыт. Некоторые наслаждаются программированием, в то время как у других оно может вызывать фрустрацию. Конечно же, процесс создания программного обеспечения может вызвать стресс у любого, даже у того, кто по уши влюблён в это дело.  Хорошо бы в такие моменты иметь возможность получить эмоциональную разрядку. Например, когда есть сложности с каким-либо языком программирования, в порыве гнева кто-то может опрометчиво запилить на «Хабре» пост о том, какой плохой этот язык. Естественно, и реакция сообщества будет соответствующей. В общем, позитивного настроя на продуктивную работу это явно не прибавит.  Чтобы избежать этого, можно просто найти повод посмеяться над ситуацией, над каким-то удачным наблюдением. Тем более, любой язык программирования не идеален. В связи с этим предлагаю несколько «честных» или просто забавных высказываний как бы от лица некоторых популярных языков программирования, в которых раскрывается их «характер». "
AlexWriter;Легкие обновления;https://habr.com/ru/post/535752/;Напоследок немного новостей о «смотрелке» для логов chipmunk. Ничего особенного, никаких кардинальных изменений или же заметных фитч, а скорее работа над ошибками, да и просто хочется сказать пару слов о прошедшем, настоящем и будущем.
denisredozubov;Как мы строили параллельные вселенные для нашего (и вашего) CI/CD пайплайна в Octopod;https://habr.com/ru/company/typeable/blog/541430/;"Как мы строили параллельные вселенные для нашего (и вашего) CI/CD пайплайна в Octopod  Привет, Хабр! Меня зовут Денис и я вам расскажу как нас надоумило сделать техническое решение для оптимизации процесса разработки и QA у себя в Typeable. Началось с общего ощущения, что вроде делаем все правильно, но все равно можно было бы двигаться быстрее и эффективнее — принимать новые задачки, тестировать, меньше синхронизироваться. Это все нас привело к дискуссиям и экспериментам, результатом которых стало наше open-source решение, которое я опишу ниже и которое теперь доступно и вам."
PashaPodolsky;Устройство поисковых систем: базовый поиск и инвертированный индекс;https://habr.com/ru/post/545634/;" Под капотом почти каждой поисковой строки бьется одно и то же пламенное сердце — инвертированный индекс. Именно инвертированный индекс принимает текстовые запросы и возвращает пользователю список документов, а пользователь смотрит на всё это дело и радуется котиками, ответам с StackOverflow и страничкам на вики.  В статье описано устройство поиска, инвертированного индекса и его оптимизаций с отсылками к теории. В качестве подопытного кролика взят Tantivy — реализация архитектуры Lucene на Rust. Статья получилась концентрированной, математикосодержащей и несовместимой с расслабленным чтением хабра за чашкой кофе, осторожно!"
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #410 (6 сентября — 12 сентября);https://habr.com/ru/company/productivity_inside/blog/577494/;В этом выпуске многопоточность Kotlin в iOS и игра в слова, судьба APK и MVVM для Android, первая игра на Unity, траты россиян на социальные сети, умные очки Facebook, худший вопрос разработчику и многое другое!  
Xtoman;Вышла версия 1.0 библиотеки для управления секс-игрушками Buttplug;https://habr.com/ru/news/t/535914/; После 3,5 лет разработки компания Nonpolynomial обновила открытую библиотеку для секс-игрушек до версии 1.0. Библиотека управляет вибрацией с клавиатур, геймпадов и шлемов виртуальной реальности, а также синхронизирует импульсы с фильмами через плагины для VLC и Kodi.
Lxx;VexorCI — свежий взгляд на continuous integration;https://habr.com/ru/company/vexorci/blog/240747/;"Привет, Хабр.  Меня зовут Олег Балбеков, я хочу рассказать вам о нашем новом проекте Vexor CI.    Vexor CI – облачный continuous integration сервис для разработчиков, позволяющий эффективно тестировать проекты.  Ежедневно разработчики используют CI-сервисы, однако большинство из них дорогие, медленные, неэффективные и накладывают большие ограничения на использование.  Vexor:   для тех, кому надоело тратить время и деньги на поддержание тестовой инфраструктуры;  для тех, кому давно не хватает ресурсов локального сервера;  для тех, кто не решается на облачный CI потому, что дорого;  для тех, кто устал ждать очереди на просчёт тестов в обычном облачном CI;  для тех, кому действительно важна скорость.  У нас справедливая цена (поминутная оплата) и безлимитные мощности для каждого. Всем подключившимся мы дарим $10 и не берём оплату, пока вы настраиваете сервис. У нас самая дружественная русскоязычная поддержка (в моём лице). Подключайтесь!  "
ermolushka;VexorCI – Что нового?;https://habr.com/ru/company/vexorci/blog/241427/;"Привет, Хабр. Этим постом мы начинаем наши пятничные новостные выпуски, в которых будем рассказывать о новых технологиях, поддержку которых мы внедрили в наш проект, а также о фичах, которые сделают работу с Vexor максимально продуктивной. Наша команда учитывает пожелания пользователей, и постепенно мы расширяем наш функционал. Напомним, что Vexor CI – облачный continuous integration сервис для разработчиков с неограниченными ресурсами и поминутной оплатой, позволяющий эффективно тестировать проекты. "
OberonForGood;«Проклятие» фигурных скобочек;https://habr.com/ru/post/258391/;Допустим, вы крупная Компания. Занимаетесь разработкой Браузера, Почтовика и даже ОС для смартфонов. Неожиданно вы понимаете, что вам не нравится современный и мощный язык С++. Ну или нравится, но работать с ним невозможно. Бывает. И вот вы, взрослая стабильная компания решаете разработать новый язык программирования. Рецепт простой. Берете бочку денег, книжки по истории ИТ, роту программистов и грузовик МакБуков. Долго думаете, быстро кодите, разводите хайп в соцсетях (реддит, фейсбук, гитхаб). И вот, в 2015-м году вы даете сообществу The Язык. Назовем его Яист.  
namespace;Высокоуровневый С или пару слов о Cello;https://habr.com/ru/post/262471/;"Cello — это библиотека, которая сделала высокоуровневый C возможным! Обобщения (generics), параметрический полиморфизм, интерфейсы, конструкторы/деструкторы, сборщик мусора (по желанию), исключения и рефлекция. Да-да, ты не ослышался, все эти плюхи в одном флаконе. Так как Cello построен в пределах стандарта С, в сухом остатке ты получишь все, что нужно живому человеку на земле: высокую производительность, мощный инструментарий и гибкие библиотеки.  Talk is cheap, show me the code!  #include ""Cello.h""  int main(int argc, char** argv) {    /* Stack objects are created using ""$"" */   var i0 = $(Int, 5);   var i2 = $(Int, 3);   var i2 = $(Int, 4);    /* Heap objects are created using ""new"" */   var items = new(Array, Int, i0, i1, i2);    /* Collections can be looped over */   foreach (item in items) {     print(""Object %$ is of type %$\n"",       item, type_of(item));   }    /* Heap objects destructed via Garbage Collection */   return 0; }  ШОК! Зачем же мне теперь все эти ваши Go/D/Nim/<впиши>, если С на стероидах решает все проблемы рода человеческого?! Хочешь узнать о готовности Cello к продакшну и увидеть еще больше кода? Добро пожаловать подкат. "
koito_tyan;Танчики в консоли, статья третья: «Сервер и клиент»;https://habr.com/ru/post/346256/;"Добрый всем день! И с наступившими праздниками!  Мой репозиторий с кодом внизу этой статьи.  Начну пожалуй с того, что снова всё переписала, но это не коснулось структур. И за прошедшее время сделала много изменений (как и в сервере, так и в клиенте), но пока остаётся ещё пару аспектов (я не сделала программу которая их строит и расставляет начальные позиции игроков (пока что всё вручную)), которые будут устранены в ближайшее время.  Я слышу критику и стараюсь написать интересную статью с разбором этого проекта.  Глава 1: «Рабочий клиент»"
koito_tyan;Танчики в консоли, статья четвёртая: «Новый сервер — новый протокол»;https://habr.com/ru/post/349326/;"Добрый день, дорогие читатели. Мы были на WorldSkills (чему я посвящу отдельную статью) в связи с чем эта публикация долго не писалась, так же как и не обновлялся сервер.  Сегодня я расскажу об неожиданной идеи и небольшом анализе сетевых протоколов. Подробности под катом."
Raiffeisenbank;WASM Meet Up 1/08;https://habr.com/ru/company/raiffeisenbank/blog/460947/;Приглашаем на митап, посвященный технологии WebAssembly, который пройдет на площадке Райффайзенбанка в Нагатино 1 августа. Послушаем доклады Raiffeisen Digital, Parity Technologies и Mozilla напрямую из Сан-Франциско.  
AlexWriter;Безумные логи;https://habr.com/ru/post/496126/;"Утром, не сделав и глотка кофе, открываешь почту и видишь баг репорты по тому, что вполне себе нормально работало, не сбоило и особо не беспокоило. Идей с ходу ноль, подозреваемых нет, больших изменений в коде тоже не было — нужно лезть в логи.  А туда ты не ходил так давно, что раздало файл с логами аж до 100 мб. или до 500 мб. Черт! А может и до 10 Гб (*). И лежат драгоценные улики где-то там среди 10 737 418 240 байтов, что надо срочно пробежать, дабы выяснить, что ж вообще происходит, меж тем как кофе уже остывает.  А может к рапорту прицепом шёл и архив с двумя сотнями файлами (скажем по 5 Мб каждый) разбитых логов и надо их как-то клеить, а потом смотреть, копать и думать.  Знакомо?  В общем все мы так или иначе сталкиваемся с необходимостью анализа «следов жизнедеятельности» наших творений и хорошо если файл весит пару Мб, потому как открыть лог в 1 Гб блокнотом, да ещё и попытаться поиск сделать — занятие весьма сомнительное.  Под катом поведаю об одном инструменте, не имеющим лимитов (**) по размерности открываемых файлов, зато обладающим весьма шустрым поиском.   А ещё приглашу к разработке присоединиться.   И да, будет много интересных картинок."
Gorthauer87;Расширяем возможности процедурных макросов с помощью WASM;https://habr.com/ru/post/497916/;В рамках продолжения своих исследований различных аспектов процедурных макросов хочу поделиться подходом к расширению их возможностей. Напомню, что процедурные макросы позволяют добавить в язык элемент метапрограммирования и тем самым существенно упростить рутинные операции, такие как сериализация или обработка запросов. По своей сути макросы являются плагинами к компилятору, которые компилируются до сборки крейта, в котором они используются. У таких макросов есть некоторые существенные недостатки.  Сложность с поддержкой таких макросов в IDE. По сути дела нужно как-то научить анализатор кода самостоятельно компилировать, загружать и исполнять эти самые макросы с учетом всех особенностей. Это весьма нетривиальная задача. Так как макросы самодостаточные и ничего не знают друг о друге, то нет никакой возможности делать композицию макросов, что иногда могло бы быть полезным. 
AloneCoder;SHISHUA: самый быстрый в мире генератор псевдослучайных чисел;https://habr.com/ru/company/mailru/blog/498352/;" Полгода назад мне захотелось создать лучший генератор псевдослучайных чисел (ГПСЧ) с какой-нибудь необычной архитектурой. Я думал, что начало будет лёгким, а по мере работы задача станет медленно усложняться. И думал, смогу ли я научиться всему достаточно быстро, чтобы справиться с самым сложным.  К моему удивлению, сложность возрастала не линейно. Побайтовое тестирование по критерию хи-квадрат оказалось очень трудным! Позднее столь же трудно было пройти тесты diehard. Я опубликовал текущие результаты, чтобы понять, какие ещё трудности меня ожидают. Однако тест PractRand в тот раз пройти не удалось.  Затем было очень трудно прохождение теста BigCrush.  Затем было очень трудно передавать 32 тебибайта данных при прохождении PractRand. Скорость стала проблемой. Мало было создать конструкцию, генерирующей десять мегабайтов в секунду, потому что прохождение PractRand заняло бы месяц. Но должен признаться, что пройти этот тест со скоростью гигабайт в секунду было очень трудно."
AlexWriter;Время в логах;https://habr.com/ru/post/510698/;"Записи в логах о затраченном на ту или иную операцию времени дело вполне обычное. Пожалуй даже так, если я вижу логи без замеров (особенно если речь идёт о приложении обрабатывающим «тяжёлые» запросы), то вопрос к разработчикам возникает сам собой.   Измерение продолжительности стадий инициализации приложения; времени затраченного на обработку данных; времени отрисовки (рендеринга) и так далее позволяют нам судить о достаточности ресурсов и эффективности нашего решения так какового. Кроме того, часто именно тайминг может указать нам на ошибки при отсутствии явных признаков таковых в логах. Например, если обработка какого-нибудь запроса, занимающая как правило несколько миллисекунд, переодически «ест» больше секунды — это явный повод проверить обработчик запроса.  Поскольку нагружать приложение тоннами логов путь, мягко скажем, сомнительный, то разработчик как правило ставит тайминги именно на критически важные операции. А там где таймингов нет — вам вполне может пригодиться новый функционал в обновлённой версии «смотрелки для логов» chipmunk."
AlexWriter;Обновления в Chipmunk;https://habr.com/ru/post/517394/;Рад представить Вашему вниманию некоторые обновления «смотрелки» для логов chipmunk. Где-то стало удобнее, где-то практичнее, но обо всем по порядку… Под катом будет коротко, но интересно.
AlexWriter;Обновления в смотрелке логов;https://habr.com/ru/post/527022/;Хотел бы поделиться с Вами рядом обновлений «смотрелки» для логов chipmunk. Описание займет не больше 2-х минут Вашего времени, но меж тем новые возможности могут оказаться весьма полезным подспорьем в Вашей повседневной работе.
Data_center_MIRAN;Главной угрозой для общества стали компании, которые «защищают безопасность»;https://habr.com/ru/company/dcmiran/blog/576290/;"Получив новый телефон, я всегда его разбираю. Не из любопытства и не по политическим причинам, а просто для безопасности. Первый шаг — удаление двух или трёх крошечных микрофонов на плате. Это лишь начало сложного процесса. Но даже после нескольких дней работы с паяльником смартфон всё равно остаётся самым опасным предметом в моей квартире.   Микрофоны на материнской плате смартфона перед удалением   До публикации проекта Pegasus — разоблачения фатальных последствий деятельности NSO Group, ещё одной коммерческой фирмы, которая вышла из-под контроля индустрии безопасности — большинство производителей смартфонов и большая часть мировой прессы дружно закатывали глаза, когда я публично называл новенький iPhone потенциальной угрозой для жизни.  Теперь все поняли, о чём речь."
semen_grinshtein;Mozilla значительно улучшит производительность Firefox новым движком Quantum;https://habr.com/ru/news/t/313820/;"  Браузеры прошли большой путь от отображения статических веб-страниц до сложных интерактивных веб-приложений. Достигнув предела возможностей существующих технологий, разработчикам браузеров нужно было придумать что-то новое — современные веб-приложения всё более требовательны в плане «железа». И хорошая производительность должна быть даже на устройствах, умещающихся в карман брюк.  Компания Mozilla анонсировала проект – Quantum. Это новый движок для Firefox. По словам разработчиков, полное использование Rust и быстродействующих компонентов Servo даст больше возможностей GPU-параллелизации."
maybe_elf;Линус Торвальдс рассказал о будущем Linux: «Сложно найти мейнтейнеров»;https://habr.com/ru/news/t/508972/;"  Создатель Linux Линус Торвальдс рассказал о проблеме поиска будущих сопровождающих для операционной системы с открытым исходным кодом. Это случилось на виртуальной конференции Open Source Summit и Embedded Linux, проходящей на этой неделе."
devlato;[Перевод] Почему Go не так хорош;https://habr.com/ru/post/228849/;"Всем привет! Недавно вышел перевод статьи о том, как TJ Holowaychuk прощался с Node.js, решив двигаться в сторону Go. В конце статьи была ссылка на посвящённый сравнению и критике языка Go пост Уилла Ягера, который просили перевести — собственно, с результатами перевода я и предлагаю ознакомиться. Я пытался более-менее сохранить как многословный стиль изложения, присущий автору, так и оригинальную разбивку на предложения и параграфы. Буду очень рад любым конструктивным замечаниям и предложениям по переводу, опечаткам и/или оформлению, но очень прошу помнить, что точка зрения переводчика может не совпадать с позицией автора переведённой статьи. "
Seleditor;Google предложил рейтинг критически важных Open-source проектов;https://habr.com/ru/company/selectel/blog/532680/;" О многих проектах говорят, что они крайне важны для какой-либо отрасли. Но как оценить их реальную значимость? Корпорация Google разработала специальный рейтинг для оценки открытых проектов — как раз по степени важности для отрасли.  Рейтинг создан не просто так — его предлагается использоваться для выделения важнейших проектов, от которых зависит развитие. Именно для этих проектов нужно выделять максимум ресурсов, для сопровождения, разработки и обеспечения безопасности. Рейтингом, по замыслу, будут пользоваться организации, которые могут выделить нужные проектам ресурсы."
BitfuryRussia;Первый байндинг для Exonum: почему мы выбрали Java;https://habr.com/ru/company/bitfury/blog/423441/;"Ядро нашего фреймворка для разработки приватных блокчейнов Exonum написано на Rust, поскольку этот ЯП ориентирован на безопасность работы с памятью. Однако наряду со многими преимуществами, Rust имеет ряд особенностей, усложняющих «взаимодействие» с ним: его синтаксис непривычен для многих разработчиков, а порог вхождения довольно высок.  Чтобы упростить работу с платформой Exonum и сделать её более доступной для аудитории, мы решили написать байндинг-библиотеку. Языком для байндинга стал Java.  Почему мы выбрали Java, рассказываем под катом.   "
Siemargl;Интереснейшее влияние Cyclone;https://habr.com/ru/post/524200/;Оглавление:  Cyclone C++, владение и псевдонимы Rust Midori’s M# Pony Cone Резюме  В 2001 году Джим Тревор (AT&T Research) и Грег Моррисетт (Cornell) запустили совместный проект по разработке безопасного диалекта языка программирования C — как развитие более ранних работ над Типизированным Ассемблером. После пяти лет напряженной работы и нескольких опубликованных научных работ, команда (в том числе Дэн Гроссман, Майкл Хикс, Ник Свами и другие) выпустила Cyclone 1.0. А затем разработчики занялись другими делами.
AloneCoder;Go: Хороший, плохой, злой;https://habr.com/ru/company/mailru/blog/353790/; У Go есть некоторые замечательные свойства, которым посвящён раздел «Хороший». Но когда речь заходит о применении этого языка не для создания API или сетевых серверов (для чего он и был разработан), а для реализации бизнес-логики, то я считаю Gо слишком неуклюжим и неудобным. Хотя даже в рамках сетевого программирования найдётся немало подводных камней как в архитектуре языка, так и в реализации, что делает Go опасным, несмотря на его кажущуюся простоту.
phillennium;«У меня только один метод обучения: просто работать» — интервью с Ryan Dahl (Node.js, Deno);https://habr.com/ru/company/jugru/blog/450752/;"  27 мая исполнится 10 лет с того момента, как Ryan Dahl выпустил самую первую версию Node.js. За прошедшее десятилетие проект стал более чем успешен, но сам Райан уже переключился на другие вещи. Чем он занимается теперь? Чем его новый проект может помочь JavaScript-разработчикам? Что он думает о разных языках, образовании и смене поколений?   25 мая, за два дня до круглой даты, Райан выступит в Санкт-Петербурге на нашей конференции HolyJS. А пока что участники программного комитета HolyJS Евгений bunopus Кот и Дмитрий dmitrymakhnev Махнёв расспросили его подробно обо всём перечисленном. На Medium мы опубликовали англоязычную версию интервью, а для Хабра сделали русскоязычный вариант. "
ru_vds;Тренды программирования: чего можно ожидать в 2020 году?;https://habr.com/ru/company/ruvds/blog/462009/;"Как бы безумно это не звучало, но 2020 год наступит уже очень скоро. «2020 год» — это похоже на фразу из научно-фантастического романа. Но это не фантастика. Нас от этой даты отделяет всего несколько месяцев.    Автор материала, перевод которого мы публикуем сегодня, говорит, что если вас занимает вопрос о том, что будущее может принести в мир программирования, то вы, читая это, оказались в нужном месте в нужное время. Он отмечает, что, размышляя о том, что может произойти, вполне может ошибаться в своих прогнозах и просит его не цитировать. По его словам, он не может предсказать будущее, но способен сделать обоснованное предположение о том, каким оно будет.  Лучший способ предсказать будущее — это создать его. А. Линкольн"
ewgenij;Дайджест интересных, топовых и фатальных материалов из мира Хабра за 2014 год;https://habr.com/ru/post/247429/;"В 2014 году на Хабре начали набирать обороты дайджесты интересных материалов и событий по разным тематикам. В этом посте будут рейтинги постов Хабра за 2014 год. Вдруг кто-то пропустил или думает, что почитать на выходных.  Для рейтинга был найден последний, судя по дате, пост 2013 года. Первый после него пост 2014 года был 11 января. Видимо автор начал писать его до НГ, а потом резко оказалось 11 января после праздников. А вот следующий уже ближе к началу года. В общем, возможно, есть минимальные погрешности.  За 2014 год на Хабре и GT, куда переехали некоторые посты, находится 7672 опубликованные записи. Это примерно 21 пост в сутки.  Из всех этих записей были выбраны 20 топовых по количеству плюсов, 10 антитоповых по количеству минусов, и по 15 интересных записей из разных хабов, где количество постов с рейтингом +20 было более 10. Интерес поста оценивался простой формулой «на глаз». Результат равен рейтингу*5 плюс количество попаданий в избранное*2 и плюс комментарии. Коэффициенты добавлены для того, чтобы минусные посты ушли дальше в минус и, если в них было много комментариев, они не вытеснили интересные посты из топа.  В общем, дайджест топовых, фатальных и интересных постов Хабра за 2014 год под катом."
jamak;Deno v1.0: Безопасная среда выполнения для JavaScript и TypeScript. Обзор возможностей;https://habr.com/ru/post/501480/;  Вступление Установка Как это выглядит внутри Функциональность WASM, RUST, Плагины Debugging, IDE Тестирование Compiler API CI Разное  Вступление Если вы уже оказались за чтением этой статьи, то наверняка уже слышали про выступление Ryan Dahl, создателя NodeJS, на JSConf, где он выступил с докладом и рассказал о ключевых ошибках, которые были сделаны при проектировании NodeJS. В этом же докладе он обьявил о новом проекте: Deno, в котором будут учтены ошибки предыдущего проектирования. Вдохновившись этим анонсом, я внимательно стал следить за проектом и пробовать реализовывать на нем различные проекты.
tani_mel;Самые редкие и самые дорогие языки программирования;https://habr.com/ru/post/452186/;"Принято считать, что языки программирования, такие как Rust, Erlang, Dart, а также некоторые другие являются самыми редкими в мире IT. Поскольку я подбираю IT специалистов для компаний, постоянно контактируя с айтишниками и работодателями, я решила провести личное исследование и выяснить, действительно ли это так. Информация актуальна для IT рынка России.  Сбор данных Для сбора информации я изучила количество вакансий, в требованиях к которым нужно было владение языками, а также количество резюме с этим навыком. Данные я собирала в Linkedin, на HeadHunter, с помощью сервиса Amazing Hiring. Также у меня есть личная статистика по заявкам в мое агентство.   В общем и целом моего исследования коснулись восемь языков. "
owlnagi;Итоги: 9 главных технологических прорывов 2019 года;https://habr.com/ru/company/vdsina/blog/482496/;"На связи Александр Чистяков, я евангелист vdsina.ru и расскажу про 9 лучших технологических событий 2019 года.  В оценке я больше полагался на свой вкус, чем на мнение экспертов. Поэтому в этот список, например, не вошли беспилотные автомобили, потому что ничего принципиально нового и удивительного в этой технологии нет.  Я не сортировал события в списке по значимости или вау-эффекту, потому что их значимость будет понятна лет через десять, а вау-эффект слишком краткосрочен, просто постарался сделать эту историю связной. "
Gim6626;FOSS News №75 – дайджест материалов о свободном и открытом ПО за 14—20 июня 2021 года;https://habr.com/ru/post/563712/;  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  Как Linux повлиял на нашу жизнь — празднование 30-летия открытого исходного кода. Linux Foundation объявляет о выпуске отраслевых стандартов для улучшения кибербезопасности. Google профинансирует добавление поддержки Rust в ядро Linux. Ода открытому исходному коду: невозможно переоценить вклад сообщества. Что такое Open Source? Статья для бизнес-лидеров. Волшебники Open Source: отраслевые перспективы программного обеспечения с открытым исходным кодом. «Я подарю тебе маленькую вселенную». DIY-рамка со светящимся сердцем. Как объяснить детям, что такое Apache Kafka за 15 минут с картинками и выдрами.  И многое другое…
Gim6626;FOSS News №78 – дайджест материалов о свободном и открытом ПО за 5—11 июля 2021 года;https://habr.com/ru/post/567164/;  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  Скандал вокруг новых правил конфиденциальности Audacity из-за сбора данных в интересах органов власти. Вторая редакция патчей для ядра Linux с поддержкой языка Rust. Linux Foundation создаёт новый фонд Open 3D Foundation. Amazon опубликовал открытый игровой движок Open 3D Engine на базе технологий CryEngine. «Как я учил студентов Северной Кореи разрабатывать ПО с открытым исходным кодом». В Китае создан открытый RISC-V процессор XiangShan, конкурирующий с ARM Cortex-A76. Линус Торвальдс и коллеги по Linux о его тайм-ауте, разнообразии в ИТ и проблемах сообщества. Linux Foundation анонсировал конкурс дизайна футболок в честь 30-ти летия ядра Linux Бесконечность — не предел, когда Open Source делают правильно. «Зачем уметь работать в командной строке?»  И многое другое…
AloneCoder;Краткий и бодрый обзор архитектуры компиляторов;https://habr.com/ru/company/mailru/blog/451894/;" Большинство компиляторов имеют следующую архитектуру:     В данной статье я собираюсь детально препарировать эту архитектуру, элемент за элементом.  Можно сказать, что эта статья — дополнение к огромному количеству существующих ресурсов на тему компиляторов. Она является автономным источником, который позволит вам разобраться в основах дизайна и реализации языков программирования.  Целевая аудитория статьи — люди, чье представление о работе компиляторов крайне ограничено (максимум — то, что они занимаются компилированием). Однако я жду, что читатель разбирается в структурах и алгоритмах данных.  Статья ни в коем случае не посвящена современным производственным компиляторам с миллионами строк кода — нет, это краткий курс «компиляторы для чайников», помогающий разобраться, что такое компилятор."
m1rko;Мы ускорили планировщик Tokio в десять раз;https://habr.com/ru/post/472242/;"Мы в поте лица готовим очередную мажорную версию Tokio, асинхронной среды выполнения для Rust. 13 октября для слияния в ветку оформлен пул-реквест с полностью переписанным планировщиком задач. Результатом станет огромное улучшение производительности и уменьшение задержки. В некоторых тестах зафиксировано десятикратное ускорение! Как обычно, синтетические тесты не отражают фактическую выгоду в реальности. Поэтому мы также проверили, как изменения в планировщике повлияли на настоящие задачи, такие как Hyper и Tonic (спойлер: результат замечательный).  Готовясь к работе над новым планировщиком, я потратил время на поиск тематических ресурсов. Кроме фактических реализаций, особо ничего не нашлось. Я также обнаружил, что в исходниках существующих реализаций трудно ориентироваться. Чтобы исправить это, мы постарались написать шедулер Tokio как можно более чисто. Надеюсь, эта подробная статья о реализации планировщика поможет тем, кто находится в том же положении и безуспешно ищет информацию на эту тему.  Статья начинается с высокоуровневого обзора дизайна, в том числе политик захвата работы. Затем погрузимся в детали конкретных оптимизаций в новом планировщике Tokio."
ProductivityInside;Mozilla — прекрасная IT-компания, которую мы теряем;https://habr.com/ru/company/productivity_inside/blog/515534/;"  Когда разнеслась новость о том, что Mozilla начинает волну сокращений – уже вторую за текущий год – реакция последовала незамедлительно. От внимания разработчиков не ускользнуло, что компания уже срезала весь корпоративный жирок и теперь кромсает живые мышцы. Она распустила команду, которая занималась защитой от угроз. Она «сократила издержки» на инструменты для разработчиков – раздел, пользовавшийся большой популярностью. Она урезала команду Servo, которая работала над браузерным движком нового поколения на базе Rust. Она стёрла с лица земли команду MDN. В общем и целом, две волны сокращений суммарно унесли почти треть сотрудников.  Учитывая, что программисты составляют значительную часть весьма скромной пользовательской базы Mozilla, усечение инструментов для разработчиков представляется особенно недальновидным решением, которое разочарует самых преданных пользователей. Однако люди, мало знакомые с историей компании, скорее всего, примут ситуацию за очередной пример того, как игрок не сумел пробиться на конкурентном рынке, делая ставку на нишевые возможности. В конце концов, флагманский продукт компании, браузер Firefox, уже много лет не претендует на лидерство на рынке. Значит, это просто процесс вымирания очередного динозавра, что же ещё?"
Gim6626;FOSS News №56 – дайджест материалов о свободном и открытом ПО за 8-14 февраля 2021 года;https://habr.com/ru/post/542360/;"  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. IT гиганты объединились для создания Rust Foundation; интервью с заместителем генерального директора компании «Базальт СПО» Алексеем Новодворским — о Linux в «постинтеловскую» эпоху; отчёт за 3 года работы форка Sphinx под названием Manticore Search; рассказ об Open Source на уровне одной компании и первые уроки участия в сторонних проектах; WordPress охватывает 40% сайтов; продолжается набор наставников для программы Google Summer of Code 2021; видеообзор OpenSUSE и многое другое."
AloneCoder;Парсинг JSON — это минное поле;https://habr.com/ru/company/mailru/blog/314014/;"  JSON — это стандарт де-факто, когда заходит речь о (де)сериализации, обмене данными в сети и мобильной разработке. Но насколько хорошо вы знакомы с JSON? Все мы читаем спецификации и пишем тесты, испытываем популярные JSON-библиотеки для своих нужд. Я покажу вам, что JSON — это идеализированный формат, а не идеальный, каким его многие считают. Я не нашёл и двух библиотек, ведущих себя одинаково. Более того, я обнаружил, что крайние случаи и зловредная полезная нагрузка могут привести к багам, падениями и DoS, в основном потому, что JSON-библиотеки основаны на спецификациях, которые со временем развиваются, что оставляет многие вещи плохо или вообще не задокументированными.  Содержание1. Спецификации JSON  2. Тестирование парсинга 2.1. Структура 2.2. Числа (Numbers) 2.3. Массивы 2.4. Объекты 2.5. Строки 2.6. Двойственные значения RFC 7159  3. Архитектура тестирования  4. Результаты тестирования 4.1. Полные результаты 4.2. C-парсеры 4.3. Objective-C-парсеры 4.4. Apple (NS)JSONSerialization 4.5. Freddy (Swift) 4.6. Bash JSON.sh 4.7. Другие парсеры 4.8. JSON Checker 4.9. Регулярные выражения  5. Контент парсинга  6. STJSON  7. Заключение  8. Приложение "
PsyHaSTe;Сложность простоты;https://habr.com/ru/post/469441/;" Как я писал в предисловии предыдущей статьи, я нахожусь в поисках языка, в котором я мог бы писать поменьше, а безопасности иметь побольше. Моим основным языком программирования всегда был C#, поэтому я решил попробовать два языка, симметрично отличающиеся от него по шкале сложности, про которые до этого момента приходилось только слышать, а вот писать не довелось: Haskell и Go. Один язык стал известен высказыванием ""Avoid success at all costs""*, другой же, по моему скромному мнению, является полной его противоположенностью. В итоге, хотелось понять, что же окажется лучше: умышленная простота или умышленная строгость? Я решил написать решение одной задачки, и посмотреть, насколько это просто на обоих языках, какая у них кривая обучения для разработчика с опытом, сколько всего надо изучить для этого и насколько идиоматичным получается ""новичковый"" код в одном и другом случае. Дополнительно хотелось понять, сколько в итоге мне придется заплатить за ублажание хаскеллевского компилятора и сколько времени сэкономит знаменитое удобство горутин. Я старался быть настолько непредвзятым, насколько это возможно, а субъективное мнение приведу в конце статьи. Итоговые результаты меня весьма удивили, поэтому я решил, что хабровчанам будет интересно почитать про такое сравнение. "
m1rko;Обработка 40 ТБ кода из 10 млн проектов на выделенном сервере с Go за $100;https://habr.com/ru/post/470852/;"Написанной мной инструмент командной строки Sloc Cloc and Code (scc), который теперь доработан и поддерживается многими отличными людьми, подсчитывает строки кода, комментарии и оценивает сложность файлов внутри каталога. Здесь нужна хорошая выборка. Инструмент подсчитывает в коде операторы ветвления. Но что такое сложность? Например, заявление «У этого файла сложность 10» не очень полезно без контекста. Чтобы решить эту проблему, я запустил scc на всех исходниках в интернете. Это также позволит найти какие-то крайние случаи, которые я не рассматривал в самом инструменте. Мощное испытание методом грубой силы.  Но если я собираюсь запустить тест на всех исходниках в мире, это потребует много вычислительных ресурсов, что тоже интересный опыт. Поэтому я решил всё записать — так и появилась эта статья.  Короче говоря, я загрузил и обработал много исходников.  Голые цифры:   9 985 051 репозиториев всего  9 100 083 репозитория хотя бы с одним файлом  884 968 пустых репозиториев (без файлов)  3 500 000 000 файлов во всех репозиториях  Обработано 40 736 530 379 778 байт (40 ТБ)  Идентифицировано 1 086 723 618 560 строк  Распознано 816 822 273 469 строк с кодом  124 382 152 510 пустых строк  145 519 192 581 строк комментариев  Общая сложность по правилам scc: 71 884 867 919  2 новые ошибки, найденные в scc "
Gim6626;FOSS News №30 – дайджест новостей свободного и открытого ПО за 17–23 августа 2020 года;https://habr.com/ru/post/516292/;"  Всем привет!  Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Этот выпуск получился особенно серьёзным по уровню поднятых вопросов. Разбираем проблемы Mozilla и рассматриваем вопрос почему это касается не только одной компании, отмечаем 20-летие FreeBSD Foundation, узнаём об основании отдельного от Mozilla фонда Rust Foundation, радуемся появлению нового свободного драйвера для NTFS от российских разработчиков, изучаем как разработчики Linux смогли успешно выпустить недавний большой релиз, холиварим (или нет) на тему дизайна и удобства для пользователей свободного ПО и ещё узнаём много другого нового."
Gim6626;FOSS News №66 – дайджест материалов о свободном и открытом ПО за 12–18 апреля 2021 года;https://habr.com/ru/post/553086/;"  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы выпуска:  Столлман признал ошибки и пояснил причины непонимания, Фонд СПО объяснил решение о возвращении RMS в совет директоров; создана некоммерческая организация Open-Source FPGA Foundation (OSFPGA) для продвижения ПЛИС с открытым исходным кодом; Amazon представил OpenSearch, форк платформы Elasticsearch; Linux Foundation запускает исследовательское подразделение для изучения экосистем с открытым исходным кодом и их воздействия; проблемы безопасности программ с открытым исходным кодом, соответствия лицензий и обслуживания распространены во всех отраслях; поддержка Rust для ядра Linux столкнулась с критикой Торвальдса; Inspur, крупнейший в Китае поставщик облачного оборудования, присоединяется к консорциуму по защите патентов с открытым исходным кодом; что означает решение Верховного суда США о Java API для открытого исходного кода и облачных технологий  И многое другое..."
denis-19;GitHub опубликовал ежегодный статистический отчет;https://habr.com/ru/news/t/475094/;"  Веб-сервис для хостинга IT-проектов и их совместной разработки GitHub опубликовал сводный отчет за прошедший год с анализом разнообразной внутренней статистики по многим направлениям разработок, а также возможностям и достижениям своих пользователей. Оказалось, что Python теперь на втором месте в рейтинге популярности языков программирования, используемых на GitHub, Java сместился на третье место, а лидером остается JavaScript. Количество пользователей GitHub возросло на 25%, а основные страны, где проживают пользователи сервиса — США, Китай и Индия. "
tangro;Будущее WebAssembly в виде «дерева навыков»;https://habr.com/ru/company/infopulse/blog/428347/;"Некоторые люди как-то неправильно поняли WebAssembly. Есть те, кто считает, что раз браузеры уже поддерживают выполнение WebAssembly (ещё с 2017 года), значит всё уже готово. Даже и близко ещё нет, готов лишь MVP (минимально жизнеспособный продукт). Я могу предположить откуда произрастает корень этого заблуждения: после релиза MVP его разработчики пообещали поддерживать обратную совместимость на уровне «любой написанный сейчас код будет работать и в будущем». Но это ведь не значит, что разработка WebAssembly закончена, совсем нет! Множество фич разрабатывается прямо сейчас и планируется к разработке в ближайшем будущем. И когда они будут реализованы — всё очень сильно изменится.  Все эти фичи можно попробовать представить себе в виде дерева навыков в какой-нибудь игре. У нас есть пару «базовых» (уже реализованные фичи) и целое дерево со множеством веток и листьев, которые будут со временем открываться, давая нам всё больше и больше могущества.  Давайте посмотрим на то, что у нас уже есть сейчас и что нам ещё предстоит открыть. (Под катом много картинок, трафик)"
ru_vds;Wasm или не Wasm?;https://habr.com/ru/company/ruvds/blog/510904/;"Мы, в компании Linkurious, занимаемся работой над Linkurious Enterprise. Это — веб-платформа, которая, используя возможности графов и средства их визуализации, призвана помогать компаниям и органам власти, расположенным по всему миру, бороться с финансовыми преступлениями.  Одна из главных возможностей Linkurious Enterprise — это простой в освоении и использовании интерфейс визуализации графов, рассчитанный на неспециалистов.    В 2015 году, разочарованные возможностями существующих JavaScript-библиотек для визуализации графов, мы приступили к разработке собственной библиотеки — Ogma.  Ogma — это JS-библиотека, отличающаяся высоким уровнем производительности в плане рендеринга и выполнения вычислений, которая нацелена на визуализацию сетевых структур. Возможно, вы видели, как сетевые структуры визуализируются с помощью других JavaScript-инструментов, вроде D3.js или Sigma.js. Нам возможностей этих инструментов не хватало. Нам было важно, чтобы используемое нами решение обладало бы некоторыми специфическими возможностями, чтобы оно соответствовало бы определённым требованиям к производительности. Ни того, ни другого в сторонних библиотеках мы не нашли. Поэтому мы и решили разработать собственную библиотеку с нуля."
Gim6626;FOSS News №65 – дайджест материалов о свободном и открытом ПО за 5–11 апреля 2021 года;https://habr.com/ru/post/551870/;"  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. ИСП РАН займётся повышением защиты Linux и поддержанием отечественной ветки ядра Linux; Google одержал победу в разбирательстве с Oracle, связанном с Java и Android; KDE взял на себя продолжение сопровождения общедоступной ветки Qt 5.15; Signal добавит функцию платежей криптовалютой; Rust включён в число основных языков для разработки платформы Android; обзор и финальное мнение о дистрибутиве Deepin 20.2 и многое другое."
dimansny;Удалённая разработка в VS Code: ваша жизнь никогда не будет прежней;https://habr.com/ru/post/454280/;У нас в TestMace Visual Studio Code является одним из самых популярных инструментов. И тем более отрадно, что он развивается семимильными шагами. Вашему вниманию предлагается перевод статьи об еще одной вкусной фиче, которая доступна пока только в VS Code Insiders. Согласен, немного переборщил с заголовком, просто меня переполняют эмоции. Я решил поделиться своими первыми впечатлениями от удалённой разработки в VS Code, на момент написания статьи доступной в VS Code Insiders.
Gim6626;FOSS News №62 – дайджест материалов о свободном и открытом ПО за 22-28 марта 2021 года;https://habr.com/ru/post/549392/;"  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Продолжение конфликта вокруг Ричарда Столлмана и Фонда СПО; Линус Торвальдс рассказал о том, где Rust впишется в Linux; представлены самые популярные проекты GitHub на данный момент; когда-то Open Source сражался с большими компаниями, а теперь стал их полем битвы; «Представь, что ты нашел решение, про которое можешь сказать: оно лучшее в мире» (интервью с создателем ClickHouse); Garuda Linux или Arch Linux на стероидах (обзор и первое впечатление); состоялась конференция «Админка», где я принимал участие и рассказывал в том числе про FOSS News, и многое другое."
SharplEr;Как извлечь пользу из статической типизации;https://habr.com/ru/post/550958/;Эта статья о том, как извлечь максимум пользы из статической системы типов при дизайне вашего кода. Статья пытается быть language agnostic (получается не всегда), примеры на Java и взяты из жизни.
Zalina;Какой язык программирования больше всего любят в Яндексе? И всегда ли любовь взаимна;https://habr.com/ru/company/yandex/blog/230775/;"Сегодня мы хотим продолжить серию постов, в которых задаём разработчикам из Яндекса и пользователям Хабра самые острые для любого программиста вопросы. Сегодня это вопрос о том, какой язык программирования для вас любимый.  В любой компании, где есть разработчики, периодически возникают споры о том, ужасен Perl или прекрасен, обязательно ли знать функциональные языки или нет, насколько мотивирован выбор C++, с какого языка программирования нужно начинать учиться и т.п.  А если сотрудников в этой компании несколько тысяч, масштаб бедствия становится поистине грандиозным. Когда я пришла к тем своим коллегам, которых вы увидите в этом посте, то думала, что и причины для любви и ненависти у них будут отличаться. Но оказалось, что все ещё интереснее.     Многие из тех, с кем я говорила, знакомы вам по постам в блоге Яндекса на Хабре: anatolix, kappa, bobuk, yafinder, styskin. Несмотря на то, что многие участники нашего опроса стали руководителями, они продолжают писать код. Под катом можно прочитать подробные ответы, не полностью попавшие в видео, и рассказать, что вы думаете по теме. "
divan0;Сложно о простоте Go;https://habr.com/ru/post/261339/;Читая о языке Go, вы часто будете слышать слово “простота”. Но разные люди трактуют это слово по разному, особенно в контексте разработки ПО, а многие, зачастую, даже не осознают, почему это вообще используется, как характеристика языка. В этой статье мы попытаемся концептуально подойти к вопросу “сложности” и “простоты” в разработке ПО, и посмотрим, почему и зачем язык Go поставил простоту как краеугольный камень своего дизайна.  
baubaubau;100 cамых ценных репозиториев GitHub [по версии алгоритма UOS];https://habr.com/ru/post/453444/;Привет, Хабр! Представляю вашему вниманию подборку — перевод статьи из Hackernoon «GitHub’s Top 100 Most Valuable Repositories Out of 96 Million». А саму статью написали ребята, которые использовали алгоритм U°OS Network, чтобы выявить самые ценные оупесорсные проекты на Github.  
sfxws2006;Как я пришел к формальной спецификации RISC-V процессора на F#;https://habr.com/ru/post/473714/;Томными зимними вечерами, когда солнце лениво пробегало сквозь пелену дней — я нашел в себе силы заняться реализацией давней мечты: разобраться как же устроены процессоры. Эта мечта привела меня к написанию формальной спецификации RISC-V процессора. Проект на Github 
ru_vds;Мониторинг качества воздуха с использованием Raspberry Pi 4, датчика Sensirion SPS30 и Microsoft Azure;https://habr.com/ru/company/ruvds/blog/527234/;В материале, перевод которого мы публикуем сегодня, речь пойдёт о том, как подключить датчик качества воздуха Sensirion Particulate Matter Sensor SPS30 к Raspberry Pi 4, и о том, как, пользуясь возможностями Microsoft Azure, представить сведения о качестве воздуха в удобном для восприятия виде.  
ru_vds;Создатели популярного менеджера паролей приветствуют пользователей Linux в семье 1Password;https://habr.com/ru/company/ruvds/blog/558606/;"Ожидание окончено. Вышла официальная версия 1Password для Linux.  Поддержка Linux, несомненно, была наиболее востребованной возможностью 1Password. Все мы, те, кто работает над 1Password, взволнованы и восхищены двумя вещами. Во-первых — мы смогли дать членам сообщества Linux, людям, увлечённым своим делом, нашу разработку — самый любимый в мире менеджер паролей. Во-вторых — наш проект основан на умопомрачительных опенсорсных наработках.  Сегодня мы расстилаем красную дорожку для наших друзей из мира Linux.    Я знаю о том, что многие из вас уже давно используют 1Password в браузере для генерирования и хранения криптографически стойких, уникальных паролей. И мы можем гордиться тем, как хорошо работает такой вариант нашей программы. Но ничто не сравнится с полнофункциональным настольным приложением, которое умеет пользоваться всем тем, что может предложить операционная система. Особенно — если такое приложение может повысить и удобство работы с браузерным вариантом программы (спойлер: так оно и есть).  Давайте прогуляемся по красной дорожке и посмотрим, что ждёт нас в Linux-версии 1Password."
Andrey2008;Tizen: подводим итоги;https://habr.com/ru/company/pvs-studio/blog/334172/;Наша команда написала три заметки, связанные с анализом кода операционной системы Tizen. Операционная система содержит много кода и поэтому является благодатной почвой для написания различных статей. Думаю, что к Tizen мы ещё вернёмся в будущем, но сейчас нас ждут другие интересные проекты. Поэтому я подведу некоторые итоги проделанной работы и отвечу на ряд вопросов, возникших после опубликованных ранее статей.
m1rko;Мой компилятор для Lisp;https://habr.com/ru/post/446808/;"Очень рад объявить о завершении моего первого компилятора для языка программирования! Malcc — это инкрементальный AOT-компилятор Lisp, написанный на C.  Вкратце расскажу о его многолетней разработке и что я узнал в процессе. Альтернативное название статьи: «Как написать компилятор за десять лет или меньше».  (В конце есть TL;DR, если вас не волнует предыстория)."
ru_vds;Wasmer: самая быстрая Go-библиотека для выполнения WebAssembly-кода;https://habr.com/ru/company/ruvds/blog/454518/;WebAssembly (wasm) — это переносимый бинарный формат инструкций. Один и тот же код wasm-код может выполняться в любой среде. Для того чтобы поддержать данное утверждение, каждый язык, платформа и система должны быть в состоянии выполнять такой код, делая это как можно быстрее и безопаснее.  
olegchir;«Сравнивать языки программирования по принципу «лучше-хуже» — совершенно идиотское занятие»;https://habr.com/ru/company/jugru/blog/469531/;"  Disclaimer: да, в понедельник мы опубликовали хабрапост с именно таким сравнением языков. Нет, мы не сошли с ума. Всё идёт по плану. Виталий Брагилевский совмещает в себе знания о теоретической информатике и актуальную программистскую практику. Он преподает дисциплины, связанные с теоретической информатикой, является членом комитета по стандартизации Haskell и входит в наблюдательный комитет по разработке Haskell-компилятора GHC.   Эта хабрастатья — большое интервью с Виталием на следующие темы:    Преподавание и знакомство с JavaScript;  Зачем выбирать Haskell;  Место функциональных языков в жизни программиста;  Чего хорошего в JavaScript и как он развивается;  Что появится в языках программирования в ближайшие 10-15 лет;  Какие языки программирования вызывают доверие и почему;  В чем разница между научными конференциями и конференциями для разработчиков. Зачем преподавателю вообще на них ходить;  Важно ли читать программисту, устаревают ли книги и какие из них must read.   Интервью ведут члены Программного комитета конференции HolyJS 2019 Moscow, Алексей Золотых и Артём Кобзарь. Если интервью вам недостаточно, то уже совсем скоро, на следующей HolyJS, Виталий расскажет и покажет на примерах, как связать JavaScript с теорией алгоритмов. "
ru_vds;Прости, React, но я так больше не могу;https://habr.com/ru/company/ruvds/blog/508654/;"Недавно мне попалась фраза «усталость от JavaScript», «JavaScript fatigue», и я мгновенно понял, что это — про меня.  Последние несколько лет я делал всё возможное для того чтобы поспевать за новшествами экосистемы React, и, если брать выше, за новшествами JavaScript, где изменения происходят с умопомрачительной скоростью.    Я, большую часть этого времени, ещё и обещал себе выучить какие-нибудь новые языки, попробовать новые технологии, в общем — сделать что-то такое, что выведет меня из зоны комфорта, в центре которой был JavaScript.  Но я, почти всегда, ничем таким не занимался. Дело тут было в том, что React и JavaScript, если стремиться быть в курсе всего, что в этих сферах происходит, отнимают слишком много сил и времени. Иногда я по-настоящему опасался того, что мои знания и навыки могут устареть. Всё это оставляло мне очень мало времени на то, чтобы исследовать что-то новое."
Siemargl;Самый быстрый компилятор aka compiler-benchmark;https://habr.com/ru/post/527874/;"От переводчика: все началось с топика на форуме D. После оценки скорости компиляции D по сравнению с другими языками мне было интересно, существует ли какой-нибудь язык, который компилируется в нативный код почти так же быстро или быстрее, чем D, за исключением C? Если да, то скорее всего, он должен использовать бэкэнд, отличный от LLVM. Я думаю, что Jai способен на это, но он еще не вышел в релиз.Бенчмарки скорости компиляции различных комбинаций языков и компиляторов. Поддерживаемые языки: Компиляторы в нативный код  C (gcc, clang и cproc), C++ (g++ и clang++), D (dmd ldmd2, и gdc), Go (go и gccgo), Swift (swiftc), Rust (rustc), Julia (julia). Ada (gnatgcc), Zig (zig),  V (v), Vox (vox), C3 (c3c), "
host_m;Нужна ли нам замена языка C?;https://habr.com/ru/company/vdsina/blog/532416/;"Язык программирования C даже сегодня находится в списке наиболее популярных используемых языков, несмотря на то, что он был выпущен аж в 1972 году и по современным стандартам имеет довольно много ограничений и изъянов.   Популярность языков программирования в 2020 по индексу TIOBE  И это основная причина, по которой C нужно заменить. На C/C++ написано слишком много критически важного ПО, что имеет обширные последствия. Один из примеров — баги в библиотеках наподобие OpenSSL. Язык C печально известен возникновением таких проблем, как переполнения буфера. C — это язык, позволяющий выстрелить себе в ногу слишком большим количеством способов."
owlofmacloud;30 лет Линукса. Интервью с Линусом Торвальдсом. Часть 1;https://habr.com/ru/company/macloud/blog/555618/;"  Тридцать лет назад Линусу Торвальдсу был 21 год, он был студентом Хельсинского университета. Именно тогда он впервые выпустил ядро Linux. Анонс этого события начинался так: «Я делаю (свободную) операционную систему (просто в качестве хобби, большой и профессиональной она не будет…)». Три десятилетия спустя все топ-500 суперкомпьютеров в мире работают под Linux, равно как и более 70% всех смартфонов. Linux явно стал и большим, и профессиональным. "
ru_vds;Почему я всё ещё люблю C, но при этом терпеть не могу C++?;https://habr.com/ru/company/ruvds/blog/562530/;"Мне на удивление часто приходится говорить о том, почему мне всё ещё нравится язык C, и о том, почему я плохо отношусь к C++. Поэтому я решил, что мне стоит об этом написать, а не снова и снова повторять одно и то же.    Как это обычно бывает у C-программистов, язык C не был ни моим первым языком, ни языком, после которого я уже не изучал ничего другого. Но мне всё ещё нравится этот язык, и когда мне нужно писать программы — я выбираю именно его. Правда, в то же время, я стараюсь быть в курсе того, что происходит в мире современных (и не очень) языков программирования. Я слежу за тенденциями в этой сфере и пишу собственный хобби-проект, связанный с мультимедийными технологиями, на Rust. Почему же я до сих пор не поменял C на что-то более современное? И при чём тут C++?"
grigoryvp;Python и Ruby под нагрузкой: высокое искусство некромантии;https://habr.com/ru/company/oleg-bunin/blog/576160/;Уже больше 20 лет я пишу код на разных языках программирования. Так как многие из этих языков считаются мертвыми, то сегодня я буду говорить о высоком искусстве некромантии — о том, как якобы мертвые языки используются в больших и иногда высоконагруженных проектах. Обрабатывая тысячи веб-запросов в секунду и не порождая необходимости писать свой компилятор PHP или переходить на Go или Rust.Я расскажу про специфику Ruby и Python при высоких нагрузках, про их мейнстрим, который вы можете встретить в выживших проектах. Я не буду и не хочу говорить про спортивное программирование, где делают миллион запросов в секунду на одной ноде, выжигая из Python или Ruby всё и оставляя голый С. Python и Ruby действительно медленные, у них есть GIL, но при правильном использовании это не проблема, а статья расходов — и я расскажу, что мы можем получить за эти деньги.Если вы предпочитаете слушать или смотреть (у меня там забавные крылья!) — видео моего выступления на конференции HighLoad++ Весна 2021.
NeoCode;Мысли об идеальном языке программирования;https://habr.com/ru/post/257875/;"  В данной статье я хотел бы поделиться своими мыслями об идеальном языке программирования общего назначения. В первую очередь — о языке, который мог бы заменить С++.  Так случилось, что языки программирования — мое хобби и мой основной интерес в сфере IT. Наверное, любой программист иногда мечтает создать свой собственный — идеальный — язык программирования. Для меня это нечто большее, чем просто мечта, фактически я уже давно собираю всю информацию по различным языкам и проектирую свой собственный язык.  На разных ресурсах я регулярно высказываюсь по вопросам этой тематики. В этой статье я попытался собрать основные мысли воедино. Мы рассмотрим основные недостатки С++, особенности других языков, которые так или иначе можно сравнивать с С++, и — самое интересное — потребности программистов в языковых фичах, на примере библиотеки Boost.  Данная статья не претендует на какую-то техническую полезность (хотя если она будет кому-то полезна, это замечательно). Это статья — приглашение к обсуждению. "
Developers_Relations;GDG DevFest Нижний Новгород 2016: как это было;https://habr.com/ru/company/google/blog/319598/;"10 декабря прошел 2-ой Нижегородский GDG DevFest в Нижегородском технопарке Анкудиновка. Наша dream team спасла 300+ разработчиков от зимней стужи и информационного голода.     Мы не собираемся успокаиваться и расслабляться — продумываем новые митапы по Android, Firebase, Internet of Things, Virtual and Augmented Reality, Machine Learning итп Ну, и конечно, мы уже думаем о GDG DevFest 2017. Предстоящий год будет богатым на события от GDG NN! А пока о том, как проходил DevFest NN 2016 читайте ниже (warning: много фотографий). "
scalavod;Борьба с проверкой заимствования;https://habr.com/ru/post/319808/;Один из наиболее частых вопросов у новичков «Как мне угодить проверке заимствования?». Проверка заимствования — одна из крутых частей в кривой обучения Rust и, понятно, что у новичков возникают трудности применения этой концепции в своих программах. Только недавно на сабредите Rust появился вопрос «Советы как не воевать с проверкой заимствования?». Многие члены Rust-сообщества привели полезные советы как избежать неприятностей связанных с этой проверкой, советы, которые проливают свет на то, как вы должны проектировать свой код на Rust (подсказка: не так, как вы это делаете на Java). В этом посте я постараюсь показать несколько псевдо-реальных примеров распространенных ловушек.
safinaskar;UNIX-подобные системы содержат кучу костылей. Крах «философии UNIX»;https://habr.com/ru/post/321652/;"UPD от 2017-03-04: кто-то выполнил английский перевод. Обсуждение на Hacker News.  В первой части статьи перечислю кучу костылей UNIX, и вообще разных недостатков. Во второй — про «философию UNIX». Статья написана наскоро, «полировать» дальше не хочу, скажите спасибо, что написал. Поэтому многие факты привожу без ссылок.  Костыли в UNIX начали возникать ещё с момента появления UNIX, а это было ещё раньше появления не только Windows, но даже вроде бы Microsoft DOS (вроде бы, мне лень проверять, проверяйте сами). Если лень читать, хотя бы просмотрите все пункты, что-нибудь интересное найдёте. Это далеко не полный список, это просто те косяки, который я захотел упомянуть."
spmbt;Раскрываем тему WebAssembly с Бренданом Айком;https://habr.com/ru/post/326276/;"(Прим. перев.: технологии asm.js и WebAssembly ещё не вышли в практическую плоскость, о них регулярно идут сдержанные сигналы с самых верхов Олимпа разработки веб-технологий (Mozilla, Microsoft, Google), но многие об их состоянии знают мало. Значит, самое время — узнать о них сейчас.  Представлено интервью Брендана Айка, сделанное 31 марта 2017 года Оно — на 1.5 часа, но 2-я половина — про проект браузера Brave, не относится к компиляторам JS), создателя Javascript и журналистов из SE Daily."
azymohliad;Внутри супер-быстрого CSS-движка: Quantum CSS (aka Stylo);https://habr.com/ru/post/336722/;Привет, Хабр! Представляю вашему вниманию перевод статьи Inside a super fast CSS engine: Quantum CSS (aka Stylo) автора Лин Кларк. Вы возможно слышали о Project Quantum… Это проект по существенной переработке внутренностей Firefox с целью ускорить браузер. По частям мы внедряем наработки нашего экспериментального браузера Servo и значительно улучшаем остальные элементы движка. Проект сравнивался с заменой самолетного двигателя на лету. Мы вносим изменения в Firefox компонент за компонентом, так что оценить их эффект можно в очередном релизе браузера сразу по готовности.   Прим. переводчика: под катом много иллюстраций. Все они кликабельные (для просмотра в большем разрешении). Если Вы наткнетесь на неточности перевода и другие ошибки — буду благодарен, если сообщите об этом в комментариях или в личку.
ru_vds;Как работает JS: особенности и сфера применения WebAssembly;https://habr.com/ru/company/ruvds/blog/343568/;Сегодня мы представляем вам шестую часть серии материалов, которые посвящены особенностям работы всего того, что связано с JavaScript. Здесь мы поговорим о WebAssembly. А именно, детально проанализируем эту технологию, рассмотрим особенности её работы, а так же то, как она соотносится с обычным JavaScript в плане производительности. Речь пойдёт о времени загрузки кода, о скорости выполнения программ, о сборке мусора, об использовании памяти, о доступе к API платформы, об отладке, о многопоточности и о переносимости WebAssembly-кода. Эта технология, хотя и находится сейчас в самом начале своего развития, уже начала менять взгляды на разработку веб-приложений. Если разработчику нужна высочайшая производительность браузерного кода, ему просто необходимо познакомиться с WebAssembly.  
dm_wrike;Бег в мешках с завязанными глазами спиной вперед;https://habr.com/ru/company/wrike/blog/346684/;"Какой язык программирования самый быстрый — не всегда практичный, но крайне любопытный вопрос. Сайт benchmarksgame как раз об этом. Суть проекта в сравнении скорости языков программирования на ряде типовых задач. Надо сказать, что результаты не всегда предсказуемы. Что, если JavaScript такой же быстрый, как и C? Это же скандал!  Гордость и предубеждение Способность делать что-либо быстро всегда высоко ценится ее обладателем, зачастую независимо от качества исполнения. — Джейн Остин  На benchmarksgame часто ссылаются, чтобы доказать преимущества или недостатки того или иного языка программирования. Однако тут нужно быть аккуратным. Те, кто профессионально занимаются замерами производительности, знают, что в этом деле есть множество подводных камней, и можно легко попасть в просак. Например, виртуальной машине Java нужно некоторое время, чтобы прогреться. Соответственно на слишком коротких тестах результаты будут нерепрезентабельны. К счастью, с точки зрения статистики на сайте используется очень даже систематичный подход.  Но цифрам все равно нельзя верить, и вот почему.  "
olegchir;«Мы даже не пытаемся запустить старый код, такой задачи у нас не стоит в принципе» — Роман Елизаров о разработке Kotlin;https://habr.com/ru/company/jugru/blog/421607/;"Если хочешь в чем-то разобраться — учись сразу у лучших. Сегодня на мои вопросы отвечает бог корутин и concurrency, Рома elizarov Елизаров. Мы поговорили не только о Kotlin, как вы могли бы подумать, но ещё и о куче смежных тем:   Golang и горутины; JavaScript и его применимость для серьезных проектов; Java и Project Loom; олимпиадное программирование на Kotlin; как правильно обучаться программированию; и другие волнующие вещи.  "
ERatner;Swagger – умная документация вашего RESTful web-API — обзор Junior back-end developer-а для новичков;https://habr.com/ru/post/434798/;"  Предисловие Команда, в которой я сделала свои первые шаги на поприще написания промышленного кода, занималась разработкой удобного API к функциональности программного продукта на C# (для удобства назовем его, скажем, буквой E), существовавшего уже много лет и зарекомендовавшего себя на рынке с весьма положительной стороны. И здесь вроде бы у юного падавана пока не должно возникать вопросов, однако же представим себе, что ранее вы, скорей всего, конечно, писали собственные web-API, но вряд ли для широкой аудитории, а значит жили по принципу «Сам создал – сам пользуюсь», и если вдруг кого-то бы заинтересовала функциональность вашего API, то вы, наверное, кинули бы ему pdf-файл с подробной инструкцией (по крайней мере я бы сделала именно так). «Где посмотреть функционал апи» — спросила я тимлида ожидая получить ссылку на текстовый документ. «Загляни в Swagger» — ответил он.  "
shulyndina;Предварительная программа PyConRu-2019: два Python Core Developer’а, докладчики из Anaconda, Intel, JetBrains, Яндекса;https://habr.com/ru/company/it_people/blog/452302/;"Привет, Хабр!  24-25 июня в 95 км от Москвы пройдет седьмая российская конференция для python-программистов PYCON RUSSIA 2019.   Уже в программе: Raymond Hettinger (Python core developer, США), Michael Foord (Python core developer, Англия), Travis Oliphant (автор SciPy, NumPy, Anaconda, США), Antonio Cuni (PyPy core developer, Италия), Григорий Бакунов (Яндекс), Андрей Власовских (JetBrains), Кирилл Борисов (Booking.com), Вадим Пуштаев (Mail.Ru Group), Александр Хаёров (Chainstack), Иван Цыганов (Positive Technologies), Алексей Кузьмин (ДомКлик), Злата Обуховская (евангелист Moscow Python), Василий Литвинов (Intel). И это только предварительная программа.   Под катом — подробности программы."
jehy;Deno: время Node.JS уходит?;https://habr.com/ru/post/476972/; Прошло примерно 18 месяцев с внутреннего релиза Deno, вышел preview release, появилось несколько статей на Хабре, и Райан ездит по конференциям и рассказывает о нём. Однако я нигде так и не видел сколько-нибудь вдумчивого разбора этого проекта — почему-то все ограничиваются переводом документации... Что же, давайте попробуем это сделать сейчас. Последние 5 лет я пишу на Node.JS, а компания OneTwoTrip, где я сейчас работаю, пишет проекты на ноде около 9 лет (да, это я писал историю про 9 лет в монолите на ноде). Так что анализ должен выйти неплохой. Тем более что я его уже рассказал на Moscow Node.JS Meetup 10, и было интересно. Кстати, если вам удобнее слушать, а не читать, то послушать и посмотреть можно вот тут. Моё выступление второе, я чувак в розовой рубашке.
ITSumma;Мои отношения с опенсорсом;https://habr.com/ru/company/itsumma/blog/484846/;"  Автор и мейнтейнер нескольких опенсорсных проектов, Эндрю Галлант пытается снять напряжённость, которая в последнее время накопилась в части опенсорсного сообщества. Крики души «Каково быть мейнтейнером свободного ПО», «Неблагодарный opensource» и другие жалобы мейнтейнеров породили дискуссию об агрессивности, грубости, неблагодарности, эмоциональном выгорании и тяжести бескорыстной поддержки проектов. Пост опубликован 19 января 2020 года, — прим. пер.  Хочу отойти от традиции говорить почти строго на технические темы — и поделюсь частью личных отношений со свободным и открытым программным обеспечением (FOSS). Хотя все люди разные, надеюсь, что обмен мнениями поможет наладить взаимопонимание, сопереживание и доверие в нашем сообществе.  Прошу не рассматривать этот пост как прямую реакцию на действия любого другого мейнтейнера. Это не рецепт идеального поведения, а скорее личные размышления в надежде, что они станут поводом для других тоже поразмышлять о своих собственных отношениях с опенсорсом. Не существует единственного правильного пути к тому, чтобы стать хорошим мейнтейнером. У каждого свои способы, как с этим справиться.  Это ни в коем случае не призыв о помощи. Речь о понимании. Я не призываю изменить экономику FOSS или обсуждать моё психическое здоровье. Я не говорю о привлечении дополнительных мейнтейнеров. Просто хочу поделиться своей историей и попытаться увеличить эмпатию в сообществе FOSS.  Целевая аудитория: все, кто занимается опенсорсом."
saionaro;Разбираемся с управлением памятью в современных языках программирования;https://habr.com/ru/post/489360/;"Привет, Хабр! Представляю вашему вниманию перевод статьи «Demystifying memory management in modern programming languages» за авторством Deepu K Sasidharan.  В данной серии статей мне бы хотелось развеять завесу мистики над управлением памятью в программном обеспечении (далее по тексту — ПО) и подробно рассмотреть возможности, предоставляемые современными языками программирования. Надеюсь, что мои статьи помогут читателю заглянуть под капот этих языков и узнать для себя нечто новое.  Углублённое изучение концептов управления памятью позволяет писать более эффективное ПО, потому как стиль и практики кодирования оказывают большое влияние на принципы выделения памяти для нужд программы. "
ruvds;Как создатель node.js сам разочаровался в нем;https://habr.com/ru/company/ruvds/blog/548692/;" Несколько лет назад на JSConf 2018 выступил Райан Даль, создатель Node.js. Его доклад вызвал сенсацию, он затронул много актуальных проблем и поднял громкий хайп, не оставив равнодушным практически никого, кто связан с серверным программированием. В его обсуждении бэкэнд программисты разделились на два лагеря: одни отстаивали Node.js, другие прочили ему скорую смерть.   С момента выступления Райана прошло немногим больше двух лет, а в IT это целая эпоха, за время которой может поменяться еще не все, то очень многое. Давайте вспомним этот доклад и попробуем посмотреть, что изменилось с тех пор, кто был прав. "
sse;Как мы верифицированный полетный контроллер для квадрокоптера написали. На Ada;https://habr.com/ru/post/549688/;Однажды на новогодних каникулах, лениво листая интернет, бракоделы в нашем* R&D офисе заметили видео с испытаний прототипа роботакси. Комментатор отзывался восторженным тоном – революция, как-никак. Но тренированное ухо расслышало в шуме с испытательной площадки еще кое-что. Контроллер скорости (штука для управления тягой винтов) сыграл мелодию при старте, как это любят делать пилоты дронов, которые часто используют полётный контроллер Betaflight. Неужели там бета-флайт? Ну, или какая-то из ее немногих разновидностей.Перед глазами побежали флешбеки, где-то из глубин подсознания всплыла забытая уже информация о прошивках для Тойоты на миллионы тысяч строк Си и 2 тысячи глобальных переменных (Toyota: 81564 ошибки в коде).После просмотра исходного кода Betaflight на гитхабе стало еще страшнее, и чем дальше, тем хуже. Это – управляющая программа для тяжелого устройства с острыми винтами, которое летает высоко, быстро. Становится страшно: игрушки это одно, но я бы не хотел летать, на таком такси. Но ведь можно иначе? Можно, решили мы! И решили это доказать. На Avito был куплен акробатический FPV-“квадрик” на базе STM32F405, для отладки – Discovery-платы для этого же контроллера, а дальше все как в тумане..
Gim6626;FOSS News №70 – дайджест материалов о свободном и открытом ПО за 10–16 мая 2021 года;https://habr.com/ru/post/557888/; Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  Гвидо ван Россум намерен достигнуть двукратного увеличения производительности в CPython 3.11. Открытая клавиатура Launch от System76 перешла на стадию приёма предзаказов. IBM открыл CodeNet для систем машинного обучения, транслирующих и проверяющих код. Microsoft подготовил реализацию eBPF для Windows. «Пришло время и тебе встать на защиту Sci-hub».  И многое другое…
Gim6626;FOSS News №76 – дайджест материалов о свободном и открытом ПО за 21—27 июня 2021 года;https://habr.com/ru/post/564958/;  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  Linux Foundation представляет открытые стандарты для голосовых помощников. Проект Brave начал тестирование собственной поисковой системы. Windows 11 сможет легко запускать графические приложения для GNU/Linux и Android. Первый выпуск самостоятельного русскоязычного ответвления Linux From Scratch. 700 ИТ-специалистов со всей страны обучились работе с ОС «Альт» за полгода в Высшей инженерной школе. Google расширяет открытую базу данных уязвимостей и добавляет туда проекты на Python, Rust, Go и DWF. «Android окукливается, и сообщество потворствует этому».  И многое другое…
leventov;Статистика Github;https://habr.com/ru/post/235689/;" О публикации кода на Github или другом открытом хостинге часто говорят, как о такой живительной эвтаназии, после которой патчи, фиксы, сообщения о проблемах и прочие коммиты от сторонних разработчиков польются рекой. У меня пока противоположный опыт. В парочку моих относительно заметных проектов вообще никто и ничего реально не привнес, не говоря уж об остальных проектах. Более того, я несколько раз делал очень серьезные изменения/улучшения в чужие проекты, но их авторы морозились и не приняли изменения. Исходя из этого я развил теорию: мол, вся эта открытость и коллаборация — это красивые слова, реально все пилят что-то свое и зарабатывать деньги или пиар кому-то другому совершенно не горят желанием. Чтобы проверить теорию, я посчитал кое-какую статистику по всем репозиториям на Github, у которых больше 700 звездочек, таких чуть больше 4 тысяч.  "
Dreadatour;Типы данных наносят ответный удар;https://habr.com/ru/company/mailru/blog/242305/;"Это вторая часть моих размышлений на тему «Python, каким бы я хотел его видеть», и в ней мы более подробно рассмотрим систему типов. Для этого нам снова придётся углубиться в особенности реализации языка Python и его интерпретатора CPython.  Если вы программист на языке Python, для вас типы данных всегда оставались за кадром. Они где-то там существуют сами по себе и как-то там взаимодействуют друг с другом, но чаще всего вы задумываетесь об их существовании только когда возникает ошибка. И тогда исключение говорит вам, что какой-то из типов данных ведёт себя не так, как вы от него ожидали.  Python всегда гордился своей реализацией системы типов. Я помню, как много лет назад читал документацию, в которой был целый раздел о преимуществах утиной типизации. Давайте начистоту: да, в практических целях утиная типизация — хорошее решение. Если вы ничем не ограничены и нет нужды бороться с типами данных по причине их отсутствия, вы можете создавать очень красивые API. Особенно легко на Python получается решать повседневные задачи.  Практически все API, которые я реализовывал на Python, не работали в других языках программирования. Даже такая простая вещь, как интерфейс для работы с командной строкой (библиотека click) просто не работает в других языках, и основная причина в том, что вам приходится беспрестанно бороться с типами данных.  Не так давно поднимался вопрос добавления статической типизации в Python, и я искренне надеюсь, что лёд, наконец, тронулся. Постараюсь объяснить, почему я против явной типизации, и почему надеюсь, что Python никогда не пойдёт по этому пути.  "
divan0;Golang в AeroFS;https://habr.com/ru/post/264251/;"Перевод статьи инженера компании AeroFS о переводе их микросервис-архитектуры с Java на Go.  TLDR; Портировав некоторые наши микросервисы с Java на Go, мы уменьшили использование памяти на несколько порядков.  В начале была Java    Архитектура AeroFS Appliance состоит из многих микросервисов, и подавляющее большинство из них написаны на Java. Это никогда не создавало нам проблем, вся система обслуживает тысячи пользователей от разных клиентов без каких-либо проблем с производительностью. "
dm_wrike;Когда появится следующий большой язык программирования с точки зрения Дарвина;https://habr.com/ru/company/wrike/blog/323550/;"Good news everyone!  Futurama   Следующего большого языка программирования не предвидится. По крайней мере, на то нет причин с точки зрения теории эволюции.  Эволюция работает не только в животном мире, но и в любой подходящей среде. Впервые эта идея получила широкое распространение с выходом книги Ричарда Докинза «Эгоистичный ген» в 1976 году. В ней был введен знакомый каждому термин «мем», как пример эволюции в социальной и культурной среде. Языки программирования тоже эволюционируют. А значит их развитие подчиняется принципам эволюции, на основании которых можно сделать предположение о будущем их развитии.    "
Ankell;Глупый JS. Делаем фильтры «по красоте»;https://habr.com/ru/post/342922/;Привет. Мне 17 лет и я JS-разработчик. Возможно это приговор, а может быть это классическое приветствие в «Клубе анонимных JS-никовпрограммистов» — мне этого не узнать. Сейчас во многом моя работа заключается в работе с данными, их обработкой, фильтрами, сортировкой и так далее. Естественно, что я использую не нативный JS в проектах. Сегодня будем делать фильтры на чистом js-е. Увидим насколько это круто и быстро. Узнаем возможности es6 и сделаем рефакторинг кода. Заинтересованных прошу под кат.
deb;Краткий справочник информатики;https://habr.com/ru/post/344810/;"Область ИТ растёт, и легко заблудиться в зоопарке подходов, фреймворков и технологий, которые громко заявляют о своей ""новизне"" и ""эффективности"". Но за обёрткой обычно скрываются старые добрые идеи, заново ""изобретённые"" в другом контексте. В итоге распространяется не самая простая и эффективная, а самая разрекламированная реализация. Разработчики не успевают вдумчиво произвести выбор из-за постоянного недостатка времени, а менеджеры выбирают самое распространённое, чтобы снизить риски при поиске разработчиков. Для себя я стараюсь свести используемый в индустрии термин или технологию к простому определению или наглядному примеру. Предлагаю справочник, очень краткий, и поэтому неполный и не претендующий на точность."
HotWaterMusic;Постепенное программирование;https://habr.com/ru/post/352568/;"Программирование по своей сути является процессом инкрементальным (или постепенным, последовательным), и используемые нами языки программирования должны отражать этот факт. В данной статье рассматриваются несколько различных направлений, в которых движутся программные модели по мере своего развития, а также поднимается вопрос того, как потенциальные исследования в области юзабилити языков программирования послужат в будущем формированию концепции языков программирования, ориентированных на человека.Выбираем правильную задачу Какие серьёзные проблемы есть у языков программирования, которые мы используем в своей работе в 2018 году? Которые из них после решения смогут оказать наибольший эффект на следующее поколение программистов? Если вас заинтересовал данный вопрос, рекомендуем к прочтению пост Грейдона Хоара (создателя Rust) «Что дальше?», а также пост Стивена Диля «Ближайшее будущее языков программирования». Для меня в этом вопросе спрятана самая привлекательная черта исследований языков программирования — дело в том, что инструменты и теории, которые мы разрабатываем, влияют не только на одну конкретную область, но и потенциально на всех, кто занимается программированием. Отсюда же проистекает и следующий вопрос: откуда, скажите на милость, нам знать о нуждах каждого программиста, живущего на Земле? Легко работать над языком X, основанном на новой теории типов, или над языком Y, в котором есть новая «фича», интересная лично мне — но как насчёт всех остальных программистов?"
phillennium;Обзор докладов HolyJS 2018 Piter: от WebAssembly до Three.js;https://habr.com/ru/company/jugru/blog/354586/;"  Кто-то решает сходить на конференцию, как только её анонсируют: если уже был на ней в прошлом году и всё понравилось, то сомневаться не приходится. А кто-то принимает решение, когда готова программа конференции и можно точно понять, какие доклады хочется посетить.  Сегодня у нас материал для вторых. В программу HolyJS 2018 Piter (19-20 мая) ещё вносят последние штрихи, но по ней уже можно сделать окончательные выводы. Самые разные темы (от особенностей TypeScript и утечек памяти при использовании RxJS до портирования компиляторов JS на процессоры Эльбрус) — рассмотрели в этом посте всё, что уже известно о докладах HolyJS."
shurup;TiKV — распределённая база данных key-value для cloud native;https://habr.com/ru/company/flant/blog/421903/;"  28 августа организация CNCF (Cloud Native Computing Foundation), стоящая за Kubernetes, Prometheus и другими Open Source-проектами для современных облачных приложений, объявила о принятии нового продукта в свою «песочницу» — TiKV.  Эта распределённая, транзакционная база данных типа ключ-значение зародилась как дополнение к TiDB — распределённой СУБД, которая предлагает возможности OLTP и OLAP и обеспечивает совместимость с протоколом MySQL… Но давайте обо всём по порядку."
vorona_karabuta;Интервью со спикером конференции RubyRussia Маркусом Ширпом;https://habr.com/ru/company/railsclub/blog/424597/;Всем привет! Чуть больше, чем через неделю в Москве пройдет конференция RubyRussia. В сегодняшнем интервью разработчик из Evrone Михаил Моргунов пообщался с одним из наших спикеров — Маркусом Ширпом, создателем популярного инструмента Ruby Mutation Testing.   Первый вопрос — про Mutant. Что нам нужно знать об этом инструменте? О чем будет доклад на RubyRussia?
BitfuryRussia;Что почитать о блокчейн-технологиях: руководства, книги и статьи;https://habr.com/ru/company/bitfury/blog/425131/;"Мы собрали дайджест из материалов, посвященных принципам работы блокчейн-технологии и разработке децентрализованных приложений. В него вошли наши собственные статьи и ресурсы по теме, на которые рекомендовали обратить внимание резиденты Hacker News, Quora и Reddit.  В материалах под катом: что лежит в основе механизмов майнинга в биткойн-сети, как устроены деревья Меркла и как написать свое блокчейн-приложение на Java.  "
olartamonov;S for Security: безопасность в Интернете Вещей и доклады на InoThings++ 2019;https://habr.com/ru/company/oleg-bunin/blog/442696/;"— Шеф, у нас дыра в безопасности! — Ну хоть что-то у нас в безопасности...  Привет, Хабр!  В комментариях к предыдущему посту про InoThings++ высказали мнение, что в Интернете Вещей есть более важная для обсуждения область, нежели вмешательство государства — это область обеспечения безопасности устройств. Со всех точек зрения.  Поспорить я могу здесь лишь с одним — что обсуждение вопросов безопасности стоит проводить в формате круглого стола; по этой причине круглый стол оставим как есть, на тему нужности (или ненужности) национальных стандартов и вообще вмешательства государства в дела индустрии, а про безопасность поговорим отдельно.  Почему вообще обеспечение безопасности в IoT рассматривают как что-то отдельное и специфическое, непохожее на обеспечение безопасности в классических ИТ-системах?  Да в общем потому, что IoT-системы на классические похожи лишь со стороны пользователя, видящего на экране монитора красивые картинки или управляющего лампочкой со смартфона — а вот внутри, на низком уровне, они совсем, совсем другие.  И, к сожалению, мы ещё многократно хлебнём горя с авторами продуктов, не понимающими разницы в подходе и проблемах. "
zuzzas;Взгляд на технологии последнего десятилетия;https://habr.com/ru/company/flant/blog/482664/;"Прим. перев.: Эта статья, ставшая хитом на Medium, — обзор ключевых (за 2010-2019 годы) изменений в мире языков программирования и связанной с ними экосистемы технологий (особое внимание уделяется Docker и Kubernetes). Её оригинальным автором является Cindy Sridharan, которая специализируется на инструментах для разработчиков и распределённых системах — в частности, она написала книгу «Distributed Systems Observability» — и достаточно популярна в интернет-пространстве среди IT-специалистов, особенно интересующихся темой cloud native.    2019-й подошел к концу, поэтому я хотела бы поделиться своими мыслями о некоторых наиболее важных технологических достижениях и инновациях прошедшего десятилетия. Кроме того, я попытаюсь немного заглянуть в будущее и обозначить основные проблемы и возможности предстоящего десятилетия.  Хочу сразу оговориться, что в этой статье я не охватываю изменения в таких областях, как наука о данных (data science), искусственный интеллект, frontend engineering и т.п., поскольку лично у меня отсутствует достаточный опыт в них."
JagaJaga;Зависимые типы в Haskell: почему это будущее разработки программного обеспечения;https://habr.com/ru/post/485174/;" В Serokell мы занимаемся не только коммерческими проектами, но стараемся изменить мир к лучшему. Например, работаем над улучшением главного инструмента всех хаскелистов – Glasgow Haskell Compiler (GHC). Мы сосредоточились на расширении системы типов под впечатлением от работы Ричарда Айзенберга ""Зависимые типы в Haskell: теория и практика"".  В нашем блоге Владислав уже рассказывал о том, почему в Haskell не хватает зависимых типов и как мы планируем их добавить. Мы решили перевести этот пост на русский, чтобы как можно больше разработчиков могло использовать зависимые типы и сделать дальнейший вклад в развитие Haskell как языка."
DmtrKzmn;Какой язык программирования учить, чтобы за вами охотились HR крупных компаний;https://habr.com/ru/company/mailru/blog/495524/;"  Десять лет назад язык программирования PHP был в лидерах рейтингов, а сейчас проекты в веб все чаще написаны на JavaScript и Python. Обидно потратить на изучение языка год или два, а потом остаться без работы.  Мы в Mail.ru Cloud Solutions изучили аналитику, исследования, мнения разработчиков и крупных работодателей о том, какие языки программирования будут востребованы в ближайшие годы. И рассказываем, на что ориентироваться при выборе."
Pixonic;Облачный гейминг в России и СНГ: исследование GFN.RU;https://habr.com/ru/company/pixonic/blog/512904/;"Видеоигры уже давно занимают заметное место в списке развлечений современной аудитории. Однако необходимые для запуска игры мощности только растут — а значит, техника требует частого обновления, что может позволить себе не каждый желающий сыграть в ту или иную игру.   Тогда на помощь приходит облачный гейминг. Благодаря таким сервисам, как Sony PlayStation Now, Google Stadia и GeForce NOW, все больше современных игровых тайтлов становится доступно среднему пользователю ПК и мобильных девайсов. При этом сфера планирует только расширяться, и о запуске своих облачных игровых платформ уже заявили Microsoft, Electronic Arts, Nintendo, Amazon и Tencent.  Команда PwC при содействии сервиса GFN.RU — партнера NVIDIA GeForce NOW в России и СНГ — впервые провела исследование российского рынка облачного гейминга, а мы предоставляем здесь его выжимку.  "
Gim6626;FOSS News №39 – дайджест новостей и других материалов о свободном и открытом ПО за 19–25 октября 2020 года;https://habr.com/ru/post/524968/;"  Всем привет!  Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Развенчание слухов о переезде Windows на ядро Linux; выпуск Ubuntu 20.10; роль обучения и сертификации в Linux Foundation; почему важно чтобы облачные технологии были открытыми; как популяризовать использование Open Source; как вносить вклад в Open Source просто делая свою работу и многое другое."
host_m;Современные накопители очень быстры, но плохие API это не учитывают;https://habr.com/ru/company/vdsina/blog/530664/;"  Почти десять лет я проработал в компании, создающей довольно специализированный продукт — высокопроизводительные системы ввода-вывода. Я имел возможность наблюдать за быстрой и решительной эволюцией технологий хранения данных.  В этом году я сменил работу. Окружённый в новой большой компании инженерами, имевшими опыт в разных сферах работы, я удивился тому, что у каждого из моих коллег, несмотря на выдающийся ум, сложились ложные представления о том, как наилучшим способом использовать современные технологии хранения. Даже если они и были в курсе совершенствования технологий, такие представления приводили к созданию неоптимальных архитектур.  Поразмышляв о причинах этой неувязки, я понял, что в основном устойчивость таких заблуждений вызвана следующим: даже если они проверяли свои предположения при помощи бенчмарков, то данные показывали их (кажущуюся) истинность.  Вот самые распространённые примеры таких заблуждений:   «Вполне нормально скопировать память здесь и выполнить эти затратные вычисления, потому что это сэкономит нам одну операцию ввода-вывода, которая была бы ещё более затратной». «Я проектирую систему, которая должна быть быстрой. Поэтому она должна находиться в памяти». «Если мы разобьём эти данные на несколько файлов, то выполнение будет медленным, поскольку возникнут паттерны произвольного ввода-вывода. Нам нужно оптимизировать выполнение под последовательный доступ и осуществлять считывание из одного файла». «Прямой ввод-вывод очень медленный. Он подходит только для очень специализированных областей применения. Если у тебя нет собственного кэша, ты обречён».  Однако если изучить спецификации современных NVMe-устройств, то мы увидим, что даже в потребительском классе это устройства с задержками, измеряемыми в единицах микросекунд, и пропускной способностью в несколько ГБ/с, поддерживающие несколько сотен тысяч произвольных IOPS. Так в чём же нестыковка?"
PatientZero;Исполняемые PNG: запускаем изображения как программы;https://habr.com/ru/post/535292/;" Это изображение и одновременно программа  Несколько недель назад я читал о PICO-8, выдуманной игровой консоли, обладающей большими ограничениями. Особо мой интерес привлёк новаторский способ распространения её игр — кодирование их изображение PNG. В него включается всё — код игры, ресурсы, вообще всё. Изображение может быть любым: скриншоты из игры, крутой арт или просто текст. Чтобы загрузить игру, нужно передать изображение на вход программы PICO-8, и можно начинать играть.  Это заставило меня задуматься: наверно, будет круто, если получится сделать то же самое с программами в Linux? Нет! Я понимаю, вы скажете, что это тупая идея, но я всё равно ею занялся, и ниже представлено описание одного из тупейших проектов, над которыми я работал в этом году."
RushenRoshen;Рейтинг языков программирования 2021: доля Python падает, а TypeScript обошел С++, в лидерах JavaScript, Java, C#;https://habr.com/ru/post/543346/;Украинский профильный ресурс DOU.UA провел очередной ежегодный опрос о языках программирования, в рамках которого было собрано 7211 анкет (92% респондентов находятся в Украине). Из интересного - впервые с 2014 года у Python отрицательная динамика, наблюдается тенденция перехода с JavaScript на TypeScript, наиболее довольны пользователи Elixir, и наконец на графиках появился Rust. 
;;;"Современные технологии — сфера многообразная. Многие темы в ней бесконечно далеки друг от друга. Невозможно быть экспертом сразу во всех из них, но можно — в какой-то одной.   Именно статьи таких экспертов — подробные, сложные, узконаправленные; словом, лучшие — мы собрали для хабравчан в этой коллекции. Выбранные материалы отвечают на все вопросы по своей теме. Показывают, как лучше всего изложить свои знания, если вы профи. И подсказывают, из каких ещё источников читателю получить знания."
Siemargl;Современный C++ нас не спасет;https://habr.com/ru/post/554376/;"Я часто критикую небезопасные при работе с памятью языки, в основном C и C++, и то, как они провоцируют необычайное количество уязвимостей безопасности. Моё резюме, основанное на изучении доказательств из многочисленных крупных программных проектов на С и С++, заключается в том, что нам необходимо мигрировать нашу индустрию на безопасные для памяти языки по умолчанию (такие как Rust и Swift). Один из ответов, который я часто получаю, заключается в том, что проблема не в самих С и С++, разработчики просто неправильно их готовят. В частности, я часто получаю в защиту C++ ответ типа: ""C++ безопасен, если вы не используете унаследованную от C функциональность"" [1] или аналогичный, что если вы используете типы и идиомы современного C++, то вы будете застрахованы от уязвимостей типа повреждения памяти, которые терзают другие проекты.Хотелось бы отдать должное умным указателям С++, потому что они существенно помогают. К сожалению, мой опыт работы над большими С++ проектами, использующими современные идиомы, заключается в том, что этого даже близко недостаточно, чтобы остановить наплыв уязвимостей. Моя цель на оставшуюся часть этой заметки - выделить ряд совершенно современных идиом С++, которые порождают уязвимости."
a_belyaev;Тонкое искусство быть девелопер адвокатом;https://habr.com/ru/company/haulmont/blog/555902/;" От переводчика: профессия девелопер адвоката появилась не так давно и почти у каждого крупного продукта или технологии есть свой адвокат, технологические компании понимают важность этого канала общения с миром. Есть такая должность и в Haulmont. Когда мы формулировали требования к вакансии, нам самим пришлось отвечать на вопрос ""А что же должен делать девелопер адвокат?"" И эта статья простым языком и очень исчерпывающе на этот вопрос отвечает. Несколько лет назад я написал статью “Кто такой вообще этот девелопер адвокат?”, в которой постарался помочь людям в технической индустрии понять, что входит в эту роль. И до сих пор я получаю тонны вопросов про это в Твиттере. В этой статье я собираюсь пролить свет на роль Developer Advocate и в этот раз приведу конкретные примеры задач и обязанностей, которые я выполняю в своей ежедневной работе в качестве Senior Developer Advocate в Microsoft, а также в качестве человека, который занимается этим с 2015 года. "
m1el;Решаем вопрос сортировки в JavaScript раз и навсегда;https://habr.com/ru/post/559944/;Многим JavaScript разработчикам доводилось сортировать данные на стороне клиента.  К сожалению, существующие библиотеки имеют мелкие недостатки.  Но эти недостатки складываются и ограничивают то как программисты думают о сортировке.  Чтобы преодолеть эти ограничения, давайте рассмотрим сортировку в разных языках. Вооруженные этими знаниями, мы сможем выбрать наиболее удобный и строгий интерфейс.
Gim6626;FOSS News №82 – дайджест материалов о свободном и открытом ПО за 2—8 августа 2021 года;https://habr.com/ru/post/571804/; Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  Кис Кук из Google призвал модернизировать процесс работы над ошибками в ядре Linux. Открыт набор в бесплатную онлайн-школу для разработчиков Open Source. Опрос Stack Overflow: Rust назван самым любимым, а Python самым востребованным языком. ROS: стань контрибьютором самого большого Open Source проекта в робототехнике. 8 лучших альтернатив GitHub Copilot.  И многое другое…
ivan386;База данных в HTML;https://habr.com/ru/post/122554/;"Предыстория  Собственно меня давно просят сделать поиск для сайта. Там конечно очень мало чего искать, но как задел на ближайшее будущее. В планах добавление новых единиц для поиска. Этот туманный и не изученный мной альбион SQL отпугивал своей загадочностью. Но не в файлах же хранить данные. Стоп, а почему бы и нет? Поиск производить с помощью JavaScript. Я подумал о том, что можно в скрипт подгружать данные для поиска и т.д. Заразила меня эта идея, и, когда я приступил к написанию, подумал: «А зачем так усложнять? Пусть всё будет на странице, а пункты не подходящие по характеристикам будут просто скрываться». Заодно и страница поисковикам видна со всеми результатами. Пользователю доступны все данные сразу, и остаётся только выбирать автономно от сервера. Страницу можно сжать и в кэш положить на веки вечные. "
ivan386;NoScript фотоальбом;https://habr.com/ru/post/129945/;"Сейчас уже многие сайты не обходятся без JavaScript, и частенько приходится выключать NoScript для того чтобы, увидеть что же нам хотели показать. И вот я задался мыслью сделать легкий компактный фотоальбом на одной странице без JavaScript. Был использован лишь HTML и CSS.  Задача: 1 Большое изображение полностью занимает доступное пространство. 2 Миниатюры также максимально заполняют его. 3 Никаких кликов мышью (но можно и так) и прокручивания для просмотра следующего изображения (ну разве что если миниатюр больше чем на экран). 4 Просмотр с помощью клавиатуры и мыши. 5 Без скриптов. 6 С сохранением обратной совместимости. "
rgen3;Скрытые Марковские модели в распознавании речи;https://habr.com/ru/post/134954/;Самое быстрое и эффективное взаимодействие между людьми происходит посредством устной речи. С помощью речи могут быть переданы различные чувства и эмоции, а главное — полезная информация. Необходимость создания компьютерных интерфейсов звукового ввода-вывода не вызывает сомнений, поскольку их эффективность основана на практически неограниченных возможностях формулировки в самых различных областях человеческой деятельности.   
ivan386;Пусть css ищет или база данных в HTML 2;https://habr.com/ru/post/135339/;В прошлой статье я отказался от использования связки html + php + sql, оставив только html. Как и в прошлый раз, на html странице находится сразу все, что нам нужно, и остаётся только убрать лишнее, исходя из параметров поиска. Раньше мы это делали при помощи JavaScript, а теперь воспользуемся возможностями CSS. 
beduin01;Дайджест событий из мира D №2;https://habr.com/ru/post/270901/;В последнее время на Хабре стало много публикаций на тему Rust и Go и достаточно мало про D. Главной причиной этого является поддержка этих языков Mozilla и Google, которые могут вкладывать большие деньги в свои детища. За D не стоит ни одной столь же крупной компании, однако это не мешает языку активно развиваться. Сейчас я кратко расскажу о последних новостях языка и оставлю кому-то другому возможность провести комплексное сравнение Rust/Go и D. 
RoboForm;Дайджест интересных материалов для мобильного разработчика #134 (14-20 декабря);https://habr.com/ru/post/273537/;В новом дайджесте мы сравниваем Swift и Rust, оцениваем гайдлайны Apple, следим Xamarin.Forms, обновляем приложения в Google Play к Новому году, выводим в топ и смотрим за покупками.   
NeoCode;Кортежи в языках программирования. Часть 2;https://habr.com/ru/post/280608/;"В предыдущей части я рассмотрел реализации кортежей в различных языках программирования (причем я рассматривал компилируемые не скриптовые языки со статической типизацией и классическим си-подобным синтаксисом, что вызвало удивление у некоторых читателей). В этой части я предлагаю выйти за рамки существующего и заняться по сути дизайном языка программирования. Исходные данные — такие же: компилируемый не скриптовый язык со статической типизацией и си-подобным синтаксисом, включающий императивную парадигму (хотя и не ограничивающийся ею разумеется).  В этой части мы попробуем помечтать и поэкспериментировать — а что вообще можно сделать с кортежами? Как выжать из них максимум возможностей? Как с их помощью сделать язык программирования мощнее и выразительнее, как вызвать восхищение у истинных Хакеров Кода и при этом не слишком запутать обычных программистов? Какие неожиданные возможности появляются в языке, если правильно и грамотно экстраполировать семантику кортежей в разных направлениях, и какие затруднения при этом возникают?  Итак, если вам нравится размышения и холивары на тему дизайна языков программирования, то прошу под кат. "
zizop;DevConf-2016: программа конференции;https://habr.com/ru/company/devconf/blog/283340/;"  Прошли майские праздники, отгремели демонстрации и парады, а на DevConf собралось уже 48 заявок на доклады. В этом посте расскажу, какие секции будут представлены на конференции и какие заявки уже поступили. "
KsHoxton;Языку программирования Go — семь лет;https://habr.com/ru/company/mailru/blog/314834/;" Семь лет — важный возраст в жизни многих людей, символический рубеж нового этапа взросления, когда мы начинаем ходить в школу. Вроде бы семь лет — не так уж много, но всё-таки и не мало. Так что если языки программирования представить в виде людей, то сегодня мы празднуем день рождения первоклассника Go — ему исполнилось семь!  Что такое Go и чем он хорош, мы описывать не будем: кто в теме, знают и так, а остальные могут почитать в Википедии. Уже вчера мы поделились с вами полезным переводом 50 оттенков Go: ловушки, подводные камни и распространённые ошибки новичков, а сегодня передаём слово нашим разработчикам, пишущим на Go. В честь годовщины мы задали каждому из них три вопроса:   Почему ты выбрал Go (плюсы/минусы)? Что ты уже написал на Go? Как лучше изучать Go, что посоветуешь начинающим?  Вот что они ответили. "
tangro;Сложнейшая проблема компьютерных наук;https://habr.com/ru/company/infopulse/blog/318618/;"… это, конечно же, именование сущностей. И я говорю не только об именах переменных или новых технологий, нет. Мы не можем договориться даже о самых базовых терминах.  Тысяча диалектов Знаете ли вы, что спецификация языка программирования С часто упоминает термин «объект»? Нет, это не объект в том понимании, как он описывается в ООП — объект в С определяется как «блок данных в среде выполнения, содержимое которого может представлять некоторое значение». В этом понимании объекта имеет смысл говорить о, например, «объекте типа char».  Термин «метод» достаточно распространён, но вы можете встретить программистов, которые будут говорить исключительно «функция-член класса». Язык программирования Java, поэтому, то ли имеет, то ли не имеет функций, в зависимости от того, кого вы об этом спросите. Термины «процедура» и «подпрограмма» иногда используются как аналог «функции», но в некоторых языках программирования (например, Pascal) процедура это совершенно не то же самое, что функция.  Даже в рамках одного языка программирования мы, бывает, путаемся.  "
alinatestova;«Ваш следующий шаг к блокчейну»: релиз платформы Exonum от Bitfury Group;https://habr.com/ru/company/bitfury/blog/333446/;"Bitfury Group запускает свой собственный открытый фреймворк для разработки блокчейнов Exonum, который позволит компаниям и правительственным организациям воплощать в жизнь безопасные блокчейн-решения.  Технологию планируют применять для утверждения результатов выборов и защиты авторских прав создателей контента в цифровом пространстве. Exonum поможет «перевести» системы предоставления государственных услуг на Украине в блокчейн-среду. И платформа уже используется в Грузии, где на базе Exonum реализована регистрация прав собственности.   "
PatientZero;Простая работа со Steamworks;https://habr.com/ru/post/336910/;"  Unity, C#, Steamworks.NET и Facepunch.Steamworks Введение Как и большинству разработчиков игр, мне очень хочется выложить мою игру в Steam.  Как и большинству инди-разработчиков игр, мне не хватает доступа к ресурсам/знаниям, которые дали бы мне чётко понять, что же действительно значит «быть в Steam».  Сложно заполнить этот пробел в знаниях, потому что, несмотря на подробную документацию возможностей Steam, трудно понять, с чего начать в этом огромном хранилище документов и как связаны между собой его отдельные части. Кроме того, основные обсуждения платформы Steam проходят в закрытом форуме, доступном только для подтверждённых платформой через Steam Direct или реферальную ссылку Valve разработчиков. То есть для начинающих поиск ответов на простые вопросы может оказаться сложной задачей.  Поэтому я решил написать высокоуровневый обзор для людей, которые только начинают разбираться в том, как заставить Steam работать с их играми. В частности, я подробно рассмотрю Steamworks SDK, программную библиотеку Valve, предоставляющую доступ к таким аспектам, как мастерская (Workshop), таблицы лидеров (Leaderboards), достижения (Achievements) и так далее.  Steamworks хорошо задокументирована компанией Valve, но документация написана с точки зрения человека, использующего нативную библиотеку C++ и уже имеющего представление о том, как все эти функции пересекаются. Если это не ваш случай, то так даже лучше! Ниже представлено объяснение для другого человека, который пишет игру на языке более высокого уровня и просто хочет обеспечить простую интеграцию со Steamworks (а это возможно, я гарантирую!). Конкретнее, этот пост предназначен для людей, использующих в той или иной форме C#, а в идеале — работающих в игровом движке Unity."
m1rko;Что последует за вебом?;https://habr.com/ru/post/339112/;"В первой части я утверждал, что пришло время подумать, как заменить современную веб-платформу для приложений. Причины — её низкая производительность и в принципе нерешаемые проблемы безопасности.  Кое-кто решил, что я пишу слишком в негативном ключе и не обращаю внимания на положительные стороны веба. Так и есть: первая часть была в стиле «Обсудим факт, что мы попали в глубокую яму», а вторая часть — «Как разработать кое-что получше?» Это огромная тема, так что она на самом деле двумя частями не ограничится.  Назовём нашего конкурента вебу NewWeb (э, брендингом можно заняться потом). Для начала нужно понять, почему веб изначально стал успешным. Веб обошёл другие технологии создания приложений с лучшими инструментами для разработки GUI, так что у него явно есть какие-то качества, которые перевешивают недостатки. Если мы не будем соответствовать этим качествам, мы обречены."
m1rko;Производительность консолей и оболочек;https://habr.com/ru/post/346054/;"Есть хорошее демо MSR от 2012 года, которое показывает эффект времени отклика при работе на планшете. Если не хотите смотреть три минуты видео, они по сути создали устройство, которое симулирует произвольные задержки вплоть до доли миллисекунды. Задержка 100 мс (0,1 секунды), типичная для современных планшетов, выглядит ужасно. На 10 мс (0,01 секунды) задержка заметна, но уже можно нормально работать, а при задержке менее 1 мс всё просто идеально — как будто вы пишете карандашом по бумаге. Если хотите проверить это самостоятельно, возьмите любой Android-планшет со стилусом и сравните с нынешним поколением iPad Pro со стилусом Apple. У устройства Apple время отклика намного больше 10 мс, но разница всё равно кардинальная — она такая, что я реально использую новые iPad Pro для записи заметок и рисования диаграмм, в то время как Android-планшеты считаю совершенно неприемлемыми в качестве замены карандашу и бумаге.  Что-то похожее вы увидите в шлемах VR с разными задержками. 20 мс выглядит нормально, 50 мс лагает, а 150 мс уже непереносимо.  Странно, но редко приходится слышать жалобы на задержку ввода с клавиатуры или мыши. Казалось бы, причиной может быть то, что ввод с клавиатуры и мыши очень быстрый — и происходит практически мгновенно. Часто мне говорят, что так оно и есть, но я думаю, что ситуация совершенно обратная. Идея того, что компьютеры быстро реагируют на ввод данных — настолько быстро, что человек не замечает разницы — самое распространённое заблуждение, которое мне приходилось слышать от профессиональных программистов."
marks;Операционные системы Andromeda и Fuchsia — загадок от Google стало больше;https://habr.com/ru/post/370183/;"  Летом прошлого года в сети появилась информация о том, что корпорация Google разрабатывает новую операционную систему, основой которой не является ядро Linux. О разработке компании стало известно уже после того, как инженеры Google изрядно продвинулись в развитии проекта. Коммиты появлялись с завидной регулярностью, и сторонние разработчики начали внимательно изучать содержимое репозитория с названием Fuchsia.   Оказалось, что эта ОС основана на (L)ittle (K)ernel и Magenta. Первое — небольшая ОС, предназначенная для небольших низкопроизводительных устройств. Magenta же используется в современных мобильных устройствах и персональных компьютерах с продвинутой конфигурацией. Fuchsia, насколько можно понять, является гибридной платформой. Сейчас изучение этой операционной системы продолжается. Кроме того, в прошлом году стало известно еще об одной инициативе компании. Речь идет о новой модели ноутбука Pixel, который Google собирается представить в третьем квартале этого года. "
Tenphi;Знай свой JIT: ближе к машине;https://habr.com/ru/company/oleg-bunin/blog/417459/;"До того, как написанный нами код будет исполнен, он проходит довольно долгий путь. Андрей Мелихов в своем докладе на РИТ++ 2018 разобрал каждый шаг на этом пути на примере движка V8. Заходите под кат, чтобы выяснить, что даёт нам глубокое понимание принципов работы компилятора и как сделать JavaScript код производительнее.    Узнаем, является ли WASM серебряной пулей для повышения производительности кода, и всегда ли оправданы оптимизации.  Спойлер: «Преждевременная оптимизация — корень всех бед», Дональд Кнут.    О спикере: Андрей Мелихов работает в компании Яндекс.Деньги, активно пишет на Node.js, а в браузере — меньше, поэтому ему ближе серверный JavaScript. Андрей поддерживает и развивает сообщество devShacht, заходите познакомиться на GitHub или Medium."
olegchir;«Не надо скромничать. Пробуй!». Интервью о жизни, компиляторах и жизни в компиляторах с Alexandre Mutel из Unity;https://habr.com/ru/company/jugru/blog/429242/;"Как добиться успеха в системном программировании, что нужно знать и понимать, особенно если ты работаешь уже третий десяток лет? C# и перформанс — cтоит ли переписывать на C# всё что видишь? Какое будущее в смысле низкоуровневых компиляторных технологий нас ждёт?  Сегодня в нашей виртуальной студии на вопросы отвечает Alexandre Mutel.   Alexandre Mutel работает на должности Lead Software Architect в Unity Technologies. Кроме того, он известный в опенсорсе разработчик, контрибутящий в SharpDX, Markdig, Zio и другие проекты, а с 2014 года — MVP в категории «Visual Studio and Development Technologies».   Alexandre работает над разными низкоуровневыми и высокоуровневыми вопросами в областях рендеринга графики в реальном времени, GPGPU, синтеза звука, эффективного использования и архитектуры управляемых языков, кодогенерации и документации.  Как всегда, интервью ведут Евгений Трифонов (phillennium) и Олег Чирухин (olegchir) из JUG.ru Group.    В конце поста есть сюрприз от Дилана Битти (другого известного дотнетчика) — мы и сами не ожидали."
dmitrykabanov;10 ближайших IT-митапов и хакатонов в Москве;https://habr.com/ru/company/vsce/blog/433286/;Это — 142-й московский Startup Digest. Здесь есть встречи для игроделов и Rust-разработчиков плюс митапы для тех, кто интересуется темой стартапов и пытается что-то сделать сам.  
d1g1;Зоопарк AFL фазеров;https://habr.com/ru/company/dsec/blog/435644/;"  На Хабре уже пару раз появлялись статьи, поднимающие тему American Fuzzy Lop (AFL) (1,2). Но в данной статье речь пойдет не о классическом AFL, а о вспомогательных утилитах для него и его модификациях, которые, на наш взгляд, могут значительно улучшить качество фаззинга. Если вам интересно узнать, как можно прокачать AFL и искать быстрее и больше уязвимостей, то добро пожаловать под кат!"
NeoCode;Язык программирования Zig;https://habr.com/ru/post/435872/;" Первым комментарием к замечательной статье Субъективное видение идеального языка программирования оказалась ссылка на язык программирования Zig. Естественно, стало интересно, что же это такое за язык, который претендует на нишу C++, D и Rust. Посмотрел — язык показался симпатичным и в чем-то интересным. Приятный си-подобный синтаксис, оригинальный подход к обработке ошибок, встроенные сопрограммы. Данная статья является кратким обзором официальной документации с вкраплениями собственных мыслей и впечатлений от запуска примеров кода. "
AlexSerbul;Выбор технологий, архитектуры и проектирование в программных проектах — без купюр;https://habr.com/ru/company/bitrix/blog/436460/;Друзья! Мы продолжаем серию публикаций «без купюр» о проектных процессах, IT-технологиях и о том, как работать эффективно. Сегодня поговорим об очень наболевшей теме, вызывающей изжогу в головном мозге — выборе технологий, языков программирования, роли архитекторов, аналитиков, тимлидов и экстрасенсов для решения эпической задачи: запустить программное решение, если возможно, в разумный срок. И отдельно остановимся, ну чтобы совсем не заскучать, на анализе корреляции размеров частей тела одной части коллектива с производительностью работы мозга другой. Наливайте кофе и поехали!
BitfuryRussia;Что делает Bitfury: дайджест о наших разработках;https://habr.com/ru/company/bitfury/blog/437134/;Это подборка материалов о наших блокчейн-решениях — Exonum, Crystal, Lightning Peach и Bitfury Clarke. Статьи под катом рассказывают, как отследить украденную криптовалюту на блокчейне, как охладить майнинговые чипы в дата-центре и как сварить кофе за биткоины.  
AndreyNagih;Разработка под WebAssembly: реальные грабли и примеры;https://habr.com/ru/company/jugru/blog/441140/;"  Анонс WebAssembly состоялся в 2015-м — но сейчас, спустя годы, всё ещё немногие могут похвастаться им в продакшне. Тем ценнее материалы о подобном опыте: информация из первых рук о том, каково с этим жить на практике, пока что в дефиците.  На конференции HolyJS доклад об опыте использования WebAssembly получил высокие оценки зрителей, и теперь специально для Хабра подготовлена текстовая версия этого доклада (видеозапись также приложена)."
DmitrySpb79;Хабрамегарейтинг: лучшие статьи и статистика Хабра за 12 лет. Часть 2/2;https://habr.com/ru/post/442168/;"Привет, Хабр.  В первой части были рассмотрены некоторые закономерности развития такого интересного ресурса, как habrahabr. Материал получился длинный, так что продолжение здесь. В этой части мы заодно посмотрим как строить такие картинки, и наконец, завершим нашу статистику и рейтинг.    Кому интересны результаты, прошу под кат."
akurdyukov;Опыт United Traders: как устроена разработка в финтех-компании;https://habr.com/ru/company/utex/blog/443300/;Всем привет! Меня зовут Алик Курдюков, я CTO компании United Traders. Немного обо мне можно узнать у меня в профиле. В последнее время мы увеличиваем темпы набора IT людей в компанию и сталкиваемся с проблемой: нас многие знают как «Fin» компанию, но очень мало кто знает как «Tech». Поэтому теперь у нас есть блог на Хабре. В этом посте я хочу рассказать о том, как мы устроены со стороны разработки. И с удовольствием буду отвечать на вопросы в комментариях.
m1rko;Стандарт WASI: запуск WebAssembly за пределами веба;https://habr.com/ru/post/446764/;"27 марта мы в Mozilla объявили о начале стандартизации WASI, системного интерфейса WebAssembly (WebAssembly system interface).  Зачем: разработчики начали применять WebAssembly за пределам браузера, потому что WASM обеспечивает быстрый, масштабируемый, безопасный способ запуска одинакового кода на всех машинах. Но у нас пока нет прочного фундамента для такой разработки. Вне браузера нужен некий способ общения с системой, то есть системный интерфейс. А у платформы WebAssembly его пока нет.  Что: WebAssembly — это ассемблер для концептуальной, а не физической машины. Он работает на различных архитектурах, поэтому и системный интерфейс нужен для концептуальной ОС, чтобы работать на разных операционных системах.  Вот что такое WASI: это системный интерфейс для платформы WebAssembly."
humbug;Long journey to Tox-rs. Part 1;https://habr.com/ru/post/447994/; Hi everyone! I like Tox and respect the participants of this project and their work. In an effort to help Tox developers and users, I looked into the code and noticed potential problems that could lead to a false sense of security. Since I originally published this article in 2016 (in Russian), many improvements have been made to Tox, and I lead a team that re-wrote secure Tox software from scratch using the Rust programming language (check out Tox-rs). I DO recommend using tox in 2019. Let's take a look what actually made us rewrite Tox in Rust. Original article of 2016 There is an unhealthy tendency to overestimate the security of E2E systems only on the basis that they are E2E. I will present objective facts supplemented with my own comments for you to draw your own conclusions. Spoiler: The Tox developers agree with my points and my source code pull request was accepted.
adverax;Почему язык Go плох для НЕумных программистов;https://habr.com/ru/post/448932/;Статья написана, как ответ на опубликованную ранее статью-антипод.   На протяжении последних двух с лишним лет использую Go для реализации специализированного RADIUS сервера с развитой биллинговой системой. По ходу изучаю тонкости самого языка. Программы по себе очень просты и не являются целью написания статьи, но сам опыт использования Go заслуживает того, чтобы сказать пару слов в его защиту. Go становится все более массовым языком для серьезного масштабируемого кода. Язык создан в Google, в котором им активно пользуются. Подведя черту, я искренне считаю, что дизайн языка Go плох для НЕумных программистов.
d1g1;Zoo AFL;https://habr.com/ru/company/dsec/blog/449134/;"  In this article, we're going to talk about not the classical AFL itself but about utilities designed for it and its modifications, which, in our view, can significantly improve the quality of fuzzing. If you want to know how to boost AFL and how to find more vulnerabilities faster – keep on reading!"
BasicWolf;Знакомство с Python для камрадов, переросших «язык A vs. язык B» и другие предрассудки;https://habr.com/ru/post/450724/;"Для всех хабравчан, у которых возникло ощущение дежавю: Написать этот пост меня побудили статья ""Введение в Python"" и комментарии к ней. К сожалению, качество этого ""введения"" кхм… не будем о грустном. Но ещё грустнее было наблюдать склоки в комментариях, из разряда ""C++ быстрее Python"", ""Rust ещё быстрее C++"", ""Python не нужен"" и т.д. Удивительно, что не вспомнили Ruby! Как сказал Бьярн Страуструп, «Есть всего два типа языков программирования: те, на которые люди всё время ругаются, и те, которые никто не использует».Добро пожаловать под кат всем, кто хотел бы познакомиться с Python, не опускаясь при этом до грязных ругательств!"
aleks_raiden;Погружение в Move — язык программирования блокчейна Libra от Facebook;https://habr.com/ru/post/459990/;"Далее мы рассмотрим в деталях основные характеристики языка Move и в чем его ключевые различия с другим, уже популярным языком для смарт-контрактов — Solidity (на платформе Ethereum). Материал основан на изучении доступного он-лайн 26-страничного whitepaper-а.  Введение Move — это исполняемый язык байт-кода, который используется для выполнения пользовательских транзакций и смарт-контрактов. Обратите внимание на два момента:   В то время как Move является языком байт-кода, который может напрямую выполняться на виртуальной машине Move, Solidity (язык смарт-контрактов в Ethereum) — язык более высокого уровня, который сначала компилируется в байт-код перед выполнением в EVM (Ethereum Virtual Machine). Move можно использовать не только для реализации смарт-контрактов, но и для пользовательских транзакций (подробнее об этом будет дальше), в то время как Solidity — это язык только для смарт-контрактов. "
ru_vds;Что такое Deno и чем этот проект отличается от Node.js?;https://habr.com/ru/company/ruvds/blog/460020/;"Райан Даль, создатель Node.js, потратил последние полтора года на работу над проектом Deno. Это — новая среда выполнения для JavaScript, которая должна исправить проблемы, присущие Node.js.  Не поймите меня неправильно. Платформа Node.js представляет собой замечательную серверную среду для выполнения JavaScript. Своей популярностью она обязана, преимущественно, огромной экосистеме, и, собственно, поддержке JavaScript. Однако Райан Даль признаёт, что кое-чему, касающемуся Node.js, ему стоило бы уделить больше внимания. Речь, в частности, идёт о безопасности, о модулях и об управлении зависимостями.   В его защиту можно сказать то, что он не мог знать о том, насколько популярной станет платформа Node.js за довольно короткий отрезок времени. Кроме того, в 2009 году JavaScript всё ещё выглядел как ограниченный и странный язык, над которым издевались все, кому не лень. Также надо отметить то, что в те времена многих возможностей JavaScript, привычных в наши дни, ещё не существовало."
m1rko;Проблема PGP;https://habr.com/ru/post/460827/;"Криптоинженеры уже несколько десятилетий кричат о недостатках PGP. Когда это слышат обычные разработчики, то бывают крайне удивлены. Как, PGP никуда не годится? Зачем же тогда его советуют использовать? Ответ в том, PGP действительно никуда не годится, и никому никогда не следует его рекомендовать. Он должен исчезнуть.  Как вы скоро увидите, у PGP много проблем. Если не вдаваться в подробности, основная причина в том, что программа разработана в 90-е годы, до появления серьёзной современной криптографии. Ни один компетентный криптоинженер сегодня не станет разрабатывать систему в таком виде и не потерпит большинства её дефектов ни в какой другой системе. Серьёзные криптографы в основном отказались от PGP и больше не тратят на неё времени (за некоторыми заметными исключениями). Поэтому хорошо известные проблемы в PGP остаются нерешёнными более десяти лет."
anastasiak2512;Вышел CLion 2019.2: поддержка встроенной разработки, отладчик для MSVC, поиск неиспользованных заголовочных файлов;https://habr.com/ru/company/JetBrains/blog/461289/;"Привет, Хабр!  Лето за окном пролетает для нас почти незаметно, потому что все эти месяцы мы посвятили работе над новым релизом 2019.2 нашей кросс-платформенной среды для разработки на C++ — CLion. Мы успели довольно много всего: и провести внутренний Хакатон, и попробовать новые идеи, и довести ряд исправлений и новых возможностей до непосредственного релиза. Но обо всем по порядку.    Если коротко, то в этом релизе мы:   Продолжили дорабатывать поддержку разработки встроенных систем: появились новые возможности отладки и просмотр периферии. Довели до приемлемого качества пока что экспериментальный отладчик для MSVC. Полностью переписали на clangd проверку кода на Unused Includes, добавив возможность настраивать разные стратегии. Реализовали подсказки для аргументов вызова функций и лямбд, чтобы улучшить читаемость кода. Провели внутрикомандный Хакатон по улучшению производительности, придумали кучу новых подходов и успели воплотить в жизнь несколько улучшений. Реализовали подсветку синтаксиса более чем для 20 языков, встроили плагин для написания скриптов (Shell Script plugin), обновили плагин для Rust. "
phillennium;C++ против C#;https://habr.com/ru/company/jugru/blog/469467/;"  Всем известно, что нет ничего глупее споров «какой язык лучше». Например, лучше для чего? Разные языки успешны в разных нишах — и бессмысленно делать категоричные выводы, не учитывая это.  Но что получится, если обратиться к опытным специалистам, которые сами всё это понимают, и попросить их всё-таки устроить холивар «C++ vs C#»? Оказывается, можно узнать много любопытных деталей. Слово «кроссплатформенный» можно по-своему применить к обоим языкам, но что это значит на практике? Активно ли сейчас развивается С++? Ломал ли C# когда-либо обратную совместимость? Ответы могут быть очевидны для тех, кто уже глубоко погружён в оба языка сразу, но таких людей немного — а все остальные узнают что-то новое.  Со стороны C++ поучаствовал Сергей sermp Платонов — председатель программного комитета конференции C++ Russia. Сторону C# представлял Анатолий Кулаков — он входит и в ПК конференции DotNext, и в число лидеров DotNetRu. А ведущим дискуссии, в жизни которого сосуществуют оба этих мира, стал Дмитрий mezastel Нестерук. "
tumbler;Proposal: try — встроенная функция проверки ошибок;https://habr.com/ru/post/472758/;Краткое содержание Предлагается новая конструкция try, созданная специально для устранения if-выражений, обычно связанных с обработкой ошибок в Go. Это единственное изменение языка. Авторы поддерживают использование defer и стандартных библиотечных функций для обогащения или оборачивания ошибок. Это маленькое расширение подходит для большинства сценариев, практически не усложняя язык. Конструкцию try просто объяснить, легко реализовать, этот функционал ортогонален другим языковым конструкциям и является полностью обратно-совместимым. Он также является расширяемым, если мы захотим этого в будущем. Остальная часть этого документа организована следующим образом: после краткого введения, мы приводим определение встроенной функции и объясняем ее использование на практике. Раздел обсуждения рассматривает альтернативные предложения и текущий дизайн. В конце будут приведены выводы и план реализации с примерами и секцией вопросов и ответов.
AcckiyGerman;О структуре параллельных вычислений или доводы против оператора «Go»;https://habr.com/ru/post/479186/;" Каждый язык, поддерживающий параллельные (конкурентные, асинхронные) вычисления, нуждается в способе запуска кода параллельно. Вот примеры из разных API: go myfunc();                                // Golang  pthread_create(&thread_id, NULL, &myfunc);  /* C with POSIX threads */  spawn(modulename, myfuncname, [])           % Erlang  threading.Thread(target=myfunc).start()     # Python with threads  asyncio.create_task(myfunc())               # Python with asyncio Есть много вариантов нотации и терминологии, но одна семантика — запустить myfunc параллельно основной программе и продолжить родительский поток выполнения (англ. ""Control Flow"")"
PsyHaSTe;Функциональное программирование — это не то, что нам рассказывают;https://habr.com/ru/post/479238/;"Функциональное программирование — это очень забавная парадигма. С одной стороны, про неё все знают, и все любят пользоваться всякими паттерн матчингами и лямбдами, с другой на чистом ФП языке обычно мало кто пишет. Поэтому понимание о том, что же это такое восходит больше к мифам и городским легендам, которые весьма далеко ушли от истины, а у людей складывается мнение, что ""ФП подходит для всяких оторванных от жизни программок расчетов фракталов, а для настоящих задач есть зарекомендовавший себя в бою проверенный временем ООП"".  Хотя люди обычно признают удобства ФП фич, ведь намного приятнее писать: int Factorial(int n) {     Log.Info($""Computing factorial of {n}"");     return Enumerable.Range(1, n).Aggregate((x, y) => x * y); } чем ужасные императивные программы вроде int Factorial(int n) {     int result = 1;     for (int i = 2; i <= n; i++)     {         result *= i;     }     return result; } Так ведь? С одной стороны да. А с другой именно вторая программа в отличие от первой является функциональной. Как же так, разве не наоборот? Красивый флюент интерфейс, трансформация данных и лямбды это функционально, а грязные циклы которые мутируют локальные переменные — наследие прошлого? Так вот, оказывается, что нет. "
maybe_elf;Итоги недели: Рамблер заявляет права на Nginx, Microsoft создает новый ЯП, а в России закрывают проект «Тайгафона»;https://habr.com/ru/post/480180/;"  Итоги прошедшей недели на Хабре. В этом дайджесте — самые важные, интересные и громкие события, о которых мы говорили в последние семь дней. Рамблер вспомнил об Nginx спустя 15 лет; Intel объявила, что разработка компании сделает квантовые вычисления общедоступными; Евросоюз запрещает стабильные криптовалюты; в России проходят первые провальные испытания беспилотных авто; YouTube вновь ужесточает правила публикации видео. "
byko3y;О проблемах транслятора Python и переосмысление языка;https://habr.com/ru/post/481782/;"— Сколько нужно архитекторов, чтобы реализовать язык программирования? — Сто. Один будет писать реализацию, а 99 — говорить, что могут сделать лучше. В этой статье я хочу затронуть не столько сам язык, сколько детали реализации CPython и его стандартной библиотеки, которые гарантируют, что у вас не будет никаких простых способов сделать приложение на питоне ни многопоточным, ни быстрым, ни легко поддерживаемым, и почему было создано столько альтернативных реализаций (PyPy, Cython, Jython, IronPython, Python for .NET, Parakeet, Nuitka, Stackless, Unladen Swallow), половина из которых уже умерла; и мало кто понял, почему у альтернатив не было шансов победить в борьбе за выживание против других языков. Да, есть GDScript, который призван решить проблемы с производительностью, есть Nim, который призван решить вообще все проблемы, не обязывая при этом пользователя чрезмерно явно объявлять типы. Однако, учитывая огромную инертность индустрии, я осознаю, что в ближайшие 10 лет новые языки точно не займут значимой ниши. Однако, я верю в то, что питон возможно сделать эффективным, изменив стиль написания кода, по большей части сохранив оригинальный синтаксис, и полностью сохраняя возможность взаимодействия кода нового и старого стиля. Я буду концентрироваться на проблемах CPython, а не ближайшего его конкурента, PyPy, поскольку PyPy на самом деле прыгает вокруг всё тех же проблем CPython. "
anurbol;Как развивались комментарии к коду с 1940-х до 2020 года;https://habr.com/ru/post/485162/;"А никак они не развивались. С самых первых языков программирования и по сей день комментарии коду — это всего лишь статичный текст (за некоторыми исключениями, о которых я расскажу).     Ну а что там еще можно улучшить или придумать — спросите вы. Давайте поразмышляем на эту тему — можно ли как-то улучшить наш опыт взаимодействия с таким важным но так часто игнорируемым аспектом программирования как документация в коде, или по-простому комментарии."
Chronicler;Мейнстрим. Почетные работники труда. Биографический роман;https://habr.com/ru/post/486530/;"Издательство «Библиотечка пролетария».   В этом романе автор расскажет нам о нелегкой судьбе становления рабочего класса индустрии разработки.  О почетных работниках и развитии личных взаимоотношений в условиях нехватки памяти.  Рекомендую. /*Критик*/  Все совпадения не случайны.  У C++ сложный характер из-за тяжелого детства. Он рос в голодные 80е, и помнит как часто места не хватало даже на символы. Это закалило его и придало суровости синтаксису. Часто, напившись, он любил кидать сегфолты, бить стекла, стрелять прохожим в ноги. Урезонить его было некому, ибо его дедушка, уважаемый K&R C, был контужен во Вьетнаме и сам нередко участвовал в забавах внука. "
aionin;Вышел GitLab 12.7 с конвейерами Parent-Child и бета-версией общих обработчиков заданий для Windows;https://habr.com/ru/post/487266/; Вышел релиз GitLab 12.7 — с улучшениями, которые помогут вашим командам и конвейерам (в русской локализации GitLab «сборочные линии») стать более эффективными и результативными. Настройка автоматизации и конвейеров — основа продуктивной работы команд DevOps, и в 12.7 мы предлагаем множество нововведений, которые сделают вашу работу быстрее и эффективнее. Например, конвейеры Parent-Child, группы ресурсов конвейера и бета-версию общих обработчиков заданий (shared runner) для Windows на GitLab.com.
Gim6626;FOSS News №14 – обзор новостей свободного и открытого ПО за 27 апреля – 3 мая 2020 года;https://habr.com/ru/post/500248/;"  Всем привет!  Продолжаем обзоры новостей свободного и открытого ПО и железа (и немного коронавируса). Всё самое главное про пингвинов и не только, в России и мире. Участие Open Source сообщества в борьбе с COVID-19, выход Canonical на самоокупаемость, холивар (или нечто большее) о годности GNU/Linux для десктопов, очередные нападки Роскомнадзора на мессенджеры, экскурс в историю консольных команд и сравнение с сегодняшним днём, выпуск флагманских ноутбуков Lenovo с предустановленной GNU/Linux и многое другое."
phillennium;Влияние кризиса на IT: уволят ли нас всех;https://habr.com/ru/company/jugru/blog/507354/; Нередко вижу слова в духе «по другим отраслям коронавирус сильно ударил, а вот IT практически не затронул». Мол, веб-сервисы от карантина только выиграли, писать код можно и удалённо, а раз сейчас ограничения отменяют — значит, всё закончилось хорошо, проблем нет и теперь уже не будет. По-моему, заявлять такое означает не вполне понимать ситуацию. Существует, например, прогноз Минкомсвязи, что российская IT-отрасль может стать убыточной, а численность российских айтишников во втором полугодии может снизиться на 27 000 человек. Понятия не имею, насколько сбудется конкретно этот прогноз, но поискал разные данные, и в целом они подтверждают: хотя IT и повезло больше многих, картина невесёлая, а уверенно говорить «всё осталось позади» рано. Как всё могло ухудшиться в период, когда популярность онлайн-сервисов резко возросла? Как происходящее может сказаться на обычном айтишнике? И что ему делать, чтобы сложности задели как можно меньше?
Dionid;Как познакомить разработчика с ценностями вашего бизнеса не прибегая к насилию;https://habr.com/ru/post/508384/;"От автора  Тема противоречивая и есть огромное количество разработчиков и менеджеров, которые не задумываются про правила и способы коммуникации друг между другом, а тем более про коммуникацию разработчиков и клиентов.  Но для меня и моих команд подобные барьеры преодолевались (и не раз) и давали отличные результаты, поэтому не могу не поделиться успешным опытом:  Итак  Бизнес есть Бизнес, Разработка есть Разработка, и не встретиться им никогда, пока… Видел статью о том, как подружить кошку с собакой. Лайфхак от мамкиных бихевиористов:  «Положить собаку на бок и к ее спине спиной приложить кошку. Они не будут видеть друг друга, а только чувствовать запах. Такое упражнение поможет вызвать доверие у животных. Начинайте гладить обеих под расслабляющую музыку.»  Решение годное для нишевого interspecies threesome, наверное. Попробовал — чуть не лишился глаза и кошки.  Примерно такие же потери и чувства у меня вызывает вопрос знакомства «бизнеса» и «разработки».  Но в этом контексте мой кейс менее травмоопасен. Я считаю, что знакомить бизнес и разработку нужно дозированно и ненавязчиво."
andreybokhanko;Что такое LLVM и зачем он нужен?;https://habr.com/ru/company/huawei/blog/511854/;"Всем привет! Думаю, у многих сразу возник другой вопрос — а зачем вообще нужна ещё одна статья про LLVM, ведь на хабре их и так больше сотни? Моей задачей было написать ""введение в тему"" for the rest of us — профессиональных разработчиков, не планирующих создавать компиляторы и совершенно не интересующихся особенностями устройства LLVM IR. Насколько я знаю, подобного ещё не было. Главное, что интересует практически всех — и о чём я планирую рассказать — вынесено в заголовок статьи. Зачем нужен LLVM, когда есть GCC и Visual C++? А если вы не программируете на C++, вам стоит беспокоиться? И вообще, LLVM это Clang? Или нет? И что эти четыре буквы на самом деле означают?"
PatapSmile;20_20 — год, в котором подчеркивание в числовых литералах победило;https://habr.com/ru/post/516984/;"Вдруг вы не знали, но в языке, на котором вы пишите, вы можете использовать _ в числах. Например, следующий код на PHP: <?php  print(1_00); print(100); Выведет 100100 (проверить онлайн). Этот синтаксический сахар появился в Ada в 1980 году, и он имел переменный успех последние 40 лет. Но за последний год его добавили в javascript, PHP, Go, Scala и даже консервативный Erlang. Я не могу объяснить, что послужило всплеском популярности, поэтому в статье просто опишу историю разделителей в цифрах."
art_pro;Лучшие инструменты с открытым исходным кодом и библиотеки для Deep Learning — ICLR 2020 Experience;https://habr.com/ru/company/lanit/blog/519694/;"Сложно найти на Хабре человека, который не слышал бы про нейронные сети. Регулярные новости о свежих достижениях нейронных сетей заставляют удивляться широкую публику, а также привлекают новых энтузиастов и исследователей. Привлеченный поток специалистов способствует не только еще большим успехам нейронных моделей, но и приводит к развитию инструментов для более удобного использования Deep Learning подходов. Помимо всем известных фреймворков Tensorflow и PyTorch активно развиваются и другие библиотеки, нередко более гибкие, но менее известные.   Эта статья является переводом одного из постов neptune.ai и освещает самые интересные инструменты для глубокого обучения, представленные на конференции по машинному обучения ICLR 2020.   "
skillfactory_school;Разработка графического профайлера Python FunctionTrace;https://habr.com/ru/company/skillfactory/blog/521836/;"  Сегодня мы делимся с вами переводом статьи создателя FunctionTrace — профайлера Python с интуитивно понятным графическим интерфейсом, который может профилировать многопроцессорные и многопоточные приложения и потребляет на порядок меньше ресурсов, чем другие профайлеры Python. Неважно, только учитесь ли вы веб-разработке на Python, либо уже давно используете его — всегда полезно понимать, что делает ваш код. О том, как появился этот проект, о деталях его разработки — далее под катом."
Gim6626;FOSS News №48 – дайджест новостей и других материалов о свободном и открытом ПО за 21-27 декабря 2020 года;https://habr.com/ru/post/535208/;"  Всем привет!  Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Ростелеком переводит свои серверы на российский GNU/Linux дистрибутив «Ред ОС»; опубликован отчёт о становлении дистрибутива Rocky Linux, идущего на смену CentOS; 10 главных Open Source новостей 2020 г. по версии opensource.com; вышел подкаст «Полная история Fediverse» и многое другое."
Amareis;Фронтендеры — герои. Yehuda Katz объясняет почему;https://habr.com/ru/post/535724/;"Идея что фронтенд это ""для джунов"", расстраивает меня тем, что никто не скажет так про другие специализации.Кто-то может сказать, что неплохо, если б автор компилятора был более ""фуллстековым"".Но они не скажут, что ""писать компиляторы это для джунов"".Это перевод треда Yehuda Katz из твиттера. Под фронтендом здесь подразумеваются именно браузерные приложения на JS (и, отчасти, вся JS-экосистема)."
ru_vds;Что не так с WebAssembly?;https://habr.com/ru/company/ruvds/blog/539100/;"Современные браузеры могут намного больше, чем рендеринг веб-страниц. Это стало одной из причин появления WebAssembly. Эта технология создана в попытке вывести скорость решения сложных задач на новый уровень, построить мост между JavaScript и машинным кодом.  WebAssembly, в теории, может позволить кому угодно писать низкоуровневый код, выполняющийся в браузере, в безопасном виртуальном окружении. И, что ещё интереснее, технология WASM (сокращение от WebAssembly) была спроектирована как цель компиляции для других языков, позволяя коду, который обычно выполняют в серверной среде (например — коду, написанному на C или на C++), компилироваться в соответствующий формат и выполняться в браузере.    У WASM был огромный потенциал и невероятные перспективы. Что же пошло не так? Почему WASM, через 3 года после релиза, ещё не используется в каждом веб-проекте? Есть ли у WASM будущее в веб-разработке? Поищем ответы на эти вопросы."
Leono;«Любовь. Python. C++». Доклад Яндекса;https://habr.com/ru/company/yandex/blog/539580/;"Что связывает языки Python и C++? Как извлечь из этого выгоду лично для себя? На большой конференции Pytup Александр Букин показал способы, благодаря которым можно оптимизировать свой код, а также выбирать и эффективно использовать сторонние библиотеки.  — Всем привет, меня зовут Александр Букин, я разрабатываю Яндекс.Погоду. Вы еще можете знать меня как сооснователя Pytup. Также я состою в программных комитетах таких классных конференций, как PyCon.ru и YaTalks.   Сегодня мы с вами поговорим о любви Python и C++. А точнее — о том, что же их объединяет, эти два прекрасных языка и, на самом деле, еще C, и что мы можем почерпнуть из этих прекрасных отношений. "
itmai;Компьютерное зрение в промышленной дефектоскопии: Часть 2 “Генерируем стремные трубы чтобы порадовать нейронку”;https://habr.com/ru/company/itmai/blog/543000/; В предыдущей заметке мы рассказали о том, как мы решали задачу из области промышленной дефектоскопии методами современного машинного зрения. В частности, мы упомянули, что одним из подходов к обогащению данных обучающей выборки является генератор синтетических данных. В этой заметке мы расскажем:  как сделали такой генератор на основе Blender и Python, какие типы масок для задач компьютерного зрения вообще можно получить в Blender. 
pronskiy;PHP 8 и развитие языка в 30 вопросах и ответах;https://habr.com/ru/company/skyeng/blog/543794/;"В конце ноября мы провели стрим с Никитой Поповым и Дмитрием Стоговым, ключевыми контрибьюторами ядра PHP. За полчаса мы получили 100+ вопросов и ребята не успели ответить на все. Поэтому я сгруппировал оставшиеся сообщения по темам, отсеял совсем специфические и собрал ответы в текстовом виде. Все острые и холиварные вопросы оставил.    Готовя ответы, по многим пунктам я консультировался с Никитой и другими активными участниками сообщества. Кстати, в эту субботу, 27 февраля, мы проводим новый стрим! Будет пара докладов, несколько дискуссий, интересные гости и возможность задать новые вопросы. Читайте те, что под катом и подключайтесь, чтобы задать новые. "
Gim6626;FOSS News №69 – дайджест материалов о свободном и открытом ПО за 3–9 мая 2021 года;https://habr.com/ru/post/556516/; Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  30 лет Линукса. Интервью с Линусом Торвальдсом в 2 частях. Linux Foundation запускает проект цифровой инфраструктуры с открытым исходным кодом для сельского хозяйства. Signal купил у Facebook рекламу и показывал в баннерах, что соцсеть знает о пользователях. Разработчики ядра Linux завершили аудит всех патчей от Университета Миннесоты, ни один из вредоносных патчей не попал в ядро. Сравниваем четыре опенсорсные альтернативы Disqus. Что такое Matrix? И как этот протокол с открытым исходным кодом хочет изменить обмен сообщениями? Что нового в Ubuntu 21.04. Fediverse — социальная сеть будущего. Mozilla представила платформу Rally для исследований предпочтений пользователей.  И многое другое...
Polina_Averina;Бенчмаркинг Linkerd и Istio;https://habr.com/ru/company/southbridge/blog/561686/; Фото с сайта linkerd.io Пару лет назад ребята из Kinvolk сравнили производительность Linkerd и Istio и узнали, что Linkerd значительно быстрее и меньше Istio везде, кроме одной области. Linkerd использовала больше процессорных ресурсов в плоскости данных (data plane). Недавно мы повторили эти эксперименты с последними версиями обеих service mesh. Как показывают результаты, Linkerd не только по-прежнему заметно быстрее Istio, но и использует на порядок меньше ресурсов памяти и процессора в плоскости данных (data plane). Причем это происходит, даже если число запросов в секунду в три с лишним раза больше, чем в бенчмарке Kinvolk. Вы легко можете это повторить. А теперь подробности.
cepera_ang;Доводим эмуляцию до стандартов 21 века;https://habr.com/ru/post/566786/;Эмуляторы это очаровательная область разработки софта: возможность вдохнуть жизнь в 30-ти летний игровой автомат на современном компьютере это невероятно приятное достижение. Увы, меня всё больше расстраивает отсутствие амбиций в сообществе эмуляторщиков. В том время как остальной мир движется в облака, к массивным распределённым архитектурам, эмуляторы крепко застряли в XX веке с его С++ в один поток. Этот проект родился из желания привнести лучшее из современного дизайна систем в будущее древней истории компьютеров.
pomd;Самые высокие зарплаты в разработке получают программные инженеры и DevOps-специалисты;https://habr.com/ru/news/t/454174/;"  Сайт Stack Overflow изучил условия труда 90 тыс. разработчиков по всему миру. Как выяснилось, наибольшее удовлетворение от своей работы получают ведущие программные инженеры (Engineering Manager) и эксперты по DevOps. Эти специалисты также заняли верхние строчки в рейтинге зарплат."
Mimizavr;Вышла бета-версия Odin — ещё одного языка программирования;https://habr.com/ru/news/t/454650/;"  Независимый разработчик, Бил Джинжер, представил Odin 0.10.0 — бета-версию языка программирования, которым он занимается с 2016 года. Новый язык сочетает элементы Pascal, C, Go, Oberon и напоминает гибрид Go c Rust. Исходный код, FAQ и документацию Odin можно найти на GitHub и сайте проекта."
denis-19;Программист и музыкант алгоритмически сгенерировали все возможные мелодии и сделали их общественным достоянием;https://habr.com/ru/news/t/489982/;"  Согласно информации издания Vice, юрист-программист Дэмиен Рил (Damien Riehl) совместно с музыкантом Ноем Рубин (Noah Rubin) кардинальным образом решили проблему, связанную с судебными исками о нарушении авторских прав, связанные с обвинениями в плагиате музыки. С помощью разработанного ими программного алгоритма, названного make all the music, они сгенерировали все возможные мелодии, содержащиеся в одной октаве, сохранили их, защитили этот архив авторским правом и сделали его общественным достоянием, чтобы в будущем эти мелодии не подпадали под права интеллектуальной собственности."
ITSumma;Для ядра Linux предложили систему прозрачного переноса потоков на разные ядра и хосты: Popcorn Linux;https://habr.com/ru/company/itsumma/news/t/500748/;"  Для ядра Linux представлен набор патчей Popcorn Linux. Это программный стек, который позволяет приложениям с общей кодовой базой выполняться на распределённых хостах. То есть приложение можно запустить на одном хосте, а во время его выполнения выполнить миграцию на удалённый хост. Многопоточные приложения могут переносить любой свой поток на любой удалённый хост.  Более продвинутая версия Popcorn Linux позволяет приложениям одновременно выполняться на ядрах разной архитектуры (например, x86 и ARM). То есть, теоретически, часть программы можно запустить на ARM-ядре с низким энергопотреблением, а другой поток отправить на высокопроизводительное ядро x86. "
alizar;Платформу Free TON запустили без Павла Дурова;https://habr.com/ru/news/t/500946/;"7 мая 2020 года в 15:00 стартап TON Labs опубликовал в открытом доступе на GitHub основные компоненты операционной системы TON OS — инфраструктуры, необходимой для работы с блокчейном Free TON.   В частности, опубликованы:    реализация полной ноды TON в Rust,   интерфейс командной строки,   смарт-контракт TON Multisignature Wallet,   скрипты и док-контейнеры для запуска валидаторов TON.   Стартап утверждает, что компания Telegram не имеет никакого отношения к запуску. Из-за юридических трудностей Telegram больше не может участвовать в развитии TON, однако разработанный ими опенсорсный софт можно свободно использовать без ограничений. "
AnnieBronson;Неизвестный сообщил о взломе репозитория Microsoft на GitHub;https://habr.com/ru/news/t/500982/;Человек под ником Shiny Hunters связался с редакцией портала BleepingComputer и заявил, что взломал GitHub-репозиторий Microsoft. Неизвестный утверждает, что смог похитить из репозитория 500 ГБ данных.
maybe_elf;Клиент Discord модифицировали для кражи аккаунтов;https://habr.com/ru/news/t/507666/;"Фото: www.bleepingcomputer.com  В клиенте Discord начало распространяться новое вредоносное ПО NitroHack. Оно позволяет красть учетные записи. Распространение этого ПО стало возможным благодаря изменениям файлов JavaScript, используемых клиентом."
maybe_elf;IEEE опубликовал новый рейтинг языков программирования;https://habr.com/ru/news/t/512292/;"  Институт инженеров электротехники и электроники (IEEE) разместил на своем сайте рейтинг языков программирования за 2020 год. Тройка лидеров не изменилась: это Python, Java и C."
maybe_elf;Кроа-Хартман из Linux: мы не боремся с новыми разработчиками, узким местом является проверка кода;https://habr.com/ru/news/t/525212/;"  Специалист по сопровождению стабильной ветки ядра Linux Грег Кроа-Хартман заявил на онлайн-конференции Open Source Summit Europe, что новых разработчиков хватает, но узким местом в профессии остается ревью кода."
maybe_elf;Новым Mac с Apple M1 пока не хватает нативного софта и сред разработки;https://habr.com/ru/news/t/528722/;"  MacBook Air, MacBook Pro и Mac mini с новым чипом Apple Silicon М1 с ARM-архитектурой уже поступили в продажу. MacBook Air на базе M1 эмулирует код x86_64 с помощью Rosetta 2. Однако, хотя Apple позаботилась о том, чтобы ее собственные приложения для MacOS Big Sur были готовы к моменту выпуска, многие проекты с открытым исходным кодом и коммерческие приложения еще не перестроились на работу с Arm64. "
maybe_elf;Проект Servo передали Linux Foundation;https://habr.com/ru/news/t/528828/;"  Mozilla передала проект браузерного движка Servo некоммерческой организации Linux Foundation. Теперь Servo будет разрабатываться как независимый браузерный движок."
maybe_elf;«Архив Интернета» сохраняет историю Flash-контента эмулятором Ruffle;https://habr.com/ru/news/t/529032/;"  За несколько недель до запланированного Adobe завершения поддержки Flash «Архив Интернета» объявил, что создал новую коллекцию, посвященную Flash-контенту. Это позволил сделать встроенный эмулятор Ruffle. "
maybe_elf;Cloudflare, Apple и Fastly объявили о создании нового протокола DNS;https://habr.com/ru/news/t/532020/;"  Cloudflare, Apple и Fastly заявили о разработке нового стандарта DNS, который отделяет IP-адреса от запросов. Oblivious DNS over HTTPS (ODoH) имеет открытый исходный код."
Xtoman;Google меняет модель лицензирования операционной системы Fuchsia: теперь это полностью открытый проект;https://habr.com/ru/news/t/532200/;"  Компания Google 8 декабря 2020 года сообщила об изменении модели лицензирования операционной системы Fuchsia. Теперь коммиты и патчи принимают от всех желающих."
AnnieBronson;Антимонопольный иск обвиняет Valve в удержании высоких цен на игры;https://habr.com/ru/news/t/540278/;На прошлой неделе американская юридическая фирма Vorys, Sater, Seymour and Pease от имени пяти геймеров подала коллективный иск в федеральный суд Калифорнии против Valve Corporation. В иске утверждается, что в соглашении о распространении игр в Steam присутствует пункт «наибольшего благоприятствования в торговле». По мнению истцов, такая практика антиконкурентна и способствует сохранению высоких цен на игры.Принцип наибольшего благоприятствования в торговле (или «режим наиболее благоприятствуемой нации», most favoured nation, MFN) — термин, касающийся заключения международных договоров и соглашений. Он предусматривает, что каждая из сторон обязуется предоставить другой стороне не менее благоприятные условия в области экономических и торговых отношений, чем любой третьей стороне. В случае с Valve это означает, что разработчик или издатель обязуется установить такую же цену на игру в Steam, как и на других платформах. По сути, в иске утверждается, что Steam не позволяет разработчикам снижать цены на свои игры в других сервисах.
denis-19;Джон Салливан и юрист Кэт Уолш покинули FSF, в совете появился представитель из сотрудников организации;https://habr.com/ru/news/t/549490/;" Джон Салливан и Ричард Столлман на праздновании 30-летия системы GNU, сентябрь 2013 года.  29 марта 2021 года Джон Салливан объявил, что слагает с себя полномочия исполнительного директора Фонда свободного программного обеспечения (FSF). Это произошло в связи с текущей кризисной ситуацией в FSF, и спустя 10 лет после его назначения на эту должность. "
denis-19;FSF отказывается увольнять Столлмана, поэтому из организации ушли три ключевых сотрудника;https://habr.com/ru/news/t/549890/;"Ричард М. Столлман, Джулиан Ассанж и Эдвард Сноуден (на картинке).  30 марта 2021 года Фонд свободного программного обеспечения (FSF) объявил, что руководящие члены организации уходят в отставку. FSF покидают исполнительный директор Джон Салливан (John Sullivan), заместитель директора Джон Се (John Hsieh) и технический директор Рубен Родригес (Ruben Rodriguez). Это произошло в связи с текущей кризисной ситуацией в Фоне СПО из-за резкой активизации противников возвращения Ричарда Столлмана (RMS) в совет организации в конце марта этого года."
denis-19;Проект Fedora официально выступил против Столлмана и прекратил все отношения с FSF;https://habr.com/ru/news/t/550544/;"  2 апреля 2021 года проект Fedora официально выступил против Ричарда Столлмана (RMS) и прекратил все отношения с Фондом свободного программного обеспечения (FSF)."
denis-19;Проект Debian запустил голосование по поводу отношения к Столлману и сотрудничества с FSF;https://habr.com/ru/news/t/550870/;"Коллаж Debian и RMS.  4 апреля 2021 года проект Debian запустил глобальное голосование среди разработчиков по поводу отношения к Ричарду Столлману (RMS) и сотрудничества с Фондом свободного программного обеспечения (FSF).   До этого момента проект определялся, как именно поступить в этой непростой ситуации. Хотя некоторые его участники призывали сразу перейти на сторону противников Столлмана.  В итоге Debian все же запустил публичное обсуждение и голосование, причем представителям сообщества Debian предложено уточнить свою позицию из нескольких альтернативных вариантов. "
kseniaegorova;Mail.ru Group запустила бесплатный онлайн-редактор кода для совместной работы;https://habr.com/ru/company/mailru/news/t/551402/;Мы запустили бесплатный онлайн-редактор кода с поддержкой совместной работы на платформе All Cups. Редактор будет полезен программистам, распределённым командам, рекрутёрам и руководителям, которые дают кандидатам тестовые задания по написанию кода.
maybe_elf;Fortran оказался в топ-20 языков программирования вместо Objective-C;https://habr.com/ru/news/t/551408/;Созданный в 1957 году специалистами IBM язык программирования Fortran попал на 20-е место рейтинга TIOBE. Еще летом прошлого года он занимал последнее, 50-е место. При этом Fortran опередил в списке Objective-C и Rust. 
denis-19;Столлман извинился за свое поведение, и его не исключили из FSF;https://habr.com/ru/news/t/552058/;" Ричард Мэттью Столлман (RMS) — основатель движения свободного программного обеспечения, проекта GNU.  12 апреля 2021 года Ричард Столлман (RMS) принес всему сообществу СПО извинения за свое поведение из-за проблем с социальным взаимодействием. Фонд свободного программного обеспечения (FSF) продолжит сотрудничество с RMS ради миссии продвижения СПО. "
simbirsoft_team;Майский дайджест: интенсив, митапы, день открытых дверей;https://habr.com/ru/company/simbirsoft/news/t/556684/;Всем привет! Послушать доклады на митапах, прокачаться на Летнем интенсиве и практикумах и просто познакомиться на Дне открытых дверей – выбирайте сами, какие из наших мероприятий вы хотели бы посетить в мае. На наших ивентах обсудим кейсы Web и QA, посвятим две недели разработке в командах (Frontend, Backend, Mobile, Web, SDET, QA, PM, дизайн, PR).  
Cloud4Y;Deno можно обновить до версии 1.10;https://habr.com/ru/company/cloud4y/news/t/556968/;Вчера, 11.05.2021, создатели Deno (среды выполнения для JavaScript) объявили о выходе новой версии Deno 1.10. Анонсированы новые функции, улучшение производительности и исправление ряда ошибок.Главные изменения:
denis-19;Cloudflare представила WARP для Linux;https://habr.com/ru/news/t/563510/;"  17 июня 2021 года Cloudflare представила версию клиентского приложения WARP для Linux. Это VPN-сервис и DNS-резолвер на базе DNS-приложения 1.1.1.1 для ПК, в котором используется собственная технология шифрования. Также WARP является прокси для перенаправления пользовательского трафика через инфраструктуру сети доставки контента (CDN) от Cloudflare. "
sereje4kin;Чем Go лучше любого другого языка: обсудим на DevDay;https://habr.com/ru/company/2gis/news/t/567834/;Только прошёл один DevDay, а мы уже приглашаем на следующий.16 июля собираем DevDay о Go. В свободной пятничной обстановке выведаем у спикеров, чем же так хорош gqlgen и в каких случаях собственное решение оказывается лучше, чем Viper и Cleanenv. Ну и обсудим плюсы и минусы Go, как без этого.
denis-19;EFF выпустила программу apkeep для скачивания файлов APK с зеркал Google Play;https://habr.com/ru/news/t/576648/;"  Разработчики некоммерческой организация Фонд электронных рубежей (Electronic Frontier Foundation — EFF) выложили в открытый доступ на GitHub проект apkeep. Инструмент позволяет скачивать файлы APK с сайтов-зеркал Google Play. "
Travis_Macrif;Spotify стал партнером Тинькофф в России;https://habr.com/ru/news/t/576948/;У клиентов «Тинькофф банка» и подписчиков музыкального сервиса Spotify появится возможность ежемесячно экономить до 25 % от стоимости абонентской платы в виде кэшбэка на карту. Подключить опцию можно через приложение банка или через сайт Tinkoff.ru.
spmbt;Появился инструмент ввода тегов Source;https://habr.com/ru/post/141976/;Впервые за 2 года, а может, и более, Хабр повёл себя неестественным образом. Никто не ожидал, но в поле ввода пришли изменения — поле ввода тега SOURCE с языками для подсветки синтаксиса. Одновременно, появилась поддержка гораздо большего числа языков, чем было раньше описано в «хелпе». 
Vanav;Некриптографические хеш-функции и DoS атака на них;https://habr.com/ru/post/178955/;"Некриптографические хеш-функции применяются там, где важна скорость и не так важна возможность атаки на характеристики функции. Последнее время активно обсуждается атака на алгоритмическую сложность хеш-таблиц путём создания множественных коллизий хеш-функции, которая может привести к DoS. Мы рассмотрим современные некриптографические хеш-функции, условия для их применения, возможные методы защиты от атаки на хеш-таблицы и почему оказалось, что это не так просто исправить. Некриптографические хеш-функции Если криптографические хеш-функции у всех на слуху, то про некриптографические (хеш-функции общего назначения) известно мало. Некриптографические функции применяются там, где на данные не воздействуют третьи лица (злоумышленник). Например, такие функции могут использоваться для построения хеш-таблиц.  Критерии, которые важны для некриптографических хеш-функций:"
Krovosos;Почему веб-приложения на мобильных платформах работают медленно;https://habr.com/ru/post/188580/;"От переводчикаЭто перевод статьи Drew Crawford «Why mobile web apps are slow», опубликованной 09 июля 2013. Статья очень интересная, но большая — ошибки возможны — прошу простить и присылать замечания в личку.  Поскольку затронута острая тема, прошу заметить, что переводчик не обязательно разделяет мнение автора статьи! При переводе текст слегка видоизменялся, поскольку прямой перевод не всегда понятно передает смысл. Для перевода термина «native code» был использован англицизм «нативный код», который понятнее и короче, чем «родной для платформы код». Термин «word processing» переводится как «верстка текста», хотя это немного сужает первоначальный смысл. Термин managed код («управляемый код») не был переведен, так как удачного перевод (на взгляд переводчика) не существует. Под «терминированием» приложения подразумевается его принудительное завершение операционной системой. Повествование в статье ведется от первого лица: автора статьи.  "
Deepwalker;Открытые классы в ruby, заметки для питонистов;https://habr.com/ru/post/214191/;По своему опыту знаю, что открытые классы в ruby раздражают и вызывают непонимание в среде питонистов. Ну в самом деле, что за странность открыть класс String и переопределить там size? 
3dsystem;Откуда растут игры. Интервью с Дэвидом Хельгасоном – CEO Unity;https://habr.com/ru/post/228877/;"Текст предназначается в первую очередь для тех, кто, как и автор, с Unity практически не знаком. Но слышал – и хотел бы познакомиться. А также для тех, кого создатель Unity интересует как личность.  Unity — один из самых популярных игровых движков. На нем сделаны, например, Hitman GO, Rust, Oddworld: New ’n’ Tasty, Monument Valley, Lumo, Warhammer 40,000: Space Wolf и еще тысячи других игр. В основном это мобильные проекты и игры от инди-студий. Почему? Потому что Unity — очень простая в изучении штука, которую могут освоить одиночки и небольшие студии. На конференции DevGamm, посвященной разработке игр, автор встретились с создателем этого движка и CEO компании Unity Technologies – Дэвидом Хельгасоном (David Helgason), и решили, что шанс упускать нельзя. Перед нами человек, который знает об индустрии игр едва ли не больше, чем любой их разработчик!  Дэвид и сам когда-то был разработчиком игр – Unity появилась на свет именно как инструмент для создания тех проектов, которые молодой и неопытный исландец вместе друзьями хотел выпустить в свет. Они верили, что смогут создать отличную игру. Но когда они наконец доделали ее, то поняли, что игра вышла хорошей, но не отличной. А вот инструмент для ее разработки получился очень даже привлекательным — так Unity из движка для личных целей превратилась в инструмент для разработчиков игр по всему миру. От остальных движков Unity отличается в первую очередь простотой и кросс-платформенностью – с помощью этого программного пакета можно делать игры хоть для PC, Mac или консолей, хоть для iOS или Android. Да почти для чего угодно. В общем, мы решили задать Дэвиду несколько вопросов о том, как делаются игры и куда движется игровая индустрия.   Знакомьтесь: Дэвид Хельгасон "
elena_voronina;RailsClub'Moscow 2014: Интервью с Джонасом Никласом;https://habr.com/ru/company/railsclub/blog/236547/;"RailsClub в этом году заполучил в докладчики рекордное количество Ruby Hero. Да и просто интересных людей, которые действительно умеют готовить Ruby.  Приглашаем вас на конференцию 27 сентября и публикуем следующее интервью: с Джонасом Никласом (nicklas), автором фреймворка для тестирования Capybara и популярных библиотек Pundit, Turnip и CarrierWave.   И да, Джонас Ruby Hero 2011.    Когда и почему ты начал программировать? "
anton;Настоящее и будущее C++. Интервью с Эриком Ниблером;https://habr.com/ru/company/yandex/blog/265351/;"Эрик Ниблер — известный эксперт по C++, один из важных контрибьюторов Boost, человек, который добавил в стандарт библиотеку Ranges.   26 августа в рамках C++ Party Эрик выступит в новосибирском офисе Яндекса, где как раз расскажет о библиотеке и поговорит с гостями о новых стандартах C++.     Я заранее поговорил с Эриком и задал ему несколько вопросов от себя и коллег о том, каким он видит настоящее и будущее C++, что ему кажется самым важным в программировании, будет ли в C++ когда-нибудь нормальный менеджер пакетов, модули, что будет со стандартной библиотекой и о многом другом.  Кстати, если у вас есть ещё хорошие вопросы к Эрику, — их можно задать в комментариях, и мы попросим его на них ответить. "
elena_voronina;RailsClub 2015: Интервью с Сэмом Пиппеном;https://habr.com/ru/company/railsclub/blog/265397/;"Всем привет!  До RailsClub 2015 остался месяц. В этом году мы активно растем (и количеством докладов, и количеством участников). Приглашаем всех рубистов присоединяться! Сегодня мы начинаем публиковать традиционные интервью с нашими докладчиками.  Первый собеседник — Сэм Пиппен, хакер из Лондона, член RSpec core team, разработчик в Fun and Plausible Solutions.    Интервью публикуются с оригинальными ответами на английском языке и нашим вольным переводом. "
vindi;Перевод: Один год с Go;https://habr.com/ru/post/268411/;Под катом — перевод статьи опытного разработчика о его опыте практического применения Go. Важно — мнение переводчика может не совпадать с мнением автора статьи.    
ingrysty;Pony — убийца...?;https://habr.com/ru/post/269885/;"Всем известны такие прогрессивные новички в программировании как — «Go, Rust, Nim, Crystal» и все они очень круты в своих определенных областях.  К примеру:   Go был рожден как супер простой и промышленный язык для быстрого решения поставленных задач с идеями, которые всем прекрасны известны, но некоторые из них прибиты к другим языкам гвоздями (На 5мм). Второй наш оппонент — это Rust, победитель по жизни, но из-за своей сложной жизни в развитии он стал для сообщества, как будущая и модная замена C++. Для меня его судьба пока не понятна, так как с зелеными потоками и IO под них там пока туго, то я его ставлю на место в ряд с C для микроконтроллеров, драйверов и операционных систем. Crystal… Прямо и четко говорю, что это супер производительный клон Ruby. Больше сказать нечего, весь он пропитан его духом. Nim (Он же Нимушка или Нимрод) и его похожесть на скриптовые языки создают ему особую атмосферу, однако внутри он достаточно сложный организм и для меня сия сущность, как Haxe с такими же ощущениями при программировании на нем.  А Pony — это моя любимая и маленькая поняшка. С виду и по названию языка можно лихо пройти мимо… В общем, приглашаю вас под капот статьи. "
qnikst;Включение внешних языков в программы на Haskell;https://habr.com/ru/post/269939/;В данной статье приведено краткое описание техники, которое позволяет использовать в программах на Haskell библиотеки, написанные на других языках программирования. При этом нет необходимости ни переписывать эти библиотеки на Haskell, ни писать бесчисленные обертки на C, ни писать явные байндинги. В получающейся программе можно как напрямую вызывать “чужой” код, так и вызывать из чужого кода Haskell функции. Сам же код функций может быть написан на расширенном подключаемом языке, что позволяет работать с ним специалистам в подключаемых языках, которые, к сожалению, пока не знакомы с Haskell.  
lastmac;Парсеров всем! Анализируем и тестируем существующие HTML парсеры;https://habr.com/ru/post/279409/;"  Всем привет!  После публикации предыдущей статьи на почту прилетело не мало писем с просьбой показать и доказать, чем же одно решение лучше другого. Я, воодушевленно принялся сравнивать, но всё, как обычно, немного сложнее, чем кажется с первого взгляда.  Да, в этой статье я предлагаю выложить все парсеры на стол и измерить!  "
ascold;Результаты большого опроса среди разработчиков всех стран за 2016 год;https://habr.com/ru/company/payonline/blog/280530/;" Привет, Хабр! Мы в компании PayOnline, которая занимается организацией платежей на сайтах и в мобильных приложениях, решили сделать перевод интересного аналитического материала – глобального опроса среди разработчиков за 2016 год, проведенного сайтом Stack Overflow. Чтобы не утомлять вас чтением действительно объемного исследования, мы выбрали самые интересные, на наш взгляд, слайды.   Общая информация  Каждые 8 секунд (или около того) кто-то из разработчиков публикует свой вопрос на Stack Overflow. В этом же году настал черед Stack Overflow: более 56 тысяч разработчиков из 173 стран ответили на задаваемые вопросы.  Всего им было задано 45 вопросов. Если вкратце, то получилась следующая картина:  Разработчики обожают Rust. Даже разработчики бэкенда знают JavaScript. Только 7% разработчиков считают себя «настоящими рок-звездами». Большинство разработчиков предпочитает собак кошкам (за исключением программистов из Германии). "
MrShoor;Delphi. Что таит в себе TDictionary;https://habr.com/ru/post/282902/;" Доброго времени суток. А знаете ли вы, что не все хеш таблицы одинаково полезны? Сейчас я расскажу вам историю, как одна плохая хеш таблица скушала всю производительность, и не поморщилась. И как исправление этой хеш таблицы ускорило код почти в 10 раз. Конечно, согласно теме — в статье речь пойдет о Delphi, но даже если вы не Delphi разработчик, то все равно советую заглянуть под кат, а после прочтения статьи в исходный код хеш таблиц, которые вы используете. А Delphi разработчикам я советую вообще отказаться от стандартного TDictionary. "
AlexSerbul;Как мотивировать программистов в рамках «эффективных» технологий — на войне как на войне;https://habr.com/ru/post/297368/;"Разработчикам не нравятся технологии в компании и хочется что-то сделать на новом, крутом, современно языке и… И? ИИИ? Копнем историю. Полезно вспомнить, как все начиналось. Математика оказалась нужна людям далеко не из любопытства: государственная экспансия, строительство, военные технологии, бизнес — они одними из первых испытали глубокую жажду в быстрых и правильных вычислениях. Квадратные и кубические уравнения научились правильно решать лишь тогда, когда они оказались нужны… купцам и артиллеристам. Синусы и косинусы тоже придумали не из-за большого ума — с их помощью стало возможным строить… нормальные дома, которые не падают :-)  А логарифмы… там вообще интереснейшая история. Они оказались купцам (а за ним морякам и пиратам) и военным настолько нужны, что некоторые математики средневековья жизнь потратили лишь на составление их таблиц! Посмотрим в глаза героям — Джон Непер:   "
rzhikharevich;Модуль ядра Linux на Swift;https://habr.com/ru/post/305530/;  Раз Swift компилируется в нативный код, то почему бы не попробовать на нём написать модуль ядра? Всех заинтересовавшихся просьба под кат!
vindi;Управление зависимостями в Python: похоже, уже можно пользоваться;https://habr.com/ru/company/Voximplant/blog/307848/;"В большинстве популярных языков программирования и экосистем с зависимостями все плохо. Как правило, создатели нового языка программирования уделяют этому не очень много внимания: просто потому, что в новом языке еще нет сотен тысяч библиотек для разных архитектур и версий, нетривиальным образом зависящих друг от друга. А когда эти сотни тысяч библиотек появляются – уже поздно что-нибудь менять.  Единственным на моей памяти исключением является node.js, авторы которой разработали «с чистого листа» на удивление удачную систему управления зависимостями. Ну, как удачную? Проблем там тоже много, начиная автовыполняемыми скриптами и заканчивая переходом от древовидной к flat структуре в 3-й версии. Но по сравнению с тем, что на тот момент было в других языках, нода — это прорыв.  Совсем недавно экосистема пополнилась новой утилитой rnpm, которая позволяет одной командой устанавливать React Native зависимости. В которых, на секундочку, может быть бинарный код для android и ios. Для разных архитектур. И все это работает из коробки. Мы в Voximplant хорошо знакомы с этой штукой: с ее помощью ставится наш собственный React Native SDK.  Вашему вниманию предлагаем интересную статью, опубликованную всего два дня назад, в которой очень подробно рассказывается про управление зависимостями в Python. Про историю развития. Про проблемы. И, что самое ценное — про то, как сообщество их решает. Под катом адаптированный для Хабра перевод и возможность обсудить печальную тему зависимостей. И не только для Python. "
jkeee;Спикеры Linux Piter #2 отвечают;https://habr.com/ru/company/dell_technologies/blog/314578/;"Спикеры конференции Linux Piter #2, которая состоится 11-12 ноября 2016 года в Санкт-Петербурге, поделились с нами своим мнением о важных текущих изменениях в экосистеме Linux, и чего нам ждать в ближайшем будущем; рассказали, каким инструментарием они пользуются в работе, порекомендовали нам полезные ресурсы, блоги, сообщества, конференции по своей тематике, ну и, конечно, ответили на самый главный вопрос: «какими дистрибутивами они пользуются?».    Мы получили много ответов на нашу мини-анкету и решили все собрать в одной публикации, не разбивая полученный материал на несколько постов, тем более что читается эта статья на одном дыхании. "
ru_vds;JavaScript-тренды, на которые стоит обратить внимание в 2017-м;https://habr.com/ru/company/ruvds/blog/319162/;"  Я решил написать этот материал после того, как увидел твит Дэна Абрамова, за который хочу сказать ему огромное спасибо. Дэн задал своим подписчикам вопрос о самых интересных событиях в мире JavaScript, которые достойны внимания широкой общественности.  What is the most interesting thing happening in the JavaScript world that deserves more exposure?— Dan Abramov (@dan_abramov) December 29, 2016  Любители JS на вопрос откликнулись, под твитом собралась целая гора ответов. Каждый говорил о том, на что, по его мнению, стоит обратить внимание в 2017-м году. В результате получилась весьма занимательная подборка, из которой я выбрал всё лучшее и добавил пояснения. "
mkevac;Новогодние обещания Go-разработчика;https://habr.com/ru/company/badoo/blog/320724/;" Фото Roman Pronskiy Это перевод поста одного из главных разработчиков языка Go, Расса Кокса, где он в традиционном для новогоднего времени формате дает себе обещания и планирует выполнить их. Наступило время принятия решений, и я подумал, что имеет смысл немного рассказать о том, над чем я хочу работать в наступившем году применительно к Go. Каждый год я ставлю перед собой цель — помочь Go-разработчикам. Я хочу быть уверен, что то, что делают создатели Go, оказывает положительное влияние на всех Go-разработчиков. Потому что у них есть масса способов совершить ошибку: например, можно потратить слишком много времени на очистку или оптимизацию кода, которому это не требуется; откликаться только на самые распространенные или недавние жалобы и запросы; излишне сосредотачиваться на краткосрочных улучшениях. Поэтому так важно взглянуть на все со стороны и заняться тем, что принесет больше всего пользы для Go-сообщества. В этой статье я опишу несколько основных задач, на которых я сосредоточусь в этом году. Это мой собственный список, а не всей команды создателей Go."
olegchir;Новый GC Epsilon. У джавы может не быть сборки мусора. Шок. Сенсация;https://habr.com/ru/post/321856/;Добрый день, господа! Спешу сообщить, что настают последние дни. Кажется, мир Java развился до такой степени, что то ли мы теперь можем спокойно использовать Rust вместо Java, то ли Java вместо Rust. Кровавые подробности ждут вас под катом. 
pronskiy;PHP-Дайджест № 103 – интересные новости, материалы и инструменты (12 – 26 февраля 2017);https://habr.com/ru/company/zfort/blog/322648/;"  Предлагаем вашему вниманию очередную подборку со ссылками на новости и материалы. Приятного чтения! "
BitFury;Bitfury: о команде, требованиях к кандидатам и открытых вакансиях;https://habr.com/ru/company/bitfury/blog/325254/;"О том, что BitFury за компания и чем она занимается, мы рассказали в предыдущем посте. А сегодня о нашей команде расскажет Анна Минец, Chief Human Resources Officer (The BitFury Group).    На начало 2017-го года в компании работает 250 человек, причем 150 из них присоединились к нам в течение прошлого года. Мы продолжаем расти и инвестировать в высококвалифицированный персонал. В среднем через день где-то в мире в команду BitFury приходит новый сотрудник.  Состав команды разработчиков Около 20% нашей команды – программисты. Скоро этот процент возрастет: сейчас мы уделяем все больше внимания софтверным продуктам, платформе Data Analytics, Digital Assets PaaS, Lightning Network (p2p), поэтому мы крайне заинтересованы в талантливых разработчиках. Средний возраст soft-разработчиков — 28-30 лет, в hardware сотрудники чуть старше – ближе к 40. "
wldhx;GoTo MeetUp: Security by Default;https://habr.com/ru/company/goto/blog/326764/;" Информационная безопасность — это важно; впрочем, это знание мало кому помогает. Количество соединенных general-purpose компьютеров (==сложность) растёт каждый день, происходят очень реальные инциденты от Heart или Cloudbleed до Stuxnet или проблем с бортовым компьютером Toyota (когда машина не останавливается), и ситуация не становится лучше сама по себе. Становится хуже, потому что ""интернет вещей"" — это стартапы, делающие физическую инфраструктуру типа лампочек или дверных замков (разработчики SCADA плачут кровавыми слезами). Потому что огромное количество кода пишется на memory-unsafe языках. Потому что образование разработчиков — это, как правило, либо про фичи (проекты / этожпрототип), либо про фундаментальные алгоритмы (что не помогает пониманию того, что система работает не в вакууме). Кажется, что основных корней проблемы два: это небезопасный инструментарий — например, ЯП (C/C++) и библиотеки (OpenSSL), и люди. Люди забывают про ИБ, думают ""выпустим что-нибудь, а потом разберёмся"", не понимают tradeoff'ы своих инструментов (то, что ""C — это быстро"", знают все, а вот про memory unsafety и масштаб UB — немногие), etc. Первая проблема сейчас решается сообществом: разрабатываются безопасные языки типа Rust и простые, понятные библиотеки типа TweetNaCl. Остаётся вторая (ведь хорошим инструментам надо ещё научить, как и соответствующему мышлению). Поэтому мы проводим митап по информационной безопасности Security by Default."
Barrayar;Игры, в которых нужно писать код: Grid Garden, Elevator Saga и другие;https://habr.com/ru/company/mailru/blog/328806/; В детстве мы постигаем премудрости жизни через игру. Это важнейший элемент развития личности, социальных навыков, получения знаний об окружающем мире. Игры — хороший «контейнер» для донесения и закрепления каких-либо знаний. Яркий пример — игры, в которых нужно писать код. Наверняка все вы о них слышали, а в некоторые даже играли. Их первичная задача — развлечь людей, уже владеющих навыками программирования, но они могут использоваться и для обучения. Эти игры помогут освежить свои знания по тому или иному языку, отвлечься и заняться более простой алгоритмической задачей.
Cloud4Y;ТОП 100 англоязычных сайтов об IT;https://habr.com/ru/company/cloud4y/blog/329936/;"  Привет, Хабр!  Чтение на английском может быть полезно как в изучении иностранного языка, так и в пополнении профессиональных знаний. Мы задались вопросом, какие новостные порталы, блоги и прочие Интернет-ресурсы на английском языке имеют четкую IT-направленность и наиболее интересны разработчикам, админам, тестировщикам, веб-дизайнерам и людям других технических специальностей в России?   Чтобы создать ТОП полезных англоязычных IT-ресурсов, мы решили воспользоваться статистикой Хабрахабра. Наряду с авторскими публикациями, здесь публикуются и переводы интересных материалов. Такие посты отмечены тегом «Перевод» и содержат ссылку на оригинал.  Всего за последние полгода на Хабре было около 1000 переводных статей. Мы посчитали для каждого источника переводов средний рейтинг публикации, среднее число просмотров и количество добавлений в Избранное. Затем были удалены сайты со средним рейтингом публикаций менее 16 и числом просмотров менее 4000. Полученные сайты мы отсортировали по числу переводов на Хабре из этого источника, так как, возможно, это характеризует ресурс как часто обновляемый и «объёмный».  Собрав и проанализировав таким образом данные о публикациях, мы получили наш ТОП100 компьютерных сайтов на английском, который мы надеемся будет полезен и вам."
igormich88;Когда 2 + 2 = «4»;https://habr.com/ru/post/330176/;"Во время отдыха от отладки JavaScript, я читал статью про особенности PHP и неожиданно задумался каковы же будут результаты сравнения 2 + 2 = «4» для разных языков программирования. И вот что из этого получилось.   Итоговая таблица для тех кто не хочет много читать   Результат Ошибка компиляции False True   Языки C++ Pascal FORTRAN-95 Java C# Go Rust  Haskel  C Lisp Python Lua Ruby  JavaScript PHP Perl    Компилятор C выдаёт предупреждение, компилятор C++ ошибку которая превращается в предупреждение если указать флаг -fpermissive.   Под катом для каждого из языков приведена строчка кода, вызвавшая тот или иной результат, с небольшим комментарием.  Бонусом — функции вывода на консоль для этих языков. "
tangro;Изучите все языки программирования;https://habr.com/ru/company/infopulse/blog/331934/;"Когда я был ещё первокурсником, то познакомился с другим студентом, который утверждал, что может писать код на любом языке программирования, который я смогу назвать. Я был несколько шокирован и ответил подначкой:   — Что, даже на том нечитаемом эзотерическом языке, где есть всего пара команд, которые едва-едва симулируют машину Тьюринга?  — Да, этот язык называется brainfuck. Я знаю brainfuck.  И это был не трюк — мы проверили. Я называл известный мне язык программирования, он тратил пару минут в Интернете на то, чтобы освежить свои знания по нему — и был способен писать на этом языке работающие алгоритмы. Я никак не мог понять этого. Ему, как и мне, было тогда около 18 лет — как он мог в этом возрасте знать все эти языки?   Интерпретатор brainfuck, написанный на brainfuck  Сегодня у меня всё ещё вызывает уважение та демонстрация умений моего однокурсника, но я уже не шокирован ею. После того, как я сам выучил уже не один язык программирования, мне стало понятно, что отличаются друг от друга они значительно меньше, чем того можно было бы ожидать. На каком-то этапе обучения я уже обращал внимание не столько на синтаксис языка программирования, сколько на лежащие в его основе идеи, модель памяти, принципы выполнения инструкций. Всё это можно назвать теорией языков программирования, с точки зрения которой разные языки просто реализуют несколько различные версии одних и тех же базовых идей.   Сегодня я советую своим студентам «постараться изучить все языки программирования». Подумайте сами — ведь эта идея лучше, чем все вот эти «В этом году я выучу Go! Ой, нет, теперь говорят что в моде Rust — выучу лучше Rust! Или Swift ...». Просто выучите все — не ошибётесь. А эта статья, возможно, вам в этом немного поможет."
wldhx;Чёрная Лямбда ефрейтора Волкова: новое направление и гранты на летнюю школу;https://habr.com/ru/company/goto/blog/333828/;" Не далее чем в июле прошла очередная школа GoTo. В этот раз мы решили внести некоторое разнообразие в стандартный набор Ардуин, Питонов, и прочих, и случился Хаскелль. Небольшое отделение из 6 юношей (кусочек нашего общего взвода в 60 человек) бодро промаршивало по -исчислению, основам синтаксиса, прошло посвящение в ФП написанием факториала, посворачивало списки, научилось словосочетанию ""параметрически полиморфная функция высшего порядка"" и присущему этому пониманию типов и тайпклассов под предводительством ефрейтора Волкова. А ещё у нас были элементы инфобеза, криптовалюты, React Native, nix, и, конечно, git. И мы начали писать книгу про Haskell. В общем, получилось задорно. (Под катом картинки участников, лямбды, илосос, анонс нового направления и гранты)"
NIX_Solutions;Мьютексы и захват замыканиями в Swift;https://habr.com/ru/company/nix/blog/336260/;"  Перевод статьи Мэтта Галлагера.  В этой статье речь пойдёт об отсутствии потокового выполнения (threading) и инструментов синхронизации потоков в Swift. Мы обсудим предложение о внедрении «многопоточности» (concurrency) в Swift и то, как до появления этой возможности потоковое выполнение в Swift будет подразумевать использование традиционных мьютексов и общего изменяемого состояния (shared mutable state).  Использовать мьютекс в Swift не особенно сложно, но на этом фоне хотелось бы выделить тонкие нюансы производительности в Swift — динамическое выделение памяти во время захвата замыканиями. Мы хотим, чтобы наш мьютекс был быстрым, но передача замыкания для исполнения внутри мьютекса может снизить производительность в 10 раз из-за дополнительных расходов памяти. Давайте рассмотрим несколько способов решения данной проблемы."
beduin01;Лучше чем C;https://habr.com/ru/post/336392/;"В настоящее время у системных программистов практически нет выбора какой язык использовать. По хорошему все варианты сводятся или к чистому Си или к Rust, хотя как показывает опыт далеко не всем нравится его синтаксис.   Благодаря усилиями команды разработчиков языка у D теперь появилось совместимое с чистым Си подмножество обладающее не только привычным для любого программиста Си синтаксисом, но и значительно расширяющее функционал языка. Новое подмножество называется «betterC». Это подмножество позволяет перевести написание Си приложение на новый уровень."
it_man;Какие языки программирования самые популярные: статистика ИТ-платформ;https://habr.com/ru/company/cloud_mts/blog/341486/;Каждый язык программирования имеет свою сферу применения. Однако некоторые из них используются чаще других. Мы задались вопросом, какой язык программирования наиболее популярен. Для этого мы проанализировали статистику нескольких IT-платформ: GitHub, Stack Overflow, HN, Хабрахабр и др.   
m1rko;Какие самые нелюбимые языки программирования?;https://habr.com/ru/post/341516/;"На Stack Overflow Jobs каждый может опубликовать собственную Developer Story, чтобы поделиться достижениями и поспособствовать карьерному росту. При публикации можно добавить к статье теги, соответствующие языкам и технологиям, с которыми вы бы хотели работать и с которыми бы не хотели:    Это даёт нам возможность изучить мнения сотен тысяч разработчиков. Есть много способов измерить популярность языка. Например, мы часто использовали для изучения трендов статистику визитов на Stack Overflow или просмотров вопросов. Но данные о тегах — уникальная возможность посмотреть, что людям не нравится, когда у них есть возможность сказать об этом в резюме.  (Некоторый анализ я публиковал в личном блоге два года назад, но эта статья дополнена более свежими данными и бóльшим количеством иллюстраций)."
vorona_karabuta;Приглашаем на конференцию FPConf 2017;https://habr.com/ru/company/railsclub/blog/341656/;"Привет!   2 декабря ждем всех, кто любит делать это функционально на третьей конференции FPConf — конференции о Haskell, Scala, Clojure, Elixir, Kotlin, F# и функциональных подходах в программировании фронтендов, бэкендов и чего угодно на чем угодно. Больше монад, лямбд, замыканий! Всем иммутабельность, друзья :)  Традиционно, приглашаем как опытных функциональщиков, так и тех, кто только хочет получить вдохновение и расширить горизонты.  Цена билета сейчас — 5000 рублей. Регистрация тут.  Что в программе:   Arnaud Spiwack, core-разработчик Coq Proof Assistant, старший архитектор в Tweag I/O  USING HASKELL TO GREAT EFFECT  It is beyond cliché, nowadays, to say that testing is really important. This is even more so in I/O intensive applications because so many things can go wrong. Unfortunately, testing I/O intensive applications is particularly hard. We have to mock all our files, data-bases, and so on. But even so, we're only scratching the surface: so many things can go wrong. How do we test for absence of deadlocks? Of races?   I came to the conclusion that Haskell's insistence on purity made it, paradoxically, one of the best languages to write I/O intensive programs. The reason for this is that Haskell makes it very easy to mock every single aspects of the I/O fabric, hence testing is more powerful. Up to checking for the absence of deadlocks and races. This talk will discuss the programming patterns which emerge from this point of view, and, of course, encourage you do use them in your programs."
pik4ez;Куда катится техничка с полторашкой: хакатоны в Avito;https://habr.com/ru/company/avito/blog/342466/;В моём прошлом посте я рассказывал о хакатонах. Разных, хороших. Настолько хороших, что и внутри компании захотелось устроить собственные соревнования. В посте расскажу, как проходили хакатоны в Avito, какие проекты реализовали, про техничку с полторашкой, кодокатицу, свидетеля столовой и носочки с котиками. 
bibilov;GoTo в ИТМО: Ботали неделю. Порвали 2 баяна;https://habr.com/ru/company/goto/blog/342996/;"  Совсем недавно закончилась очередная школа GoTo в СПб. В отличие от прошлой осени, в этот раз Питер порадовал нас большим количеством солнечных и теплых ноябрьских дней, их было целых два. В один из этих дней боевые единицы из юных и не очень программистов отправились добывать код: поцеловать незнакомых петербуржских девушек, пройти кастинг в Мариинку на эскалаторе, накормить Олега Георгиевича кровью невинного программиста и запечатлить лик Наполеона между ног коня.  В остальные дни мы по старинке делали мы не менее увлекательные проекты по биоинформатике, машинному обучению, распределенным системам и гоняли чаи на кухне с разговорами о прекрасном. Отчет ИТМО можно прочесть здесь.  Не возьмемся судить о том, что читателю интереснее, обо всем по порядку под катом. "
olegchir;«Блендер на 28 докладов, каждый из которых равен десяти статьям» — интервью с Программным комитетом HolyJS 2017 Moscow;https://habr.com/ru/company/jugru/blog/343454/;"Для обычного пользователя программы, которые мы пишем — это магия. Фронт, бэк — неважно. Человек нажимает на кнопку в браузере, и вдруг случается чудо. Но мы-то знаем, что это не чудо, а результат упорной работы. Когда приходишь на конференцию, кажется, что всё работает само собой. Всегда есть интересный доклад. В нём есть конкретные места, которые можно использовать в работе прямо сейчас, которые стоит обсудить с друзьями и коллегами или которые просто почему-то цепляют тебя лично. Это происходит само собой, просто по статистике? Если набрать достаточное количество докладов, всё получится автомагически? Как бы не так. Всё подстроено. Как программу на JS проектируют архитекторы, так и за каждой конференцией стоит команда отличных инженеров, которые проектируют её специальным образом. Они проектируют не только структуру, но и вместе с докладчиками «отлаживают» каждый доклад, строчка за строчкой, раз за разом. Проводят кросс-ревью, оценку, починку багов. Пишутся специальные инструменты и выкладываются на GitHub. И так до тех пор, пока не скомпилируется хорошо работающая, безбажная конференция. Наверное, каждый иногда хотел пообщаться с разработчиками тех инструментов, которыми мы все пользуемся. К примеру, кто хотел бы сказать пару ласковых создателям React или Node.js? А кто хотел бы узнать от них парочку тайн о внутренней кухне проекта? Это интервью — с разработчиками конференции HolyJS 2017 Moscow, с её Программным комитетом. Мы будем обсуждать:  какие сложности возникают при разработке программы конференции и как их побеждают; кто допущен к сакральному процессу отбора докладов и нужно ли для этого быть богом JavaScript; совместима ли работа в ПК с обычной жизнью; какие доклады стоит послушать и на какие ни в коем случае не стоит приходить хипстерам; кучу рандомных интересных фактов.  "
32bit_me;Неопределённое поведение != Небезопасное программирование;https://habr.com/ru/post/343882/;"От переводчика: Предлагаю вашему вниманию перевод двух постов из блога John Regehr. Я решил объединить их в одной публикации потому, что, во первых, они имеют небольшой объём, и, во-вторых, второй пост является продолжением первого, и является ответом на комментарий к первому посту на Hacker News.  Ссылка на первый пост Ссылка на второй пост   Часть 1. Неопределённое поведение != Небезопасное программирование Неопределённое поведение (UB) в C и C++ представляет собой опасность для разработчиков, особенно если код работает с недоверенными данными. Менее известно, что неопределённое поведение существует в промежуточном представлении (IR) большинства оптимизирующих AOT компиляторов. Например, LLVM IR имеет значение undef и «отравленные» значения в дополнение к взрывоопасному UB языка С. Когда люди начинают беспокоиться об этом, типичная реакция такова: “Что? LLVM IR так же плох, как и C!” Эта статья объясняет, почему считать так неверно."
SBKarr;Скриптуем на WebAssembly, или WebAssembly без Web;https://habr.com/ru/post/344246/; Представлять WebAssembly не нужно — поддержка уже есть в современных браузерах. Но технология годится не только для них. WebAssembly — кроссплатформенный байткод. Значит, этот байткод можно запустить на любой платформе, где есть его виртуальная машина. И для этого вовсе не нужен браузер и Javascript-движок. Далее — проверка концепции на прочность, инструментарий и первый скриптовый модуль.
akornilov;Больше чем Java?;https://habr.com/ru/post/345100/;"Закончив очередной проект на Java, я попытался разобраться в причинах накопившегося раздражения. Да я люблю Яву и все такое, но… Есть несколько «но», которые досаждают. Приходится писать довольно много шаблонного кода, с генерацией которого вполне может справиться сам компилятор, IDE, конечно, выручает, но это не решение проблемы, а скорее костыль: если что-то изменилось, нужно перегенерить и вычистить и т.д. Проверки на null! Это зубная боль, по-хорошему, нужно делать их всегда дабы не нарваться на «нежданчик» в виде NullPointerException в самый неподходящий момент. Короче говоря, появилось желание посмотреть, что еще появилось в природе и сможет ли это нечто заменить мне Java. Дальше имеет смысл описать участников данного сравнения. Сразу скажу, что не претендую на полноту анализа, к сожалению, у меня было слишком мало времени, чтобы как следует познакомиться с каждым языком.  Обязательные требования к претендентам, которые у меня были:  • Язык общего назначения • Кроссплатформенность (хотя бы Windows/Linux) • Стабильность • Статическая типизация • Автоматическая уборка памяти • Поддержка полноценной объектно-ориентированной парадигмы • Хорошая поддержка в IDE (Eclipse, IDEA или на худой конец NetBeans) • Безгемморойный доступ к существующим фреймворкам/библиотекам • Производительность на уровне Java"
m1rko;Ещё большее ускорение WebAssembly: новый потоковый и многоуровневый компилятор в Firefox;https://habr.com/ru/post/347158/;"Оба авторе: Лин Кларк — разработчик в группе Mozilla Developer Relations. Занимается JavaScript, WebAssembly, Rust и Servo, а также рисует комиксы о коде.  Люди называют WebAssembly фактором, меняющим правила игры, потому что эта технология ускоряет выполнение кода в вебе. Некоторые из ускорений уже реализованы, а другие появятся позже.  Одна из техник — потоковая компиляция, когда браузер компилирует код во время его загрузки. До настоящего времени эта технология рассматривалась лишь как потенциальный вариант ускорения. Но с выпуском Firefox 58 она станет реальностью.  Firefox 58 также включает в себя двухуровневый компилятор. Новый базовый компилятор компилирует код в 10–15 раз быстрее, чем оптимизирующий компилятор.  Вместе эти два изменения означают, что мы компилируем код быстрее, чем он поступает из сети.    На десктопе мы компилируем 30-60 МБ кода WebAssembly в секунду. Это быстрее, чем сеть доставляет пакеты."
ratijas;Своя СУБД за 3 недели. Нужно всего лишь каждый день немного времени…;https://habr.com/ru/post/347274/;"Своя СУБД за 3 недели. Нужно всего-лишь каждый день немного времени уделять архитектуре; и всё остальное время вкалывать на результат, печатая и перепечатывая сотни строк кода.  По закону Мерфи, если есть более одного проекта на выбор — я возьмусь за самый сложный из предложенных. Так случилось и с последним заданием курса о системах управления базами данных (СУБД).  "
shifttstas;Telegram MTPROTO Proxy — всё что мы знаем о нём;https://habr.com/ru/post/359348/;"  Сразу после событий с блокировками Telegram в Иране и России, в бета-версиях мессенджера начал появлятся новый тип Proxy, а если быть точным, новый протокол — MTProto Proxy.   Этот протокол был создан командой Telegram для решения проблем обхода блокировок, но так ли он хорош?"
HuleGun;Экосистема разработчиков в Telegram;https://habr.com/ru/post/401383/;"  Многим уже известно, что в мессенджере Telegram помимо прямого общения между двумя людьми также реализованы другие полезные инструменты:    Каналы — некий симбиоз сообщений и списков рассылки, где автор или коллектив авторов обращаются к своей аудитории, но аудитория не может влиять на содержимое канала.  Группы — своеобразные чаты между большим количеством пользователей, где каждый участник является полноправным представителем сообщества и может влиять на повестку дня.  Боты — специальные аккаунты в Telegram, созданные для того, чтобы автоматически обрабатывать и отправлять сообщения, часто используются для интеграции c сервисами.  На днях на просторах Github, наткнулся на список каналов, групп, ботов в Telegram, который пополняется непосредственно разработчиками, использующими этот проект совместной разработки. Под катом можно увидеть саму IT-подборку, из которой каждый сможет выбрать что-то интересное для себя. "
alizar;Вышел Firefox 52 c поддержкой WebAssembly;https://habr.com/ru/post/402173/;" 3D-рендеринг демки Zen Garden в браузере Firefox 52 c поддержкой WebAssembly  Mozilla выпустила Firefox 52, последнюю версию браузера с поддержкой операционной системы Windows XP. Сделан ряд важных изменений: упрощено подключение к хотспотам, где нужно сначала залогиниться в браузере, появились предупреждения об опасности, если страница запрашивает пароль по небезопасносму соединению (не HTTPS), исчезла поддержка плагинов NPAPI (кроме Flash, а в билде ESR останется полная поддержка), закрыто 28 уязвимостей.  Но ничто это не сравнится с главным и фундаментальным нововведением — поддержкой низкоуровневого языка программирования WebAssembly (wasm) типа ассемблера, который называют одной из самых значительных инноваций веб-платформы за последнее десятилетие. Это то, чего не хватало JavaScript."
varanio;Как выживать в изменяющемся мире разработки;https://habr.com/ru/post/414001/;" С коллегами зашел разговор о постоянном самосовершенствовании программиста в личное время. Нужно всё время бежать, чтобы просто оставаться на месте. Сам-то я это дело люблю, и, несмотря на наличие троих детей, успеваю пощупать новые концепции. Но множество людей просто устало от такой беготни, и их можно понять. Взять к примеру, мир фронтенда. Со знанием JavaScript пятилетней давности сейчас хорошую работу не найдешь. Сейчас RequireJS + Grunt не прокатят, надо знать React, Webpack, современный ES или TypeScript и т.д. Причем в следующем году многое уже снова устареет.  При этом не всегда на работе можно получить новые знания, потому что зачастую там тонны легаси (если долго пилится какой-то продукт — это неизбежно), которые никто переписывать ""по модному"" не даст. Что же делать? Делать pet projects по ночам? Или пытаться сменить направление развития на более стабильное во времени?  Особенно часто этот вопрос встает у программистов с детьми. Как оставаться актуальным на рынке в долгой перспективе, не тратя на это всё личное время?"
Kate_Milovidova;Доклады с Минской С++ конференции CoreHard Spring 2018;https://habr.com/ru/company/pvs-studio/blog/414467/;" 7 — 8 апреля сообщество CoreHard провело в Минске восьмую международную конференцию CoreHard Spring 2018, посвященную языку С++ и сопутствующим «хардкорным» технологиям. В конференции участвовали спикеры из ведущих IT-компаний Беларуси, России, Украины, Германии и Голландии. Они рассказали о своем опыте в разработке и тестировании.  Теперь доклады с конференции размещены в свободном доступе на YouTube и все желающие могут познакомиться с ними. Благодарим организаторов конференции."
WizardBox;Могут ли PWA (Progressive Web Apps) образца 2018 года составить достойную конкуренцию нативным приложениям?;https://habr.com/ru/company/google/blog/414609/; Когда изменения происходят постепенно, шаг за шагом, порой бывает трудно заметить насколько они драматичны и всеобъемлющи. Казалось бы всего несколько лет назад web платформа проигрывала нативным приложением практически по всем фронтам, и пропасть между тем, что можно было сделать в браузере, и тем, что было доступно приложениями, загружаемым из магазинов, таких как Apple App Store или Google Play Store, была ужасающе огромной. Одним из свидетельств этой пропасти является то, что в 2007 году web по факту был основной платформой разработки приложений для первого iPhone, но эта платформа явно не взлетела. App Store же появился только год спустя со второй версии операционной системы, и сразу же случился бум нативных приложений, который и сформировал рыночный ландшафт таким, каким мы его знаем теперь.  Многое изменилось с тех пор, и web технологии на месте не стояли. Они шли по пути снятия ограничений, и то, что раньше было принципиально невозможно — работа оффлайн, фоновая синхронизация данных, push-нотификации, поддержка входа в один клик и оплаты с помощью кредитных карт, Apple Pay, Google Pay и других методов, встроенная в браузер — теперь реальность. Эти функции органично дополняют основную часть платформы — HTML/CSS и JavaScript, которая в последние годы развивалась более чем активными темпами. Например новый проект Houdini, который ещё находится на достаточно ранней стадии, снимает почти все ограничения на то, что можно сделать с помощью CSS, давая возможность среди прочего создавать свои лэйауты и использовать их наравне с Grid и Flexbox, и открывая программный доступ к внутренностям CSS движка. Но даже и без Houdini уже сейчас можно создавать CSS анимации, работающие со скоростью 60 FPS (frames per second).
olegchir;10 причин [не] использовать k8s;https://habr.com/ru/company/jugru/blog/416161/;"Сегодня мы поговорим про Kubernetes, про грабли, которые можно собрать при его практическом использовании, и про наработки, которые помогли автору и которые должны помочь и вам. Постараемся доказать, что без k8s в современном мире никуда. Противникам k8s также предоставим отличные причины, почему не стоит на него переходить. То есть в рассказе мы будем не только защищать Kubernetes, но и ругать его. Отсюда в названии появилось это [не].  Эта статья основана на докладе Ивана Глушкова (gli) на конференции DevOops 2017. Последние два места работы Ивана так или иначе были связаны с Kubernetes: и в Postmates, и в Machine Zone он работал в инфракомандах, и Kubernetes они затрагивают очень плотно. Плюс, Иван ведет подкаст DevZen. Дальнейшее изложение будет вестись от лица Ивана.  "
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #262 (16 июля — 22 июля);https://habr.com/ru/company/productivity_inside/blog/417851/;В нашем новом дайджесте гипотезы и A/B-тесты, борьба с собой в Pixonic, React Native и Rust, аналитика SDK и доходы приложений.  
anastasiak2512;Все, что вы давно просили, в одном релизе — CLion 2018.2;https://habr.com/ru/company/JetBrains/blog/418729/;"Привет, Хабр!  Не знаем, насколько жарко у вас за окном, но у нас в JetBrains эти недели точно жара — релизная. Одну за другой мы опубликовали обновленные версии 2018.2 почти всех наших инструментов на базе платформы IntelliJ: WebStorm, IntelliJ IDEA, PyCharm, DataGrip, GoLand, PhpStorm, RubyMine и CLion.  Для команды CLion этот релиз особенный, так как включает в себя результаты нашей работы по трем очень важных направлениям:   Clangd как основа для нового экспериментального движка для разбора кода на C++. Улучшения производительности IDE за счет новых архитектурных решений. Новые проектные модели, поддерживаемые в CLion.  А также поддержка Google Sanitizers, возможность пересборки отдельного файла и многое другое!   Ниже мы поговорим про улучшения и нововведения подробно, а самые нетерпеливые могут прямо сейчас скачать бесплатную 30-дневную версию с нашего сайта и попробовать новые возможности на своем проекте или специально подготовленном демо-проекте с GitHub."
tanna;Курс «Языки веб-программирования» (на основе Ruby) от МГТУ им. Н. Э. Баумана на канале Технострим;https://habr.com/ru/company/mailru/blog/419765/;"  В этой статье мы расскажем о курсе «Языки веб-программирования», который читается на кафедре «Компьютерные системы и сети» (ИУ-6) МГТУ им. Н.Э. Баумана. Примеры приводятся на Ruby, а сам курс и представляет собой 16 видеолекций, доступных бесплатно на канале Технострим. В «Бауманке» курс читается для студентов второго курса, уже знакомых с высокоуровневыми языками программирования, такими как Pascal, C++ или Java. Основной акцент делается на системное понимание технологий, используемых в веб-программировании, а не на глубину освоения именно технологий Ruby. Поэтому курс также будет полезен слушателям, имеющим отрывочные знания о веб-технологиях на любых языках. "
fokus-lop;Выбор языка программирования: 3 совета от программиста из Apple;https://habr.com/ru/company/skillbox/blog/421533/;"  От переводчика: эта статья — перевод материала, написанного программистом Аластером Парагасом (Alastair Paragas) из Apple.Он работал с такими языками программирования, как Javascript, Python, PHP, Java, Scala, Haskell, Swift и Rust. Аластер делится собственными размышлениями на тему выбора и изучения «своего» языка, ведь этот вопрос актуален как для новичков, так и для профессионалов, которые хотят выбрать новый инструментарий.  Изучаете ли вы язык программирования ради трудоустройства или повышения квалификации или же это чистой воды хобби, рано или поздно вам придется выбирать между ними. Как это сделать? Вопрос непростой, но ответить на него можно так: каждый день это делают тысячи программистов. Чтобы облегчить себе задачу, стоит следовать нескольким принципам."
ru_vds;Почему человек из мира Java стал горячим сторонником Node.js и JavaScript?;https://habr.com/ru/company/ruvds/blog/421741/;Дэвид Хэррон, автор материала, перевод которого мы публикуем сегодня, задался следующим вопросом: «Должен ли человек, работавший более 10 лет в Sun Microsystems, в команде Java SE, до последнего вздоха думать лишь о байт-коде Java и создавать экземпляры абстрактных интерфейсов?». Он задавал этот вопрос применительно к себе, и для него платформа Node.js, после Java, оказалась подобна глотку свежего воздуха. Дэвид говорит, что когда он был уволен из Sun в январе 2009 года (прямо перед поглощением этой компании Oracle), он узнал о Node.js. Эта технология его зацепила. Что значит «зацепила»? С 2010-го года он много писал о программировании для Node.js. А именно, написал несколько книг, в том числе — «Node.js Web Development», четвёртое издание которой вышло в этом году. Он подготовил множество небольших материалов о Node.js, опубликованных в интернете. Фактически, он уделил очень много времени и сил, рассказывая о платформе Node.js и о возможностях JavaScript. Почему того, кто раньше занимался исключительно Java, так увлекли Node.js и JavaScript?  
olegchir;«Крайне мало кто реально пишет бэкенд на Котлине» — интервью с Пашей Финкельштейном;https://habr.com/ru/company/jugru/blog/421749/;Как стать программистом от безысходности и подняться к вершинам успеха? Сегодня в нашей виртуальной студии на вопросы отвечает Паша asm0dey Финкельштейн. Паша – один из немногих, кто разбирается в создании бэкендов на Kotlin. Кроме того, он пилит опенсорс, активно участвует в жизни сообщества, и, на минуточку, — побывал на почти всех наших московских Java-конференциях.  
divan0;Обработка ошибок в Go 2;https://habr.com/ru/post/422049/; Буквально пару дней назад в Денвере закончилась очередная, уже 5-я по счёту, крупнейшая конференция по Go – GopherCon. На ней команда Go сделала важное заявление – черновики предварительного дизайна новой обработки ошибок и дженериков в Go 2 опубликованы, и все приглашаются к обсуждению. Я постараюсь подробно пересказать суть этих черновиков в трёх статьях.  Как многим, наверняка, известно, в прошлом году (также на GopherCon) команда Go объявила, что собирает отчёты (experience reports) и предложения для решения главных проблем Go – тех моментов, которые по опросам собирали больше всего критики. В течении года все предложения и репорты изучались и рассматривались, и помогли в создании черновиков дизайна, о которых и будет идти речь. Итак, начнём с черновиков нового механизма обработки ошибок.
olegchir;«Высокий уровень самодисциплины». Джеффри Рихтер о том, как кодить, писать книги и создавать свои компании;https://habr.com/ru/company/jugru/blog/422251/;" Сегодня в нашей виртуальной студии один из самых известных дотнетчиков — Джеффри Рихтер.   В данный момент он — Partner Software Architect в Microsoft, работающий по направлению Distributed Cloud Apps & Storage. Иначе говоря, человек, который знает об Azure Storage всё.    F.A.Q.   Слишком много текста. О чём это всё?Чтобы вам было веселей читать, для этой статьи мы придумали более интересную вёрстку. Слева будут говорящие головы, а справа — текст. Если вам уныло листать до интересующей части, то в оглавлении есть анкерные ссылки. В ролях:   Евгений phillennium Трифонов (нетехнические вопросы)  Советы разработчикам по созданию компании Комбинирование разных видов деятельности Что читать, что изучать, как писать   Олег olegchir Чирухин (технические вопросы)  Зачем Рихтер изучает JS, Golang и Python Стоит ли продолжать писать на C++ Эволюция и будущее разработки на платформе Windows, .NET и вообще Захватит ли JavaScript мир, нужна ли типобезопасность Немного о пользе облачных провайдеров Что лучше иметь — личный самолет или личный вертолёт Как всё успевать    Почему эта статья попала в хаб JavaScript?Только для тех, кому интересно мнение архитектора Azure относительно JS и его позиция в холиваре о типобезопасности. Этот холивар перетекает у нас из интервью в интервью, и конца ему не видно.  Почему эта статья попала в хаб С++?Изначально Рихтер писал книги про C++. Только для тех, кому интересно мнение архитектора Azure относительно будущего и применимости C++    Джефф стал известен еще в начале 90-х, когда написал книгу о том, как программировать Windows 3.1. Его книга «Programming Applications for Microsoft Windows» стала классикой, позже выпускалась как «Windows via C/C++» и выдержала несколько изданий.  С появлением .NET он написал «CLR via C#» — тоже получилась классика, тоже несколько изданий. В то время он был одним из основателей компании Wintellect и, формально не будучи частью Microsoft, оказался более свободен в оценках. Чем и заработал репутацию крупного независимого эксперта по Windows. Это человек-легенда уровня Чарльза Петцольда и Дона Бокса.  "
Anton3;[CppCon 2018] Herb Sutter: На пути к более простому и мощному C++;https://habr.com/ru/post/425873/; В своём выступлении на CppCon 2018 Herb Sutter представил общественности свои наработки по двум направлениям. Во-первых, это контроль времени жизни переменных (Lifetime), который позволит обнаруживать целые классы багов на этапе компиляции. Во-вторых, это обновлённый proposal по метаклассам, которые позволят избежать дублирования кода, один раз описывая поведение категории классов и потом подключая его к конкретным классам одной строчкой.
olegchir;Когда Java наконец помрёт, что с этим делать и что будет с JPoint;https://habr.com/ru/company/jugru/blog/429814/;"  Один из важнейших вопросов интернета — «Когда же наконец джава помрёт?»  Почему это важно нам как Java-разработчикам? Очевидно, если Java вдруг начнёт тонуть, нужно побыстрей сбежать с тонущего корабля. А если наоборот, начнёт всплывать — переобуться на ходу и грести с удвоенной силой. Давайте посмотрим, что там творится."
shurup;В AWS представили Firecracker — «микровиртуализацию» для Linux;https://habr.com/ru/company/flant/blog/431192/;"  На AWS re:Invent 2018, что проходит в эти дни в Лас-Вегасе, состоялся анонс Firecracker — новой технологии виртуализации с открытым кодом, основанной на Linux KVM. Авторы обещают, что с ней «в доли секунды можно запускать легковесные микровиртуальные машины (microVMs) в невиртуализированной среде, получив преимущества и традиционных ВМ — в виде безопасности и изоляции рабочих нагрузок, и контейнеров — в виде эффективного использования ресурсов»."
lgorSL;Субъективное видение идеального языка программирования;https://habr.com/ru/post/435300/;"Дальнейший текст — моя точка зрения. Возможно, она позволит кому-то по-новому взглянуть на дизайн языков программирования или увидеть какие-то преимущества и недостатки конкретных фич. Я не буду лезть в частные подробности типа ""в языке должна быть конструкция while"", а просто опишу общие подходы. P.S. У меня когда-то была идея создать свой язык программирования, но это оказалось довольно сложным процессом, который я пока не осилил. Влияние предыдущего опыта На написание статьи меня вдохновила вот эта статья. Автор придумал свой язык программирования, и этот язык своим синтаксисом и особенностями оказался подозрительно похожим на Free Pascal, на котором и была написана реализация ВМ для языка. И это не совпадение. Языки программирования, на которых мы раньше писали, загоняют мышление в рамки языка. Мы сами можем не замечать этого, но сторонний наблюдатель с иным опытом может посоветовать что-то неожиданное или сам научиться чему-то новому. Рамки мышления немного раздвигаются после освоения нескольких языков. Тогда в языке А вам может захотеться иметь фичу из Б и наоборот, а ещё появится осознание сильных и слабых стороны каждого языка. Например, когда я пробовал придумать и создать свой язык, мои размышления кардинально отличались от тех, что были описаны в статье выше. Я думал о совершенно иных вещах в рамках совершенно иных терминов. Ниже я опишу фичи языка, которые я хотел бы видеть в ""идеальном"" языке программирования. Мой опыт: когда-то я начинал с паскаля, впоследствии познакомился с Java, Kotlin, C++, Python, Scheme, а основными языком считаю Scala. Как и в вышеописанном случае, мой ""идеальный"" язык имеет много общего со Scala. По крайней мере, я отдаю себе отчёт в этом сходстве)"
m1rko;Почему люди не используют формальные методы?;https://habr.com/ru/post/437296/;"На Software Engineering Stack Exchange я увидел такой вопрос: «Что мешает широкому внедрению формальных методов?» Вопрос был закрыт как предвзятый, а большинство ответов представляли собой комментарии типа «Слишком дорого!!!» или «Сайт — это не самолёт!!!» В каком-то смысле это верно, но мало что объясняет. Я написал эту статью, чтобы дать более широкую историческую картину формальных методов (FM), почему они на самом деле не используются и что мы делаем для исправления ситуации.  Прежде чем начать, нужно сформулировать некоторые условия. На самом деле существует не так много формальных методов: всего несколько крошечных групп. Это означает, что разные группы по-разному применяют термины. В широком смысле есть две группы формальных методов: формальная спецификация изучает запись точных, однозначных спецификаций, а формальная проверка — методы доказательства. Сюда входят и код, и абстрактные системы. Мало того, что мы используем разные термины для кода и систем, мы часто используем разные инструменты для их верификации. Чтобы ещё больше всё запутать, если кто-то говорит, что создаёт формальную спецификацию, обычно это означает и верификацию дизайна. А если кто-то говорит, что делает формальную верификацию, обычно это относится к верификации кода."
PatientZero;Коллапс волновой функции: алгоритм, вдохновлённый квантовой механикой;https://habr.com/ru/post/437604/;" Алгоритм Wave Function Collapse генерирует битовые изображения, локально подобные входному битовому изображению.  Локальное подобие означает, что   (C1) Каждый паттерн NxN пикселей в выходных данных должен хотя бы раз встречаться во входных данных. (Слабое условие C2) Распределение паттернов NxN во входных данных должно быть подобным распределению паттернов NxN в значительно большом количестве наборов выходных данных. Другими словами, вероятность встречи определённого паттерна в выходных данных должна быть близка к плотности таких паттернов во входных данных. "
phillennium;«Я был очень негативен по отношению к корутинам»: Артём Зиннатуллин об Android-разработке;https://habr.com/ru/company/jugru/blog/437948/;"  Среди Android-разработчиков Артём Зиннатуллин пользуется таким уважением, что про него можно сочинять аналог «фактов о Чаке Норрисе» — что-нибудь такое:   Артём так суров, что при его виде гитхаб сам зеленеет (кто из нас может похвастаться таким графиком contributions?) Артём так суров, что для него git — это мессенджер. Артём так суров, что в его приложениях context — это подкаст.  Когда на нашей конференции Mobius мы брали у него интервью, оно предназначалось для онлайн-трансляции. Но увидев, как на него ссылаются в Android-чате, мы решили, что на Хабре оно тоже может многих заинтересовать, и сделали для вас текстовую версию (видеозапись также прилагаем).  Как жить с проектом на миллион строк кода? В чём недостаток корутин Kotlin? А в чём неправ Google? Чем разработка в Сан-Франциско отличается от российской? Чему был посвящён доклад на Mobius? Под катом — обо всём этом."
olegchir;«Современный» C++: сеанс плача с причитаниями;https://habr.com/ru/company/jugru/blog/438260/;Здесь будет длиннющая стена текста, с типа случайными мыслями. Основные идеи:  В C++ очень важно время компиляции, Производительность сборки без оптимизаций тоже важна, Когнитивная нагрузка ещё важней. Вот по этому пункту особо распространяться не буду, но если язык программирования заставляет меня чувствовать себя тупым, вряд ли я его буду использовать или тем более — любить. C++ делает это со мной постоянно.  Блогпост «Standard Ranges» Эрика Ниблера, посвященный ренжам в C++20, недавно облетел всю твиттерную вселенную, сопровождаясь кучей не очень лестных комментариев (это ещё мягко сказано!) о состоянии современного C++.  Даже я внёс свою лепту (ссылка): Этот пример пифагоровых троек на ренжах C++20, по моему, выглядит чудовищно. И да, я понимаю, что ренжи могут быть полезны, проекции могут быть полезны и так далее. Тем не менее, пример жуткий. Зачем кому-то может понадобиться такое?Давайте подробно разберём всё это под катом.
bikutoru;Courier: миграция Dropbox на gRPC;https://habr.com/ru/company/badoo/blog/438474/;"  Примечание переводчика Большинство современных программных продуктов не являются монолитными, а состоят из множества частей, которые взаимодействуют друг с другом. При таком положении дел необходимо, чтобы общение взаимодействующих частей системы происходило на одном языке (притом что сами эти части могут быть написаны на разных языках программирования и выполняться на разных машинах). Упростить решение этой задачи помогает gRPC — open-source-фреймворк от Google, выпущенный в 2015 году. Он решает сразу ряд проблем, позволяя:   использовать язык Protocol Buffers для описания взаимодействия сервисов;  генерировать программный код на основании описанного протокола для 11 разных языков как для клиентской части, так и для серверной;  реализовать авторизацию между взаимодействующими компонентами;  использовать как синхронное, так и асинхронное взаимодействие.   gRPC показался мне довольно интересным фреймворком, и мне было интересно узнать про реальный опыт компании Dropbox по построению системы на его основе. В статье есть масса деталей, связанных с использованием шифрования, построением надёжной, наблюдаемой и производительной системы, процессом миграции со старого RPC-решения на новое.  ДисклеймерОригинальная статья не содержит описания gRPC, и некоторые моменты могут показаться вам непонятными. Если вы не знакомы с gRPC или другими подобными фреймворками (например, Apache Thrift), рекомендую предварительно ознакомиться с основными идеями (достаточно будет прочитать две небольшие статьи с официального сайта: «What is gRPC?» и «gRPC Concepts»).  Спасибо Алексею Иванову aka SaveTheRbtz за написание оригинальной статьи и помощь с переводом трудных мест. "
arttom;Говорят, Haskell — язык для гениев и академиков. Правда?;https://habr.com/ru/post/438970/;"  Однажды я разговаривал с основателем израильского стартапа, который разрабатывал скоростную базу данных на GPU. В их стеке были Haskell и C++, и основатель жаловался, как тяжело найти людей в команду. В Москву он прилетал в том числе искать хороших программистов.   Я осторожно спросил, не лучше ли было использовать что-то более распространенное и новое. И хоть ответ был вежливым и конструктивным, между строк мне показалось: «Пфф, даже не упоминай эти игрушечные япы».  Все, что я слышал про Хаскель со стороны с тех пор, сводилось к одному — «с ним шутки плохи». Чтобы узнать хаскелистов получше, я пришел с расспросами к ним в телеграм-чат. Было довольно страшно, и как оказалось, не зря.   О Хаскеле не стремятся говорить популярно, и на такие затеи, кажется, поглядывают с презрением. Уж если говорить — то с максимальной полнотой и объективностью. «Одно из характерных качеств Хаскеля как языка и сообщества в том, что они вместе не стремились стать популярными, дав простой ответ на популярные вопросы. Вместо этого выстраивали логичный principled путь решения реальных проблем, а не быстрого проникновения в сердце прохожего интересующегося» — написали мне там.  Тем не менее, несколько человек рассказали о своем опыте, и я собрал их мнения здесь."
rumatakira;Создание архитектуры для нового высоконагруженного стартапа в 2019;https://habr.com/ru/post/439878/;"Цель — создание нового высоконагруженного стартапа в современных условиях. Создание архитектуры будем рассматривать на примере Billingolang — проект универсального биллинга, общего назначения, написанный на golang. Проект включает в себя доступ через API, сайт, интеграцию в бухгалтерские системы, отчеты и графики.  Изначально были откинуты однопоточные системы. Выбирать пришлось между Erlang, Golang и Rust. Основным языком программирования был выбран Golang, потому что найти программистов на Erlang сложно, хотя устойчивость и горячая замена кода шли в плюс Erlang. Rust, же не смотря на формальное отсутствие состояния гонки, все-таки более подходит не для написания приложений, но драйверов и операционных систем.  Обмен сообщениями между компонентами системы происходит не на классическом RabbitMQ, а на NATS — последний показал бенчмарки на сервере который сейчас используется, 1M сообщений (+360К при кластеризации) в секунду против 40К у зайца. Да и кластеризуется он быстрее и легче чем RabbitMQ.  База данных: MySQL InnoDB Сluster 7.6 (MySQL server 8.0). Шикарно верстается и отлаживается комьюнити средством MySQL Workbench."
BitfuryRussia;Building a Private Currency Service Using Exonum;https://habr.com/ru/company/bitfury/blog/440274/;"Zero-knowledge proofs/arguments are an emerging cryptographic technology that promises to bring us closer to the Holy Grail of blockchain: providing data privacy and auditability.  Potential applications for zero-knowledge include, but are not limited to:   Inter-bank transfer systems (see a research paper by Narula et al.) Privacy-focused management of digital assets (see a proof of concept by J.P. Morgan and zCash) KYC (see a proof of concept by ING) Self-sovereign identity (see an attribute-based credentials EU project) Voting (see a proxy voting prototype by Russian National Security Depository)  Another application for zero-knowledge proofs is helping blockchains scale. ZKPs allow for the “compressing” of computations for blockchain transactions without sacrificing security.  In this article, we describe how zero-knowledge (specifically, Bulletproofs) can be applied to build a privacy-focused service using Bitfury’s Exonum platform.  "
arttom;Is Haskell really the language of geniuses and academia?;https://habr.com/ru/post/441350/;"  I once had a discussion with a founder of an Israeli startup developing a GPU-based database with a focus on speed. The work stack included Haskell and C++, among others, and the founder was complaining about how hard it is to find competent programmers. Which was part of the reason he came to Moscow.  I carefully asked if they considered using something more popular and new. And even though the answer was rather polite and well-supported with arguments, it still sounded like “Come on, don’t even bring up these toys”.  Until then, all I heard about Haskell could be summarized as “be VERY careful in dealing with it”. To get to know Haskell programmers better, I came to a topical Telegram chat with some questions. I was quite afraid at first, and, as it turned out, I was right.  Haskell doesn’t lend itself to popular explanation, and people seemingly don’t even try. If the topic is ever brought up, it’s only talked about in full depth and as objectively as possible. Someone wrote to me: “One of the defining features of both Haskell itself and its community is that they didn’t try to achieve any kind of mainstream recognition. Instead, they focused on building a logical, principal way of solving real problems over trying to appease the widest audience possible”  Nevertheless, a couple of people did tell me about their experiences, which are shown below."
m1rko;Наша проблема c зависимостями;https://habr.com/ru/post/443620/;"На протяжении десятилетий повторное использование ПО чаще обсуждалось, чем реально имело место. Сегодня ситуация обратная: разработчики каждый день повторно используют чужие программы, в виде программных зависимостей, а сама проблема остаётся практически неизученной.  Мой собственный опыт включает десятилетие работы с внутренним репозиторием Google, где зависимости установлены как приоритетная концепция, а также разработку системы зависимостей для языка программирования Go.  Зависимости несут серьёзные риски, которые слишком часто упускаются из виду. Переход к простому повторному использованию малейших фрагментов ПО произошёл так быстро, что мы ещё не выработали лучшие практики для эффективного выбора и использования зависимостей. Даже для принятия решения, когда они уместны, а когда нет. Цель этой статьи — оценить риски и стимулировать поиск решений в этой области."
ProductivityInside;Дайджест IT событий марта (часть вторая);https://habr.com/ru/company/productivity_inside/blog/443818/;"Заканчиваем обзор IT мероприятий этого месяца, оказавшегося неожиданно урожайным. Митапы продолжают удерживать лидерские позиции, но на этот раз их ощутимее разбавляют крупные конференции и хакатоны. Среди популярных тем — data science, Интернет вещей и машинное обучение.    Go Meet up  Когда: 15 марта Где: Казань, ул. Петербургская, 52 Условия участия: бесплатно, требуется регистрация  И снова беседы о Go, на этот раз в кругу казанских доброжелателей. В частности: как использовать средства языка для разработки компонентов классических веб-приложений, авторизация в нюансах и какую роль в этом процессе играют Hydra, Oathkeeper, Keto и, наконец, лайфхаки, которые сберегут нервы при подготовке релиза."
ladynoname;IT Global Meetup #14 Петербург;https://habr.com/ru/post/444782/;"23 марта 2019 года пройдет четырнадцатый слет IT-сообществ Санкт-Петербурга IT Global Meetup 2019.   Весенний слет петербургских IT-сообществ стартует в субботу! На островках сообществ можно будет ознакомиться с их деятельностью и принять участие в активностях. ITGM — не форум, не конференция. ITGM — встреча, созданная самими сообществами со свободой действий, докладов и активностей.   "
anastasiak2512;CLion 2019.1: ClangFormat, подсветка кода через Clangd, memory view, начальная поддержка микроконтроллеров;https://habr.com/ru/company/JetBrains/blog/445646/;"Привет, Хабр!  У команды CLion множество отличных новостей — питерская часть команды вместе с другими коллегами успешно перебралась в новый офис, к нам присоединились новые классные разработчики, а главное, мы буквально на днях выпустили первое большое обновление в этом году, CLion 2019.1!  Работа в новой версии шла сразу по нескольким фронтам:   Усовершенствования поддержки языка C++: подсветка кода через Clangd, улучшения рефакторингов Extract и Rename, новая проверка на то, что функцию-член класса можно объявить статической. Больше возможностей в настройках стиля написания кода: интеграция с ClangFormat, поддержка стилей именования переменных в C/C++, поддержка разных стилей для header guards. Новые возможности и улучшения отладчика: просмотр состояния памяти — Memory View — для указателей, просмотр дизассемблированного кода в случае LLDB, ускорение работы пошаговой отладки. CLion для микроконтроллеров, первые шаги. Возможность создавать Build Targets и конфигурации для запуска/отладки в CLion, которые никак не связаны с проектной моделью. Работа с другими языками программирования в строковых литералах в С/С++. Новые визуальные темы и другие платформенные возможности.    Подробнее об этих и других нововведениях читайте ниже. А чтобы попробовать новые возможности и улучшения, скачайте бесплатную 30-дневную версию CLion с нашего сайта. "
Alina1520;Чеклист для создания и публикации веб-приложений;https://habr.com/ru/post/446642/;"Для того, чтобы создать свое веб приложение в наше время недостаточно уметь его разрабатывать. Важным аспектом является настройка инструментов по развертыванию приложения, мониторингу, а также управление и администрирование среды, в которой оно работает. Эра ручного развертывания уходит в забвение, даже для небольших проектов, инструменты автоматизации могут принести ощутимую пользу. При развертывании «руками», зачастую мы можем забыть перенести что-либо, учесть тот или иной нюанс, запустить забытый тест, этот список можно продолжать довольно долго.   Данная статья может помочь тем, кто только постигает основы создания веб приложений, и хочет немного разобраться в основных терминах и конвенциях. "
dimansny;Mozilla собирается использовать WASI для всех устройств, компьютеров и операционных систем;https://habr.com/ru/post/449554/;Всем привет! На связи TestMace и мы продолжаем знакомить вас с самыми горячими новостями из мира JavaScript. На очереди перевод статьи о WASI — технологии, которая позволит использовать WebAssembly вне браузеров Один формат, чтоб править всеми  Компания Mozilla на этой неделе представила проект под названием WASI (WebAssembly System Interface), призванный стандартизировать взаимодействие WebAssembly-кода с операционной системой. Если проект окажется успешным, он будет выполнять те же функции, что и виртуальная машина Oracle Java, но гораздо эффективнее и с расширенным функционалом.
AlexeySushkov;Блокчейн: что нам стоит кейс построить?;https://habr.com/ru/post/449986/;"Вся история человечества — это попытки разрушить старый порядок вещей и построить новый, разумеется, лучший. (Анонимный автор)  В прошлой статье «Что нам стоит блокчейн построить?» мы разобрались с технологиями, на которых работают все блокчейны. Пришло время понять какие задачи могут решить современные блокчейны. Для начала давайте посмотрим на аналитику текущего состояния блокчейна и перспективах на будущее. Как техническому специалисту, мне импонирует компания Gartner с ее многочисленными циклами зрелости технологий (Hype Cycles). На графике показан цикл зрелости блокчейна в бизнесе на конец 2018 года. Какие выводы можно сделать?  "
VanquisherWinbringer;Почему по статистике Яндекс и StackOverfow C# программисты самые дешёвые?;https://habr.com/ru/post/450618/;В общем недавно тут публиковалось статистика Яндекса по зарплатам в IT в России и еще на StackOverfow можно посмотреть на статистику по ЗП в США и тут грустный факт можно увидеть.
fokus-lop;Как мы при помощи WebAssembly в 20 раз веб-приложение ускорили;https://habr.com/ru/company/skillbox/blog/452190/;"  В этой статье рассматривается кейс по ускорению браузерного приложения через замену вычислений JavaScript на WebAssembly. "
AlexSerbul;Борьба за качество в веб-приложениях, депрессия, драконы и Вестерос;https://habr.com/ru/company/bitrix/blog/452788/;Веб-разработку никто, изначально, не планировал. Даже в страшном сне. В генеральном плане, при поддержке крупных корпораций и науки, люди воспринимали создание дорогостоящих IT-систем как близконаучный процесс, доступный избранным, в котором очень важно знать не только быстро забывающиеся большинством алгоритмы (я 5 раз заучивал с листочком принцип обхода красно-черного дерева — взгляд на покачивающиеся бедра ранней весной полностью стирает полученную информацию), но и внутренности железа. Это священнодействие, разумеется, нужно было правильно (слава великому Демингу) контролировать, измерять и тестировать и тестировать и во веки веков, аминь. Но что-то сразу пошло не туда и не так…
vlstrochkov;Монорепозитории: пожалуйста, надо;https://habr.com/ru/company/otus/blog/453958/; Перевод статьи подготовлен для студентов курса «DevOps практики и инструменты» в образовательном проекте OTUS.  Вы должны выбрать монорепозиторий, потому что поведение, которому он способствует в ваших командах — это прозрачность и коллективная ответственность, особенно при росте команд. В любом случае вам придётся вкладываться в инструментарий, но всегда лучше, когда поведение по умолчанию — это поведение, которое вы хотите видеть в своих командах. 
MaxRokatansky;Что я узнал про оптимизацию в Python;https://habr.com/ru/company/otus/blog/457942/;"Всем привет. Сегодня хотим поделиться еще одним переводом подготовленным в преддверии запуска курса «Разработчик Python». Поехали!    Я использовал Python чаще, чем любой другой язык программирования в последние 4-5 лет. Python – преобладающий язык для билдов под Firefox, тестирования и инструмента CI. Mercurial также в основном написан на Python. Множество своих сторонних проектов я тоже писал на нем.  Во время своей работы я получил немного знаний о производительности Python и о его средствах оптимизации. В этой статье мне хотелось бы поделиться этими знаниями.   Мой опыт с Python в основном связан с интерпретатором CPython, в особенности CPython 2.7. Не все мои наблюдения универсальны для всех дистрибутивов Python или же для тех, которые имеют одинаковые характеристики в сходных версиях Python. Я постараюсь упоминать об этом во время повествования. Помните о том, что эта статья не является детальным обзором производительности Python. Я буду говорить только о том, с чем сталкивался самостоятельно."
olegchir;Большое интервью с Клиффом Кликом — отцом JIT-компиляции в Java;https://habr.com/ru/company/jugru/blog/458718/;"Клифф Клик — CTO компании Cratus (IoT сенсоры для улучшения процессов), основатель и сооснователь нескольких стартапов (включая Rocket Realtime School, Neurensic и H2O.ai) с несколькими успешными экзитами. Клифф написал свой первый компилятор в 15 лет (Pascal для TRS Z-80)! Наиболее известен за работу над С2 в Java (the Sea of Nodes IR). Этот компилятор показал миру, что JIT может производить качественный код, что стало одним из факторов становления Java как одной из основных современных программных платформ. Потом Клифф помог компании Azul Systems построить 864-ядерный мейнфрейм с софтом на чистой Java, который поддерживал паузы GC на 500-гигабайтной куче в пределах 10 миллисекунд. Вообще, Клифф успел поработать над всеми аспектами JVM.   Этот хабрапост — большое интервью с Клиффом. Мы поговорим на следующие темы:  Переход к низкоуровневым оптимизациям Как делать большой рефакторинг Модель стоимости Обучение низкоуровневым оптимизациям Практические примеры улучшения производительности Зачем создавать свой язык программирования Карьера перформанс-инженера Технические челленжи Немного про аллокацию регистров и многоядерность Самый большой челленж в жизни  Интервью ведут:  Андрей Сатарин из Amazon Web Services. В своей карьере успел поработать в совершенно разных проектах: тестировал распределенную базу данных NewSQL в Яндексе, систему облачного детектирования в Лаборатории Касперского, многопользовательскую игру в Mail.ru и сервис расчёта валютных цен в Deutsche Bank. Интересуется тестированием крупномасштабных backend- и распределённых систем. Владимир Ситников из Netcracker. Десять лет работает над производительностью и масштабируемостью NetCracker OS — ПО, используемого операторами связи для автоматизации процессов управления сетью и сетевым оборудованием. Увлекается вопросами производительности Java и Oracle Database. Автор более десятка улучшений производительности в официальном PostgreSQL JDBC-драйвере. "
olegbunin;5-6 причин прийти на GolangConf;https://habr.com/ru/company/oleg-bunin/blog/458768/;"Если вы бывали на HighLoad++, то знаете о традиционном митапе по Go. Активисты, интересующиеся Go, занимали зал на пару часов, представляли небольшие доклады, обсуждали насущные темы, холиварили. Были на HighLoad++ и отдельные доклады по Go.  Теперь, нам кажется, что пора выходить на новый уровень, поэтому 7 октября мы проведем GolangConf. Из названия понятно, что это конференция про Go, но этого явно недостаточно.    Мы готовим эту конференцию для:   Go-разработчиков — тех, кто уже давно сидит на Go, кому интересно обсудить новинки, поговорить о производительности и «кишках», узнать, что меняется в Go, похоливарить о дженериках, например. Кроме того, поскольку Go-общество расширяется, мы ждем программистов, которые только-только переходят на Go или даже только подумывают об этом. Покажем им истории успеха, реализовавшегося с переходом на Go, или истории провала. Узнаем, что не получается, почему, какие их первые чувства, мнения, впечатления. Третья категория посетителей — пользователи инструментов, написанных на Go. Это популярные в рамках Cloud Native инфраструктур: Kubernetes, Docker, Terraform, Consul и другие продукты Hashicorp. На Go-конференции гости, с одной стороны, узнают, какие у этих инструментов есть проблемы, связанные с особенностями языка, а с другой — увидят, какие в Go есть вызовы и задачи, чтобы начать, например, контрибьютить в эти проекты.  Чтобы определить, какие именно темы нужно обсудить на конференции по Go, какие проблемы и задачи важны для каждой из категорий слушателей, мы собрали Программный комитет и активистов Go-сообщества. Устроили своего рода мозговой штурм. Результатами делимся с вами и, поскольку главная наша цель — развивать сообщество, надеемся на ваш отклик. Напишите в комментариях, что нужно раскрыть полнее, что совсем неинтересно, а что именно то что нужно. Посоветуйте, например, стоит ли обсуждать особенности эксплуатации Go под Windows, а то мнения разделились."
bobalus;Выход из зоны комфорта: с nodejs на dlang;https://habr.com/ru/post/459014/;В 2017м году я начал писать проект на nodejs — реализацию протокола ObjectServer от Weinzierl для доступа к значениям KNX. В процессе написания было изучено: работа с бинарными протоколами, представление данных, работа с сокетами(unix sockets в частности), работа с redis базой данных и pub/sub каналами. Проект достиг стабильной версии. В это время я потихоньку ковыряю другие языки, в частности Dart и Flutter как его приложение. На полке пылится без действия купленный во времена студенчества справочник Г.Шилдта. Настойчивая мысль переписать проект на C поселилась в голове. Рассматриваю варианты Go, Rust, отталкивающие иными синтаксическими конструкциями. Начать никак не получается, идея откладывается на время.
olegchir;«Эмпирические результаты лишь для публикации, реальные мотивы работ — эстетические». Большое интервью с Майклом Скоттом;https://habr.com/ru/company/jugru/blog/459360/;" Майкл Скотт — уже 34 года как профессор Computer Science в Рочестерском университетe, а в родном универститете Wisconsin–Madison был деканом в течение пяти лет. Он занимается исследованиям в области параллельного и распределённого программирования и дизайна языков и обучает этому студентов. Мир знает Майкла по учебнику «Programming Language Pragmatics», а работа «Algorithms for scalable synchronization on shared-memory multiprocessors» получила премию Дейкстры как одна из наиболее известных в области распределённых вычислений. Также вы можете знать его как автора того самого алгоритма Майкла-Скотта. Вместе с Дагом Ли разработал те неблокирующие алгоритмы и синхронные очереди, на которых работают библиотеки Java. Внедрение «dual data structures» в JavaSE 6 позволило в 10 раз улучшить производительность ThreadPoolExecutor. Содержание:  Начало карьеры, Рочестерский университет. Проект Charlotte, язык Lynx; IEEE Scalable Coherent Interface, блокировка MCS; Выживание в постоянно меняющемся мире; Становятся ли студенты глупее? Глобальные тренды, интернационализация; Эффективная работа со студентами; Как не отстать при подготовке новых курсов и книг; Связь между бизнесом и академией; Практическая реализация идей. MCS, MS, CLH, JSR 166, работа с Дагом Ли и многое другое; Транзакционная память; Новые архитектуры. Близкая победа транзакционной памяти; Энергонезависимая память, Optane DIMM, сверхбыстрые устройства; Следующий большой тренд. Dual data structures. Hydra. "
arttom;Каково это — слушать код со скоростью 1000 слов в минуту;https://habr.com/ru/post/461469/;"История маленькой трагедии и больших побед очень хорошего разработчика, которому нужна помощь   В Дальневосточном Федеральном Университете есть центр проектной деятельности — там магистры и бакалавры находят для себя инженерные проекты, у которых уже есть заказчики, деньги и перспективы. Еще там проводятся лекции и интенсивы. Опытные специалисты рассказывают о современных и прикладных вещах.  Один из интенсивов был посвящен применению системы контейнеризации Docker для распределённых вычислений и оркестрации. На него пришли магистры и аспиранты прикладной математики, инженерии, подготовки ПО и других технических направлений.   Преподавателем был парень в темных очках, с модной прической, в шарфе, общительный и слишком уверенный — особенно для 21-летнего студента второго курса. Его зовут Евгений Некрасов, он поступил в ДВФУ всего два года назад. "
itglobalcom;Первый прототип: Unikernels как этап в эволюции Linux;https://habr.com/ru/company/itglobalcom/blog/462357/;В начале июля группа инженеров из Red Hat и Бостонского университета выпустила whitepaper, в котором предложила сменить монолитное ядро Linux на архитектуру unikernels. Мы решили разобраться в материале и обсудить реакцию ИТ-комьюнити на это предложение.  
olegchir;Десятка лучших докладов C++ Russia и плейлист конференции в открытом доступе;https://habr.com/ru/company/jugru/blog/462939/;Этот хабрапост объединяет десять лучших докладов от таких спикеров, как Nicolai Josuttis, Timur Doumler, Андрей Давыдов и многих других. C++17/20/23, concepts, immutable data structures, concurrency, parallelism, metaprogramming — всё это темы конференции C++ Russia 2019, прошедшей этой весной в Москве. Более шести сотен участников, известные международные спикеры, глубокие доклады. Обратите внимание — доклады такие, что устареют очень нескоро, а применить полученные знания можно хоть сейчас.  Формат таков:  Обязательное видео на YouTube Подробное описание доклада на русском языке (со слайдами, если они есть) Краткая биография докладчика  Не стесняйтесь писать комментарии! Кстати, в плейлисте, опубликованном под катом, есть не только топ-10. И мы выключили рекламу на YouTube, так что никто не будет мешать.
olegbunin;Мал, да удал. Анбоксинг микровиртуалки Firecracker;https://habr.com/ru/company/oleg-bunin/blog/464305/;"Записывайте рецепт микровиртуалок Firecracker. Берем два популярных метода изоляции многопользовательской нагрузки — виртуальные машины и контейнеры. Выжимаем лучшее из обоих подходов, максимально упрощаем, тестируем на настоящем хайлоаде. В итоге получаем непробиваемую изоляцию виртуалок, которые можно запускать за сотни миллисекунд. Именно это решение работает под капотом AWS Lambda и Fargate, запуская в облаке миллионы serverless-функций и контейнеров каждую секунду. Оно называется Firecracker.    Этот инструмент микровиртуализации доступен в OpenSource. Если ваши задачи требуют мульти-тенантной изоляции, (ну, например, вы решили сделать собственное облако), Firecracker — это то, что надо.  Василий Пантюхин, архитектор Amazon Web Services, расскажет об архитектуре Firecracker, о том, как он используется AWS Lambda, сравнит его с альтернативными решениями и приведет примеры интеграции.  Дисклеймер: всё, что ниже — это личное мнение Василия, и оно может не совпадать с позицией Amazon Web Services. "
Panzerschrek;Язык программирования Ü. Введение, мотивация к созданию, цели;https://habr.com/ru/post/465553/;"Введение С 2016-го года (с перерывами) я разрабатываю собственный язык программирования. Название данного языка — «Ü». Почему Ü? Потому, что хотелось однобуквенного названия, а все буквы из набора A-Z уже заняты.   Данная статья имеет задачу ознакомить публику с данным языком, дать составить общее представление о нём. Статья не ставит целью описать язык полностью, более полное описание языка, если надо, будет дано в последующих статьях.  Зачем нужен ещё один язык?"
vorona_karabuta;Xavier Noria о Rails 6, консалтинге и не только;https://habr.com/ru/company/railsclub/blog/468769/;Уже в эту субботу встречаемся со всеми рубистами на главной конференции, посвященной этой технологии — RubyRussia 2019. 28 сентября совсем близко, а в этом интервью вопросы для Xavier Noria подготовил разработчик компании Evrone Павел Аргентов, а помогли ему студенты и преподаватели, с которыми он работает над курсом «Языки интернет-программирования» в МГТУ.   Раритетное фото с прошлого приезда Шавье в Россию — на RailsClub Moscow 2012  Что ты считаешь наиболее интересным и важным из того, что недавно произошло в мире RoR?
e_finkel;Какой серверный язык выбрать…мобильному разработчику;https://habr.com/ru/company/oleg-bunin/blog/471070/;"Вы скажете, какое вообще дело мобильному разработчику до того, на чем написан бэкенд. Главное, чтобы API туда был удобный, понятный, гибкий. А нам так не кажется.  Мы в AppsConf думаем, что всем нам необходимо иногда выходить за пределы мобильной разработки и прокачивать шляпку буквы T в модели T-shape. Вот, например, познакомиться с серверными языками чуть глубже, чем: «Я слышал, что Ruby умер». И чуть шире — то есть не только с популярными, но и из вторых рядов и даже андеграундными.  Чтобы и вы прониклись идеей Introductory-трека, записали интервью с Никитой Соболевым. Собирались говорить о языках программирования, а получилось о программистах. Заходите под кат, если считаете, что лучше быть просто хорошим разработчиком, а не Android- или iOS-разработчиком, а особенно, если не согласны с этим. Пятница — самое время поспорить."
TyVik;Мета-грамматика для PEG парсера;https://habr.com/ru/post/471990/;На этой неделе мы делаем генератор парсеров «самостоятельным», то есть он будет генерировать свой собственный парсер. Содержание серии статей о PEG-парсере в Python PEG парсеры Реализация PEG парсера Генерация PEG парсера Визуализация работы PEG парсера Леворекурсивные PEG грамматики Добавление экшенов в грамматику PEG Мета-грамматика для PEG парсера Реализация остальных возможностей PEG PEG на Core Developer Sprint  Итак, у нас уже есть генератор парсера, часть которого является парсером грамматики. Мы могли бы назвать это мета-парсером. Мета-парсер работает аналогично сгенерированным: GrammarParser наследуется от Parser и использует тот же механизм mark() / reset() / hope(). Тем не менее, там всё это было написано вручную. Но правильно ли это?
Nkvlk;Популярные языки программирования 2019 от пользователей hh.ru;https://habr.com/ru/company/hh/blog/474096/;Заголовок в стиле подкрадывающихся новогодних праздников, но речь пойдет только про сентябрь текущего года в сравнении с аналогичным периодом 2018. Под катом снова паблик репорт про количество поисковых сессий по языкам программирования, вакансий, резюме и немного про зарплаты. Получилось — что получилось.   
sobolevn;9 лучших опенсорс находок за октябрь 2019;https://habr.com/ru/post/474588/;"Доброго ноября, дамы и господа. Подготовил для вас подборку самых интересных находок из опенсорса за октябрь 2019.  За полным списком новых полезных инструментов, статей и докладов можно обратиться в мой телеграм канал @OpensourceFindings (по ссылке зеркало, если не открывается оригинал). В сегодняшнем выпуске. Технологии внутри: Rust, Swift, TypeScript, JavaScript, Go, Scala, Python. Тематика: веб и мобильная разработка, визуализация данных, инструменты разработчика, документация. Прошлый выпуск."
nzeemin;WebAssembly: что и как;https://habr.com/ru/post/475778/; Эта статья основана на моём выступлении на конференции ITSubbotnik, прошедшем 2 ноября 2019 года в Москве. Вообще я бэкенд программист, но меня заинтересовала эта технология, она позволяет использовать мои знания бэкенда на фронте. Проблема Начнём с проблемы, которая решается этой (относительно новой) технологией. Проблема эта — быстро исполнять код в браузере. Быстро — это значит, «быстрее чем JavaScript», в идеале настолько быстро, насколько позволяет имеющийся у нас процессор.
ru_vds;Первое знакомство с AssemblyScript;https://habr.com/ru/company/ruvds/blog/477272/;"Поддержка технологии WebAssembly (Wasm) появилась в браузерах относительно недавно. Но эта технология вполне может серьёзно расширить возможности веба, сделав его платформой, способной поддерживать такие приложения, которые обычно воспринимаются как настольные.  Освоение WebAssembly может оказаться непростым делом для веб-разработчиков. Однако ситуацию способен улучшить компилятор AssemblyScript.   Автор статьи, перевод которой мы сегодня публикуем, предлагает сначала поговорить о том, почему WebAssembly — это весьма многообещающая технология, а потом — взглянуть на то, как AssemblyScript может помочь в раскрытии потенциала Wasm."
sobolevn;9 лучших опенсорс находок за ноябрь 2019;https://habr.com/ru/post/478728/;"Доброй зимы, дамы и господа. Подготовил для вас подборку самых интересных находок из опенсорса за ноябрь 2019.  За полным списком новых полезных инструментов, статей и докладов можно обратиться в мой телеграм канал @OpensourceFindings (по ссылке зеркало, если не открывается оригинал). В сегодняшнем выпуске. Технологии внутри: Rust, TypeScript, JavaScript, Go, Python. Тематика: веб разработка, инструменты для QA, работа с данными, инструменты разработчика и администратора. Прошлый выпуск."
DmitrySpb79;Habr — best articles, authors and statistics 2019;https://habr.com/ru/post/480646/;"2019 is coming to an end, and it's Christmas soon. It is also the time to grab all data and collect statistics and a rating of the most interesting Habr's articles for this period.     In this post the best articles and best Habr authors 2019 will be presented, I also will show some statistical graphs that I find interesting or unusual.  Let's get started."
germn;Краткая и на 146% точная история языков программирования;https://habr.com/ru/post/481822/;  1800 Жозеф Мари Жаккар учит ткацкий станок читать перфокарты, создавая первый многопоточный процессор. Изобретение в штыки приняли ткачихи, которые уже тогда что-то подозревали. 1842 Ада Лавлейс, устав от положенного по социальному классу безделья, делает наброски в блокноте, которые станут известны как первая компьютерная программа. С поправкой, конечно, на то, что компьютеров тогда ещё не было.
ru_vds;Что айтишнику делать в 2020? ;https://habr.com/ru/company/ruvds/blog/481860/;"Приобрести VDS со скидкой 30%, да ещё и до повышения цен. Шутка :) Но в каждой шутке есть доля правды.  До нового года осталась ровно неделя и мы знаем, что почти никто из нас с вами не начнёт новую жизнь с 1 января или с понедельника. Но также мы знаем, что никто не остановится в развитии — такова уж наша айтишная судьба: ушёл на три недели на больничный, вернулся и выпал из реальности. Ну почти. Казалось бы, сложившиеся технологии вполне достаточны для реализации большинства текущих проектов и даже самых смелых фантазий, но тем не менее в привычный стек то и дело врывается что-то новое. А стоит ли в это новое вникать? Что изучать дальше? Или наконец выйти из айти? Мы набросали небольшой план на год.   После Cybertruck мы решили не включать дизайн в список перспективных направлений для айтишников в 2020 году. Что есть внешность вещей? Ничто рядом с их сутью"
pkruglov;Пост с постами: наши итоги за 2019-й;https://habr.com/ru/company/mailru/blog/482504/;" © Ralph McQuarrie  Вот-вот мы начнём открывать шампанское, накидывать горы салатов и чистить мандаринки. А пока все эти приятные хлопоты не начались, подведём итоги блога за уходящий год. Итак, наш ежегодный пост с постами, набравшими больше всего плюсов, а также комментариев, добавлений в избранное и просмотров — для невошедших в первый шорт-лист."
balajahe;Применение принципов функционального программирования при проектировании ERP;https://habr.com/ru/post/482938/;"Привет, Хабр!  В этой статье мы попробуем взглянуть на архитектуру учетных систем (ERP, CRM, WMS, MES, B2B, ...) с позиций функционального программирования. Существующие системы сложны. Они базируются на реляционной схеме данных, и имеют огромный мутабельный стейт в виде сотен связаных таблиц. При этом единственным «источником правды» в таких системах является хронологически-упорядоченный журнал первичных документов (отпечатков событий реального мира), которые, очевидно, должны быть иммутабельными (и это правило соблюдается в аудируемых системах, где корректировки «задним числом» запрещены). Журнал документов составляет от силы 20% объема БД, а все остальное — промежуточные абстракции и агрегаты, с которыми удобно работать на языке SQL, но которые требуют постоянной синхронизации с документами, и между собой.   Если вернуться к истокам (устранить избыточность данных и отказаться от хранения агрегатов), а все бизнес-алгоритмы реализовать в виде функций, применяемых непосредственно к потоку первичных документов — мы получим функциональную СУБД, и построенную на ней функциональную ERP. Проблема производительности решается благодаря мемоизации, а объем функционального кода будет вполне соизмерим с объемом декларативного SQL, и не сложнее для понимания. В данной статье мы продемонстрируем подход, разработав простейшую файловую СУБД на языке TypeScript и рантайме Deno (аналог Node.js), а также протестируем производительность сверток на примере типичных бизнес-задач.   Почему это актуально 1) Мутабельный стейт + избыточность данных — это плохо, особенно когда необходимо обеспечивать его постоянную синхронизацию с потоком документов. Это источник потенциальных расхождений учетных данных (баланс не сходится) и трудно обнаруживаемых побочных эффектов."
0xd34df00d;"Быстрее, чем C++; медленнее, чем PHP";https://habr.com/ru/post/483864/;Привет, Хабр. У меня тут случайно код на хаскеле получился быстрее аналогичного кода на C++. Иногда — на 40%.  (время работы, меньше — лучше, C++ снизу) Что самое смешное — я собирал хаскель-код через LLVM-бекенд, но при этом сравнивал с GCC. Если сравнивать с clang (что вроде как логичнее), то всё становится ещё хуже для плюсов: почему-то на этой задаче clang проигрывает GCC в пару раз, и разница становится не 40%, а этак раза три. Впрочем, одна маленькая модификация C++-кода это поменяет. Началось всё с того, что для одного моего проекта (который, естественно, делается на хаскеле, и о котором я тоже скоро напишу) нужно было быстро и эффективно считать расстояние Левенштейна между двумя строками. Расстояние Левенштейна — это такая метрика, которая говорит, сколько символов нужно удалить, добавить или заменить в одной строке, чтобы она стала равна другой строке. Я считал расстояния между довольно большими строками (масштаба десятков тысяч символов), поэтому эффективность была действительно важна. А потом мне стало интересно, насколько быстро я вообще могу это расстояние считать (потратив разумное время на оптимизацию, конечно), так что я набросал вариант на С++ и взял его время работы за этакий идеал, к которому стоит стремиться. Впрочем, как уже понятно, идеал оказался превзойдён. Посмотрим, как этого можно достичь?  В качестве бонуса — сравнение с некоторыми другими языками. Спойлеры:  Nim медленнее компилятора C двадцатилетней давности. C# в пять раз медленнее Java, которая оказывается вполне на уровне Rust. Go вровень с C. PHP быстрее питона (что оправдывает вторую часть заголовка). 
germn;Чем программирование сегодня отличается от программирования 20 лет назад?;https://habr.com/ru/post/483880/; Я увидел этот вопрос на Quora и начал писать ответ. Но ответ получился слишком большим, так что я превратил его в эту статью. Вот часть изменений в случайном порядке, которые я заметил в программировании за последние 20 лет:  Многие концепции, которые были лишь теоретическими 20 лет назад, сегодня широко применяются на практике. Например, такие функциональные парадигмы как неизменяемость объектов, хвостовая рекурсия, ленивые коллекции, сопоставление с шаблоном, функции первого класса и взгляд свысока на тех, кто всё это не использует. «Десктопным приложением» многие неиронично называют упакованный браузер со страницей по умолчанию и без адресной строки. 
Anton3;Перемещение — прошлый век! Альтернативы std::move в «C++ будущего»;https://habr.com/ru/post/484380/;Каждый раз, когда мы пишем класс, управляющий ресурсами, мы задумываемся о том, что, скорее всего, для него придётся писать move-конструктор и move-присваивание. Ведь иначе объекты такого типа становятся неуклюжими, как std::mutex, ими тяжело пользоваться на практике: ни вернуть из функции, ни передать в функцию по значению, ни положить в вектор — а если положить его в другой класс как один из членов, то тот класс также «заболевает». Положим, мы преодолели свою лень (хотя в Rust таких проблем нет!) и садимся писать move-операции для нашего класса. Проблема в том, что move-семантика в C++ имеет фундаментальное ограничение: каждый владеющий ресурсами тип с move-операциями должен иметь пустое состояние, то есть состояние с украденными ресурсами. Его нужно описывать в документации и предоставлять ему поддержку, то есть тратить время и силы на то, что нам не нужно. Для абстрактных типов данных пустое состояние обычно бессмысленно — если у объекта украли его ресурсы, то он не сможет выполнять свои обычные функции. Но мы вынуждены это делать, чтобы реализовать move-семантику. Для некоторых типов пустое состояние недопустимо: open_file (в противовес теоретическому file), not_null_unique_ptr<T> (в противовес unique_ptr<T>). Говоря словами Arthur O'Dwyer, мы заказывали телепорт, а нам дали «вас клонируют и убивают первоначальную копию». Чтобы вернуть себе телепорт, проходите под кат!
zverolyub;Веская причина для проверки ваших зависимостей: AGPL-edition;https://habr.com/ru/company/dododev/blog/484898/;Вот вы берёте код под лицензиями BSD, MIT и Apache2 и в ус не дуете, а потом – бац! – вторая смена, и в транзитивной зависимости рисуется код под AGPL. Мы стараемся следить за этим и предпочитаем скорее перебдеть, чем недобдеть.   
worldbeater;Citrus: Набор стилей для AvaloniaUI;https://habr.com/ru/post/487000/; В комментариях к новостям об изменениях и улучшениях в новых версиях кроссплатформенного GUI-фреймворка AvaloniaUI довольно часто можно увидеть критику тем оформления, используемых по умолчанию. Дело в том, что данные темы были созданы на основе Metro — художественного стиля оформления графического интерфейса, используемого в Windows 8 и Windows 8.1. Данный стиль обрёл как поклонников, так и противников. Темы оформления MahApps.Metro для WPF по-прежнему остаются одними из наиболее популярных, имея более 6 с половиной тысяч звёзд на GitHub, догоняя MaterialDesignInXaml с его 8-ю тысячами поклонников.  Поскольку в Avalonia тема оформления является обособленным компонентом и может быть совершенно безболезненно заменена на любую другую, имело смысл порадовать противников Metro и сделать альтернативный набор стилей. Стоит заметить, что силами сообщества уже была изготовлена alpha-версия темы Material с переключателями и анимациями, поэтому в процессе было решено попробовать задизайнить велосипед в современном плоском стиле. В Avalonia 0.9.0 была добавлена поддержка сенсорного ввода, поэтому было бы неплохо улучшить UX для пользователей с сенсорными экранами. В результате получилась тема Citrus.Avalonia.
SvetBolgova;Как собрать крутой митап: 16 советов от трех «серийных митаперов». Leader-IT events #1;https://habr.com/ru/company/leader-id/blog/489000/;Мы опросили экспертов, которые на проведении митапов собаку съели (а кое-кто и питоном закусил!), и узнали, как устраивают такие мероприятия они, какие схемы организации и лайфхаки наработали, от чего предостерегают и на что обращают внимание сами. Это, конечно, не исчерпывающая инструкция по проведению митапа, а подборка советов, которые, тем не менее, могут сберечь вам много денег, личного времени и нейронов.   
AloneCoder;Дзен Go;https://habr.com/ru/company/mailru/blog/490340/;"  Оценивая свою работу, я недавно много размышлял о том, как мне писать хороший код. Учитывая, что никто не интересуется тем, как писать плохой код, возникает вопрос: как узнать, что ты написал на Go хороший код? Если есть какая-то шкала между хорошо и плохо, то как понять, какие части шкалы относятся к хорошему? Каковы его свойства, атрибуты, отличительные признаки, паттерны и идиомы? "
JustDont;Евангелисты против оборотней;https://habr.com/ru/post/490558/;" Название могло бы претендовать на B-movie, но на самом деле здесь пойдет речь о гораздо более приземленных вещах, а именно: о страстной и местами совершенно необоснованной любви программистов и прочих людей, пиарящих технологические решения к «серебряной пуле» — убеждению, что его решение имеет широчайшую область применения."
Data_center_MIRAN;Телепортируем процесс на другой компьютер! ;https://habr.com/ru/company/dcmiran/blog/499422/;"Однажды коллега поделился размышлениями об API для распределённых вычислительных кластеров, а я в шутку ответил: «Очевидно, что идеальным API был бы простой вызов telefork(), чтобы твой процесс очнулся на каждой машине кластера, возвращая значение ID инстанса». Но в итоге эта идея овладела мной. Я не мог понять, почему она такая глупая и простая, намного проще, чем любой API для удалённой работы, и почему компьютерные системы, кажется, не способны на такое. Я также вроде бы понимал, как это можно реализовать, и у меня уже было хорошее название, что является самой трудной частью любого проекта. Поэтому я приступил к работе.  За первые выходные сделал базовый прототип, а второй уикенд принёс демку, которая могла телефоркнуть процесс на гигантскую виртуальную машину в облаке, прогнать рендеринг трассировки путей на множестве ядер, а затем телефоркнуть процесс обратно. Всё это завёрнуто в простой API.  На видео показано, что рендеринг на 64-ядерной VM в облаке завершается за 8 секунд (плюс 6 секунд на телефорк туда и обратно). Тот же рендеринг локально в контейнере на моём ноутбуке занимает 40 секунд:  Your browser does not support HTML5 video."
ph_piter;Python пора потесниться. О перспективах Julia;https://habr.com/ru/company/piter/blog/500472/;"Доброе утро, Хабр!   Обойма нашей литературы по Python постоянно пополняется книгами самого разного уровня. Тем не менее, сегодня мы хотели бы сегодня вынести на обсуждение эту статью, автор которой считает язык Julia жизнеспособной и перспективной альтернативой Python. Читайте, переходите по ссылкам и не забудьте поучаствовать в голосовании.    Если Julia по-прежнему кажется вам таинственным, не волнуйтесь. Фото Julia Caesar на Unsplash "
ua-hosting;Как стать DevOps инженером за полгода или даже быстрее. Часть 4. Пакетирование программ;https://habr.com/ru/company/ua-hosting/blog/501466/;"Как стать DevOps инженером за полгода или даже быстрее. Часть 1. Введение Как стать DevOps инженером за полгода или даже быстрее. Часть 2. Конфигурирование Как стать DevOps инженером за полгода или даже быстрее. Часть 3. Версии    Рассмотрим, как упаковать ваш код для легкого развертывания и последующего выполнения. Напомню, что сейчас мы находимся здесь:  "
phillennium;Какой язык программирования учить в 2020-м?;https://habr.com/ru/company/jugru/blog/503250/;Статей с подобными заголовками существует уже множество. Но в них постоянно какая-то дичь! Смотрите, Google ещё до основных результатов советует такое:  HCL, Карл! Язык, который не просто очень далёк от «Самых Популярных», но ещё и создан для конфигурации, так что его вообще странно ставить в один ряд с языками общего назначения. Страшно представить приключения новичка, который решит строить карьеру по таким советам. Начнём с того, что по запросу «как выучить HCL» вместо туториалов по языку вылезают тексты о соляной кислоте. Это только одна из многих дикостей, которые я встретил в подобных текстах. Поэтому захотелось объяснить, что с ними не так — и написать собственный текст получше, ссылку на который можно кидать начинающим. Конечно, аудитории Хабра информация для начинающих не очень требуется, зато хабравчане могут дополнить текст в комментариях, сделав его ещё полезнее.
MaxRokatansky;CRUD API на Deno и PostgreSQL: работаем с динозавром;https://habr.com/ru/company/otus/blog/505476/;"Всем привет. В преддверии старта курса «Fullstack разработчик JavaScript», хотим поделиться интересным материалом, который прислал наш внештатный автор. Данная статья не имеет отношения к программе курса, но наверняка будет интересна, как небольшой обзор на Deno.     ""-Райан, мы тут концепцию CLI команд для Deno продумываем. Сколько флагов для secure runtime добавить?"" ""-Да"" ""-Райан, нам надо придумать символ языка, чтобы все понимали, что мы делаем что-то прям новое. Какое животное выберем?"" ""-Динозавра"""
ThomasAlva;Пока, Python. Привет, Julia❗;https://habr.com/ru/company/edison/blog/506656/;"По мере того, как Python замедляет свой впечатляющий темп, растёт новый сильный конкурент.    Не поймите меня превратно. Популярность Python по-прежнему обеспечивается сообществом ученых, дата-сайентистов и специалистов по искусственному интеллекту.  Но если вы когда-либо обедали с этими людьми, то также знаете, как любят они обсудить слабости Python. Начиная с медлительности и заканчивая необходимостью чрезмерного тестирования, вплоть до появления ошибок времени выполнения, несмотря на предшествующее скрупулёзное тестирование — это кого хочешь разозлит.  Поэтому всё больше программистов-питонщиков осваивают и другие языки — лучшими игроками на этом поле являются Julia, Go и Rust. Julia отлично подходит для математических и технических задач, Go — для модульных программ, а Rust — лучший выбор для системного программирования.  Поскольку эксперты по данным и ИИ занимаются множеством математических задач, чаще всего они выбирают Julia. И даже после самой суровой проверки у Julia обнаруживаются свои плюсы, которые Python не может победить."
uptimizt;HighLoad vs HighExtensible — эффективность против антихрупкости;https://habr.com/ru/post/508524/;Давайте поговорим о high-load, high-extensible, ООП, DDD & EDA. Речь пойдет о разнице между high load & high extensibility — это разные цели и задачи в разработке. Для которых нужны принципиально разные подходы. Которые часто вызывают когнитивный диссонанс среди программистов, предвещающий бурную полемику. На Хабре много статей про high-load, а вот тема high-extensible как-то упускается из внимания. Если попытаться примерно представить разность в понятиях и механиках, то вот табличка:  Давайте попробуем разобрать это все подробнее.
MagisterLudi;На смену Data Science. HASH: бесплатная онлайн-платформа для моделирования мира (от создателя StackOverflow);https://habr.com/ru/company/skillfactory/blog/509834/;"  Джоел Спольски Иногда, когда вы пытаетесь понять, как устроен мир, базовой математики достаточно. Если мы увеличим поток горячей воды на x, температура смеси повысится на y.  Иногда вы работаете над более сложными вещами, и даже не можете начать гадать как входные данные влияют на выходные. На складе, кажется, все идет хорошо, когда у вас меньше четырех сотрудников, но когда Вы берете пятого, они начинают наступать друг другу на пятки, и пятый не приносит никакой пользы.  Вы можете не понимать зависимость между количеством сотрудников и пропускной способностью склада, но вы определенно знаете, что делает каждый из сотрудников. Вы можете написать немного кода на JavaScript для моделирования поведения каждого из ваших работников, запустить симуляцию и посмотреть, что на самом деле происходит. Вы можете настроить параметры и правила, которым следуют сотрудники, чтобы увидеть что может помочь, и вы действительно можете получить некоторое понимание ситуации, а затем и решение сложных проблем.  Вот что такое hash.ai. Прочитайте пост о запуске в блоге Дэвида, а затем попробуйте создать свои собственные симуляции! "
aio350;Руководство по Deno: примеры работы с новой средой выполнения серверного JavaScript и TypeScript;https://habr.com/ru/post/512502/;"  Доброго времени суток, друзья!   Представляю Вашему вниманию перевод статьи «The Deno Handbook: A TypeScript Runtime Tutorial with Code Examples» автора Flavio Copes.   В этой статье мы научимся работать с Deno. Мы сравним его с Node.js и создадим с его помощью простой REST API.   Что такое Deno? Если вы знакомы с Node.js, популярной экосистемой серверного JavaScript, Deno — это почти тоже самое. Почти, но не совсем.   Давайте начнем со списка возможностей Deno, которые мне больше всего нравятся:   Он основан на современном JavaScript Он имеет расширяемую стандартную библиотеку Он имеет стандартную поддержку TypeScript (это означает, что вам не нужно вручную компилировать TypeScript, Deno делает это автоматически) Он поддерживает ES модули Он не имеет пакетного менеджера Он имеет глобальный await Он имеет встроенное средство тестирования Его цель — максимальная совместимость с браузером. Для этого он предоставляет встроенный fetch и глобальный объект window  В данном руководстве мы изучим все эти возможности. "
ru_vds;Дэн Абрамов о замыканиях в JavaScript;https://habr.com/ru/company/ruvds/blog/513764/;"Замыкания вызывают у программистов сложности из-за того, что это — «невидимая» конструкция.  Когда вы используете объект, переменную или функцию, вы делаете это намеренно. Вы думаете: «Тут мне понадобится переменная» — и добавляете её в свой код.    А вот замыкания — это уже нечто иное. В то время как большинство программистов начинает осваивать замыкания, эти люди уже, сами о том не зная, пользуются замыканиями. Вероятно, с вами происходит то же самое. Поэтому изучение замыканий — это не столько освоение новой идеи, сколько изучение того, как распознать то, с чем вы уже много раз сталкивались.  Если в двух словах, то замыкание — это когда функция обращается к переменным, объявленным за её пределами. Например, замыкание содержится в этом фрагменте кода:  let users = ['Alice', 'Dan', 'Jessica']; let query = 'A'; let user = users.filter(user => user.startsWith(query));  Обратите внимание на то, что user => user.startsWith(query) — это функция. Она использует переменную query. А эта переменная объявлена за пределами функции. Это и есть замыкание.  Вы, если хотите, можете дальше не читать. Оставшаяся часть этого материала рассматривает замыкания в другом свете. Вместо того чтобы говорить о том, что такое замыкания, эта часть статьи посвятит вас в подробности методики обнаружения замыканий. Это похоже на то, как, в 1960-х, работали первые программисты."
zhovner;Flipper Zero — давайте пилить вместе. Приглашаем разработчиков;https://habr.com/ru/company/flipperdevices/blog/514326/;"  Flipper Zero — проект карманного мультитула для хакеров в формфакторе тамагочи, который я разрабатываю с друзьями. Предыдущие посты [1],[2],[3],[4]  За первые сутки кампании на Кикстартере мы собрали 1 млн. долларов. Откровенно говоря, никто из команды даже близко не ожидал такой популярности. В первые дни мой телефон разрывался от уведомлений, звонили от журнала Форбс до Первого канала. Я до сих пор полностью не отошел от шока и не ответил до конца на все письма. Ничего подобного я никогда в жизни не испытывал.   Огромное спасибо всем, кто поддерживал нас, следил за проектом и принимал участие. Именно на Хабре я опубликовал первый пост с концептами Флиппера, получил первый фидбек, критику и похвалу. Некоторые функции мы добавили во Флиппер именно после фидбека на Хабре. Мы постараемся не обосраться с производством и оправдать ожидания.  Сейчас я полностью уверен, что максимальная открытость и честность — это лучшая стратегия. Вся наша команда верит в open source, и мы считаем, что энтузиасты могут создавать крутые проекты без привлечения инвесторов и контроля со стороны корпораций. Поэтому я предлагаю всем, кому интересен проект, принять участие в разработке.  Под катом описание программы для разработчиков прошивки, железа, десктопных программ и железных модулей."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №428 (10 — 16 августа 2020);https://habr.com/ru/post/515378/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
host_m;Нам надо создать веб с чистого листа;https://habr.com/ru/company/vdsina/blog/516584/;"  Эволюция веба на протяжении последнего десятилетия отражает развитие американской экономики. Все ключевые показатели движутся на графиках «вверх и вправо», стабильный поток фундаментальных прорывов обеспечивает ощущение «прогресса», но в действительности удобство работы и влияние технологий на людей стагнирует или даже регрессирует.  Этот кризис влияет на платформы, творцов и потребителей."
stkrizh;Python и теория множеств;https://habr.com/ru/post/516858/;Python и теория множеств В Python есть очень полезный тип данных для работы с множествами – это set. Об этом типе данных, примерах использования, и небольшой выдержке из теории множеств пойдёт речь далее.  
Gim6626;FOSS News №31 – дайджест новостей свободного и открытого ПО за 24-30 августа 2020 года;https://habr.com/ru/post/517138/;"  Всем привет!  Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. 29-летие Linux, пара материалов о столь актуальной сегодня теме децентрализованного Веба, обсуждение степени современности инструментов общения разработчиков ядра Linux, экскурс в историю Unix, инженеры Intel создали открытый проект робота на базе смартфона и многое другое."
ITMeeting;Бесплатные онлайн-мероприятия по разработке (15 сентября – 23 сентября);https://habr.com/ru/post/518856/;Нажимайте на интересующую вас тему и откроется подробная информация о мероприятии.
Data_center_MIRAN;Я был неправ. Будущее за CRDT;https://habr.com/ru/company/dcmiran/blog/521288/;"Несколько недель назад я посмотрел презентацию Мартина Клеппмана про его подход к редактированию в реальном времени через CRDT и ощутил жгучее отчаяние. Его подход хорош настолько, что превосходит всю мою работу за последнее десятилетие, и места в будущем ей уже не видать.  Но начнем сначала.  В 2010 году я работал в Google Wave, где мы пробовали создать совместные редактируемые пространства для замены электронной почты, Google Docks, форумов, мгновенных сообщений и многих других однозадачных приложений. Среди моих инструментов мне особенно нравится среда общего назначения, нигде более как в Wave не сформулированный в то время функционал. В отличие от большинства других инструментов, среда общего назначения не навязывает собственный рабочий процесс, благодаря чему через нее можно планировать праздники, создавать вики-проекты, играть с друзьями в настольные игры, назначать рабочие собрания и много чего еще."
Unclead;Ловим баги на клиенте: как мы написали свою систему для сбора клиентских ошибок;https://habr.com/ru/company/badoo/blog/522600/;У нас в Badoo довольно много клиентских приложений. Помимо основных продуктов Badoo и Bumble, у которых есть как веб-версии (десктопная и мобильная), так и клиенты под нативные платформы (Android и iOS), ещё есть с десяток внутренних инструментов со своими UI.  Для сбора клиентских ошибок мы используем собственную разработку под кодовым названием Gelatо. Последние два года я работал над её серверной частью и за это время открыл для себя много нового из мира разработки Error Tracking систем. Поэтому, если вам интересно узнать, что из себя представляет разработка системы сбора клиентских ошибок и о чём стоит подумать, если вы решите разрабатывать собственную, добро пожаловать под кат.
Gim6626;FOSS News №38 – дайджест новостей и других материалов о свободном и открытом ПО за 12–18 октября 2020 года;https://habr.com/ru/post/523978/;"  Всем привет!  Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Почему Конгресс должен инвестировать в Open Source; Open Source вносит определяющий вклад в развитие всего связанного с программным обеспечением; разбираемся Open Source это модель разработки, бизнес-модель или что; введение в разработку для ядра Linux; недавно вышедшее ядро Linux 5.9 поддерживает 99% популярного PCI-оборудования на рынке и многое другое."
editor_ruvds;«Docker уже умер» или все, что вы хотели узнать про Devops, но боялись спросить;https://habr.com/ru/company/ruvds/blog/524942/;" Недавно в наших соцсетях выступал Александр Чистяков, DevOps с 7-летним опытом и сооснователь Санкт-Петербургского сообщества DevOps-инженеров.  Саша один из топовых докладчиков в этой сфере, он выступал на главных сценах на Highload++, РИТ++, PiterPy, Стачка, всего сделав не менее 100 докладов. В прошлый понедельник он ответил на вопросы зрителей и рассказал про свой опыт.  Делимся записью эфира и расшифровкой.   Меня зовут Александр Чистяков, я много лет работаю DevOps-инженером. Я давно консультирую различные компании на тему внедрения DevOps-практик, использования современного DevOps-инструментария и организации инфраструктур таким образом, чтобы все мы могли спокойно спать по ночам, и люди продолжали получить деньги за свои товары и услуги.  В основном я консультировал иностранные компании. "
ru_vds;Кунг-фу стиля Linux: глобальный поиск и замена строк с помощью ripgrep;https://habr.com/ru/company/ruvds/blog/527242/;Даже те, кто пользуется Linux лишь от случая к случаю, вероятно, знают о том, как работать с grep. При этом не нужно быть экспертом в сфере регулярных выражений для того чтобы без особых сложностей пользоваться grep для поиска в файлах строк, соответствующих простым последовательностям символов или сложным шаблонам. Конечно, grep — это отличный инструмент для поиска информации. Но что если нужно что-то найти, а потом — заменить это на что-то другое? Например, может быть, нужно изменить все найденные слова HackADay на Hackaday. Тут можно применить sed, но этой утилитой пользоваться довольно сложно. Для решения этой задачи можно было бы воспользоваться awk. Но, учитывая то, что речь идёт о языке программирования, использовать его для решения столь простой и распространённой задачи — это, пожалуй, чересчур. Именно идея, заключающаяся в простом решении вышеописанной задачи, и лежит в основе утилиты ripgrep (соответствующая ей команда выглядит как rg). С помощью rg можно решать те же задачи, что решает grep, но при этом — пользоваться более современными регулярными выражениями и, кроме того, не только искать строки, но и выполнять их замену.  
Gim6626;FOSS News №43 – дайджест новостей и других материалов о свободном и открытом ПО за 16-22 ноября 2020 года;https://habr.com/ru/post/529328/;"  Всем привет!  Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. В этом выпуске получилось особенно много важных материалов про мобильные устройства. PinePhone с KDE Plasma Mobile с возможностью использования в качестве десктопа; смартфон Librem 5 перешёл на стадию массового производства; началась кампания по сбору средств для производства смартфона с выдвижной клавиатурой Pro1 X; GitHub разблокировал youtube-dl и принял меры для исключения необоснованных блокировок; Ubuntu Web Remix (альтернатива Chrome OS с браузером Firefox вместо Google Chrome); как монетизируется Open-Source; переведут ли госсофт на open source технологии (возможности для развития этого тренда в США) и многое другое."
Doublesharp;Самые популярные языки программирования. Хабратоп 2020 года;https://habr.com/ru/company/skillfactory/blog/531360/;"Мы тут решили подбить предварительные итоги года и проанализировать рейтинги популярности языков программирования. Как менялась популярность ЯП и какие языки в 2020 году считаются топовыми, читайте в этой статье.   Ситуация с ЯП очень похожа на события этого фильма. Узнали же из какого?"
pronskiy;PHP-Дайджест № 194 (1 – 14 декабря 2020);https://habr.com/ru/post/532950/;" Свежая подборка со ссылками на новости и материалы. В выпуске: Enum в PHP 8.1, удаление Serializable и ограничение $GLOBALS, а также другие новости из PHP Internals, PhpStorm 2020.3, Symfony UX, порция полезных инструментов, видео, и первый PHP Дайджест Стрим.  Приятного чтения! "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №446 (14 — 20 декабря 2020);https://habr.com/ru/post/534124/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
AndrewKazanin;Frontend — мода, губящая проекты;https://habr.com/ru/post/535778/;Эта история личное мнение, основанное на наблюдениях, во время работы в разных проектах.Вход в командную разработкуВо времена моей работы на фрилансе проблем по выбору стека технологий не было, все было просто, я советовался с друзьями, читал различные источники и выбирал нужный стек. Это были популярные вещи, потому что по ним было больше информации, больше готовых проектов, где можно было подсмотреть нужное решение и больше ответов на Stack Overflow, если сталкивался с какой-либо проблемой. Благодаря этому работать было не так уж напряженно.Но когда я начал работать в команде, выбор стека превратился в загадку. В голове постоянно крутилось: Зачем? Почему? Откуда это взяли? Что за подход? Я не понимал, почему в одной команде одни технологии, в другой другие, хотя все по сути делали одно и тоже.Так же было очень интересно и не понятно, почему одни люди на проекте с пеной у рта доказывали превосходство выбранного пути, а в другой команде другие делали тоже самое, но по-другому и различные подходы в технологиях, которые я описывал из предыдущей команды попросту высмеивали.На тот момент я просто плыл по течению и вникал. Мне не когда было заниматься философией, нужно было просто набивать скилы. Поэтому работая на проекте, я полностью проникался идеями технических вдохновителей и принимал их как свои собственные.Иногда приходило время и приходилось переходить на другие проекты. И опять наступало время великих удивлений, когда вроде бы стандартный, технически одинаковый и устоявшийся современный фронтенд, в новой команде принимал абсолютно извращённый вид под капотом и абсолютно одинаковый на выходе.Понимание происходящегоНачать наверно нужно с понимания, что истины не существует и каждый волен делать то, что ему захочется, лишь бы это не вредило общему процессу и результату. Учитывая, что на фронте +10 решений для любой проблемы.Работа начинается с выбора базового стека, какой бы он там ни был, но дальше начинается большой потенциал для различных вариаций. Так же прибавляется уже существующая база написанного кода, ибо многие вещи или если сказать не все, уже написаны и их осталось только адаптировать под свои нужды.
alexey-lustin;Гибриды побеждают или холивары дорого;https://habr.com/ru/post/536680/;"Мотивом для написания данной статьи послужил тот факт, что на habr.com участилось появление материалов маркетингового характера про Apache Kafka. А также тот факт, что из статей складывается впечатление что пишут их немного далекие от реального использования люди — это конечно же только впечатление, но почему-то в большинстве своем статьи обязательно содержат сравнение Apache Kafka с RabbitMQ, причем не в пользу последнего. Что самое интересное — читая подобные статьи управленцы без технического бэкграунда начинают тратить деньги на внутренние исследования, чтобы ведущие разработчики и технические директора выбрали одно из решений. Так как я очень жадный/домовитый, а также так как я сторонник тезиса ""В споре НЕ рождается истина"" предлагаю вам ознакомится с другим подходом — почти без сравнения разных брокеров."
Polina_Averina;Пишем фильтры WASM для Envoy и деплоим их с Istio;https://habr.com/ru/company/southbridge/blog/539484/; Envoy — это высокопроизводительный программируемый прокси L3/L4 и L7, на котором основано множество реализаций service mesh, например, Istio. Envoy обрабатывает трафик с помощью сетевых фильтров, которые можно объединять в цепочки, чтобы реализовывать сложные функции для контроля доступа, преобразования, обогащения данных, аудита и так далее. Чтобы расширить функционал Envoy, новые фильтры можно добавить одним из двух способов:  Интегрируем дополнительные фильтры в исходный код Envoy и компилируем новую версию Envoy. Недостаток такого подхода в том, что придется поддерживать свою версию Envoy и постоянно синхронизировать ее с официальным дистрибутивом. Фильтр, кстати, нужно реализовать на C++, как и сам Envoy. Динамически загружаем новые фильтры в Envoy Proxy в рантайме. 
Gim6626;FOSS News №55 – дайджест материалов о свободном и открытом ПО за 1-7 февраля 2021 года;https://habr.com/ru/post/541260/;"  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Началось бета-тестирование AlmaLinux, форка CentOS; машины Ford будут использовать Android с 2023-го года; Google собирается ограничить возможности Android по получению информации о владельце; Rocket.Chat получил $19M для развития Open Source корпоративного мессенджера; доклад Digital Ocean о динамике участия в Open Source в 2020; Google запустил сервис OSV (Open Source Vulnerabilities); Linux Foundation начинает сотрудничать с Magma для ускорения развёртывания беспроводных сетей и многое другое."
nkF7;Swagger (OpenAPI 3.0);https://habr.com/ru/post/541592/;Swagger - это фреймворк для спецификации RESTful API. Его прелесть заключается в том, что он дает возможность не только интерактивно просматривать спецификацию, но и отправлять запросы – так называемый Swagger UI. Также возможно сгенерировать непосредственно клиента или сервер по спецификации API Swagger, для этого понадобиться Swagger Codegen.
pkruglov;IT-валентинка: 53 способа признаться в любви;https://habr.com/ru/company/mailru/blog/542090/;" Однажды на Zoom-созвоне нашей команды нить дискуссии ушла за пределы планируемого. На удаленке такое часто случается, потому что всем не хватает обычного «кухонного» общения в офисе. Разговор начался с итальянской книги, где на всех языках мира написано «Я тебя люблю». Потом были возражения, что языки программирования тоже языки, почему их там нет??? Затем мы вспомнили, что не за горами День всех влюбленных. Так мы придумали, как сделать ремейк этой книги на свой лад, а заодно вспомнить про свежий рейтинг языков программирования от IEEE.  Книгу мы выпустили небольшим тиражом, а в этом посте публикуем ее содержание: признания в любви на 53 самых популярных языках программирования. А в качестве бонуса предлагаем краткое описание каждого из них."
Seleditor;Цветочные новости: разработчики ОС Fuchsia добавят поддержку запуска немодифицированных Linux-программ;https://habr.com/ru/company/selectel/blog/542160/;" Несмотря на то, что новостей про ОС Fuchsia немного, проект продолжает развиваться, и очень активно. Доказательство — сообщение от разработчиков о своих планах реализовать механизм для запуска немодифицированных программ, которые собраны для Linux.  Основывается этот механизм на специальной «прослойке», которая получила название starnix. Именно она обеспечивает совместимость с ABI Linux."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №454 (8 — 14 февраля 2021);https://habr.com/ru/post/542380/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
Developers_Relations;Data driven подход для усиления защиты Android;https://habr.com/ru/company/google/blog/544810/;"  Мы делаем все, чтобы платформа Android была безопасной для всех пользователей на всех устройствах. Каждый месяц выходят обновления системы безопасности с исправлениями уязвимости, найденными участниками программы Vulnerability Rewards Program (VRP). Однако мы также стараемся защищать платформу от других потенциальных уязвимостей, например используя компилятор и улучшая тестовую среду. Экосистема Android включает в себя устройства с самыми разными возможностями, поэтому все решения должны быть взвешенными и должны учитывать доступные данные.  В этой статье рассказано о том, как мы выбираем средства безопасности для конкретных обстоятельств и как они реализуются. "
Gim6626;FOSS News №59 – дайджест материалов о свободном и открытом ПО за 1-7 марта 2021 года;https://habr.com/ru/post/545930/;"  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Google представил фреймворк Flutter 2, теперь для создания любых типов программ; проект браузера Brave выкупил поисковый движок Cliqz и начнёт развитие своей поисковой системы; история от разработчика «Как я правил баг в Angular»; компания Scarf выпускает инструменты аналитики, которые помогают разработчикам с монетизацией; результаты исследования Red Hat о состоянии корпоративного программного обеспечения с открытым исходным кодом; интервью с Итало Виньоли из The Document Foundation о том, является ли открытый исходный код будущим офисного программного обеспечения; скринкаст терминала с помощью asciinema; Proton близок к полноценной поддержке 7000 Windows-игр и многое другое."
ilammy;Приёмы неблокирующего программирования: атомарные операции и частичные барьеры памяти;https://habr.com/ru/post/546222/;В первой статье цикла мы познакомились с простыми неблокирующими алгоритмами, а также рассмотрели отношение “happens before”, позволяющее их формализовать. Следующим шагом мы рассмотрим понятие «гонки данных» (data race), а также примитивы, которые позволяют избежать гонок данных. После этого познакомимся с атомарными примитивами, барьерами памяти, а также их использованием в механизме “seqcount”. С барьерами памяти некоторые разработчики ядра Linux уже давно знакомы. Первый документ, содержащий что-то похожее на спецификацию гарантий, предоставляемых ядром при одновременном доступе к памяти — он так и называется: memory-barriers.txt. В этом файле описывается целый зоопарк барьеров вместе с ожидаемым поведением многопоточного кода в ядре. Также там описывается понятие «парных барьеров» (barrier pairing), что похоже на пары release-acquire операций и тоже помогает упорядочивать работу потоков. В этой статье мы не будем закапываться так же глубоко, как memory-barriers.txt. Вместо этого мы сравним барьеры с моделью acquire и release-операций и рассмотрим, как они упрощают (или, можно сказать, делают возможной) реализацию примитива “seqcount”. К сожалению, даже если ограничиться лишь наиболее популярными применениями барьеров — это слишком обширная тема, поэтому о полных барьерах памяти мы поговорим в следующий раз.
Gim6626;FOSS News №60 – дайджест материалов о свободном и открытом ПО за 8-14 марта 2021 года;https://habr.com/ru/post/546988/;"  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. SUSE готовится к многомиллиардному IPO; Linux Foundation, Red Hat и Google представили Sigstore, сервис для криптографической верификации кода; РЖД переводит часть рабочих станций на Astra Linux; компания Canonical начала продвижение Ubuntu как замены CentOS; вышла официальная консольная версия 7-zip для Linux; никогда такого не было и вот опять. Почему нужно использовать self-hosted VPN. Релиз Amnezia; критика Microsoft после удаления из GitHub прототипа эксплоита для Microsoft Exchange; влияние публичных облаков на открытый исходный код; разработчики стимулируют внедрение открытого исходного кода на предприятиях и многое другое."
Gim6626;FOSS News №61 – дайджест материалов о свободном и открытом ПО за 15-21 марта 2021 года;https://habr.com/ru/post/548194/;"  Всем привет!  Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире. Signal перестал работать в Китае; Фонд СПО объявил обладателей ежегодной премии за вклад в развитие свободного ПО; Википедия хочет взимать плату с Google, Amazon и Apple за использование своего контента; проект OpenHW Accelerate потратит 22.5 млн долларов на развитие открытого оборудования; Python исполняется 30 лет: интервью с Пабло Галиндо, которому поручено поддерживать язык программирования в нужном русле; заря бытовых меш-сетей, или Интернет будущего (об Yggdrasil Network); новый способ поиска совместимых компонентов для компьютера на основе Linux-телеметрии; как пандемия, экономика, эффективность и доверие привели к подъёму Open Source и многое другое."
ovi;«Представь, что ты нашел решение, про которое можешь сказать: оно лучшее в мире» — интервью с создателем ClickHouse;https://habr.com/ru/company/rebrainme/blog/548332/;Алексей Миловидов работал инженером в Яндекс.Метрике, и перед ним стояла непростая задача. Яндекс.Метрика работала с петабайтами данных — это был третий по популярности сервис веб-аналитики в мире. Для него нужна была база данных, которая может обрабатывать огромное количество данных в реальном времени, очень быстро, при этом не сжигая миллиарды денег.Долгое время такая СУБД разрабатывалась только для внутренних нужд — но в 2016 вышла в опенсорс под названием ClickHouse, и сообщество встречает инструмент по-разному.Мы поговорили с Алексеем о том, как он стал разработчиком, почему ClickHouse намного быстрее всех аналогов и как так получилось, какова цена производительности, почему ClickHouse стал опенсорсным и куда вообще движется индустрия.
michael-filonenko;Tarantool vs Redis: что умеют in-memory технологии;https://habr.com/ru/company/mailru/blog/550062/;" В этой статье я хочу сравнить Redis и Tarantool. У меня нет цели сделать громогласный вывод «Tarantool лучше!» или «Redis круче!». Я хочу понять их сходства и отличия, разобраться, для каких задач какую технологию выбрать. Потому что это очень близкие на первый взгляд вещи, и вопросы про их отличия я вижу часто.  Для этого мы посмотрим на технологии в трёх частях:   Вначале посмотрим глазами новичка. Что такое БД в памяти? Какие задачи они решают лучше дисковых БД? Потом посмотрим архитектурно. Как обстоит вопрос с производительностью, надёжностью, масштабированием? В третьей части лезем в технические вещи поглубже. Типы данных, итераторы, индексы, транзакции, ЯП, репликация, коннекторы.  Смело переходите сразу к наиболее интересной вам части. Или даже сразу к итоговой табличке сравнения, которую я прикладываю в заключении.  Поехали!"
anastasiak2512;Релиз CLion 2021.1: глобальный анализ потоков данных, улучшения для удаленной работы, постфиксное автодополнение;https://habr.com/ru/company/JetBrains/blog/551476/;Привет, Хабр!В JetBrains стартовал новый релизный год: все наши десктопные продукты обновились или обновятся в самое ближайшее время. Сегодня мы хотим поговорить о CLion 2021.1 — новейшей версии нашей кроссплатформенной IDE для разработки на C и C++.
MagisterLudi;Ontol: подборка видео-лекций и каналов для продвинутых программистов;https://habr.com/ru/company/macloud/blog/551896/;"  Недавно на HackerNews обсуждали видео и каналы, где можно поучиться продвинутому программированию. Под катом — подборка из 30 полезняшек.  В перерывах между полетами на реактивном ранце и переводами материалов Y Combinator, я делаю проект «Ontol» — такое место в сети, где максимальная концентрация полезного, апгрейдящего мировоззрение материала (ценного на горизонте 10+ лет, например, такого), которым можно делиться бесплатно в 1 клик. (канал в телеграм: t.me/ontol)  Вот мои предыдущие бесплатные образовательные подборки:   75 лекций на русском от Y Combinator (из 172) Подборка 143 переводов эссе Пола Грэма (из 184) Все статьи Тима Урбана (Wait But Why) на русском [46 из 99] 450 бесплатных курсов от Лиги Плюща Онтол от DeepMind: самые полезные материалы по искусственному интеллекту от мирового лидера Лучшее в мире видео-объяснение нейронных сетей, глубокого обучения, градиентного спуска и обратного распространения 70 офигенных видеокурсов от мировых звёзд  "
romas1982;Как научить разработчиков не бояться Open Source и правильно с ним работать?;https://habr.com/ru/company/oleg-bunin/blog/552112/;Все, так или иначе, используют Open Source. Но что делать, если нам нужна новая фича или мы нашли критический баг? Можно, конечно, форкнуть репозиторий и быстро что-то поправить. Но форк нужно поддерживать, а новая версия может оказаться несовместимой с вашей. Например, GitHub потратил полтора года, чтобы обновить фреймворк Ruby on Rails с версии 3.2 до версии 5.2.Можно отправить pull request. Так вы решите не только свою проблему, но и поможете сообществу. Но у мейнтейнера есть свой Open Source проект и контрибьюторы ему обычно только мешают. Поэтому ваш pull request могут не принять. И первый, и второй, и  десятый.Как же тогда работать с Open Source? Михаил Грачёв, тимлид из Evrone, расскажет,  как в компании выстроили работу с Open Source и превратили это в культуру. Для тех, кто предпочитает смотреть видео — запись его выступления на TeamLead Conf 2021.
Greiv656;Вышел релиз Fedora 34. Что нового?;https://habr.com/ru/company/selectel/blog/554498/;" Полгода назад мы писали о релизе Fedora 33, и теперь появилась новая версия дистрибутива. Кроме того, разработчики подготовили и сопутствующие продукты, включая Fedora Workstation, Fedora Server, CoreOS, Fedora IoT Edition. Что касается платформ, то дистрибутив подходит для x86_64, Power64, ARM64 (AArch64) и 32-битных ARM чипов.  Под катом — основные улучшения и нововведения в релизе Fedora 34."
geniyoctober;Kafka, Lamoda и непреодолимое желание учиться;https://habr.com/ru/company/southbridge/blog/558570/;"  Никита Галушко, разработчик подразделения Online Shop Lamoda, в онлайн-гостях у учебного центра Слёрм поделился своими впечатлениями от курса по Kafka, рассказал, как используют эту технологию и какие проблемы решают в отделе R&D (Research and Development).  «Как быстро мы упремся в сетевой канал, который использует Kafka — через года два или раньше?» Lamoda — один из крупнейших интернет-магазинов в России и СНГ. Чтобы покупатели пользовались сайтом без проблем и радовались быстрой отгрузке и доставке, IT-системами в Lamoda занимаются 340 сотрудников: разработчики, QA-инженеры, аналитики, DevOps-специалисты, продуктовые менеджеры, дизайнеры. Узнаем, как в этой системе крутятся винтики."
kseniiavol;Миру нужны фуллстек-крафтсмены;https://habr.com/ru/company/jugru/blog/558702/;  Спор «фуллстек против узкой специализации» вечный. Но одно дело — спорить в комментах, а совсем другое — создать собственную компанию и проверить экстремальный подход на практике. Антон Кекс пошел по этому пути: стал сооснователем компании Codeborne, где разработкой занимаются исключительно «фуллстек-крафтсмены» и практикуется экстремальное программирование. И по его словам, там командами из 2-4 человек получается сделать то, на что другим требуется человек 50. Он подробно рассказал об этом на нашей конференции JPoint. Обычно на наших мероприятиях не услышишь слово «agile», потому что о методологиях много пустословия, а мы любим конкретику, код и хардкор. Но поскольку Антон не диванный теоретик, а обладатель большого нестандартного опыта, это как раз хардкор и ценная информация. Можно не соглашаться с его позицией, но как минимум ознакомиться с ней полезно. И хотя доклад сделан еще пару лет назад, в 2021-м он продолжает собирать просмотры, поэтому мы решили сделать для Хабра текстовую версию. Под катом — и видеозапись, и текстовая расшифровка. Дальше повествование ведется от лица Антона.
Polina_Averina;Service Mesh Wars, прощаемся с Istio;https://habr.com/ru/company/southbridge/blog/558908/; Фото Brian McGowan, Unsplash.com Мы использовали Istio в продакшене почти два года, но больше не хотим. Я расскажу, чем мы недовольны и как выбрали другую service mesh.
DrAndyHunter;WebRTC для любопытных (часть 1);https://habr.com/ru/post/559772/;"Данный материал - это вольный перевод онлайн-книги webrtcforthecurious.com. Вся книга будет разбита на отдельные статьи, которые будут выходить в разное время. В основном я это сделал для себя в будущем, так как в свободное от работы время почти целиком и полностью занимаюсь проектом в основе которого именно WebRTC. Книга довольно поверхностно объясняет как работает WebRTC ""под капотом"", для подробностей надо читать RFC. Ссылки на RFC различных используемых протоколов буду приводить. Стоит особо отметить главу ""Отладка"", где неплохо описываются идеи того, как отлаживать различные проблемы с сетью, задержками и прочим.Итак, часть 1 - вводная."
Gim6626;FOSS News №79 – дайджест материалов о свободном и открытом ПО за 12—18 июля 2021 года;https://habr.com/ru/post/568348/; Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  Microsoft опубликовал первый стабильный выпуск своего Linux-дистрибутива CBL-Mariner. МГТУ им. Н. Э. Баумана переходит на Linux. Amazon опубликовал OpenSearch 1.0, форк платформы Elasticsearch. Разработка и эксплуатация ядра Linux в инфраструктуре Яндекса. Компания Valve анонсировала игровую консоль Steam Deck на базе Arch Linux. Готов к производству первый прототип открытого чипа Libre-SOC. MATE — история графической оболочки в Linux. «Do Not Track» для консольных интерфейсов. Microsoft и Linux: краткая история эволюции непростых взаимоотношений. Microsoft устраняет причину, по которой многие отказывались от GNU/Linux на десктопах. Современные Unix-команды.  И многое другое…
eshulyndina;Микросервисы vs. Монолит;https://habr.com/ru/company/yandex_praktikum/blog/570024/;"В начале ноября на ютуб-канале Яндекс.Практикума прошли дебаты «Микросервисы, Монолит и Зомби». Ведущие дебатов — наставник курса «Мидл Python-разработчик» Руслан Юлдашев и техлид курса Савва Демиденко — разобрали архитектуры двух систем, прошлись по реальным задачам и ошибкам из своей рабочей практики и по очереди защищали свои позиции.  Обсуждение растянулось на 100 минут, поэтому мы публикуем сокращённую текстовую расшифровку.    Этот материал будет полезен разработчикам, которые хотят научиться делать хорошо масштабируемые продукты и задумываются про архитектурные проблемы в разработке, а также для тех, кто принимает архитектурные решения в проектах.  Вы узнаете, как врачи регионов России не получали зарплату из-за микросервисов и сколько монолитов можно запустить, пока согласовывается интерфейс между сервисами."
honyaki;Онлайн-образование, Python и DevOps набирают обороты;https://habr.com/ru/company/skillfactory/blog/570588/;К старту курса о Fullstack-разработке на Python мы подготовили сокращённый перевод опроса StackOverflow среди почти 83 000 людей, без малого 70 % из них — профессиональные разработчики. Опрос проводился с 15 июня по 25 мая, облачные платформы в нём впервые выделены из платформ в целом, также добавлен раздел о том, с какими языками, платформами, фреймворками и т. д. людям хотелось бы работать. Конечно, вы найдёте в опросе информацию о зарплатах и образовании. Подробности, как всегда, под катом.
kate_shlyakhova;Люди python-сообщества: кто приедет на PyCon Russia;https://habr.com/ru/company/it_people/blog/571644/;Представьте, что вы заранее знаете, о чем с человеком можно пообщаться. Есть ли у вас общие темы, интересы? Наступал ли он на те же грабли, что и вы, только на год-два раньше? Тогда можно подойти, и сказать, к примеру: “Читал, что ты можешь развернуть микросервисы локально несколькими способами…” В общем, облегчаем задачу интровертам (не путайте их с социофобами!) и повышаем КПД общения. Расскажем вам о той части сообщества питонистов, которая приедет на PyCon 5-6 сентября —  о спикерах. Как оказалось, они готовы общаться на темы, которые выходят далеко за рамки их докладов. 
Gim6626;FOSS News №83 – дайджест материалов о свободном и открытом ПО за 9—15 августа 2021 года;https://habr.com/ru/post/573056/; Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  Google анонсировала GitHub-приложение Allstar для постоянного применения лучших практик безопасности. Facebook разработал открытую PCIe-карту с атомными часами. Создана организация eBPF Foundation. Xiaomi представила робопса с открытым исходным кодом. Восьмая научно-практическая конференция OS DAY. Проект электронного мультитула QUARK. Часть 3. Вышел новый релиз MULTICS (олды тут?).  И многое другое…
Bright_Translate;Что это за зверь — WebAssembly?;https://habr.com/ru/company/ruvds/blog/573928/;"  По мнению многих специалистов WebAssembly представляет будущее эффективных и безопасных вычислений. В чем же конкретно выражаются его достоинства, и почему стоит отнестись к этому языку более внимательно?"
michael-filonenko;In-Memory Showdown: Redis vs. Tarantool;https://habr.com/ru/company/mailru/blog/575772/;"  In this article, I am going to look at Redis versus Tarantool. At a first glance, they are quite alike — in-memory, NoSQL, key value. But we are going to look deeper. My goal is to find meaningful similarities and differences, I am not going to claim that one is better than the other.  There are three main parts to my story:   We’ll find out what is an in-memory database, or IMDB. When and how are they better than disk solutions? Then, we’ll consider their architecture. What about their efficiency, reliability, and scaling? Then, we’ll delve into technical details. Data types, iterators, indexes, transactions, programming languages, replication, and connectors.  Feel free to scroll down to the most interesting part or even the summary comparison table at the very bottom and the article."
Gim6626;FOSS News №88 – дайджест материалов о свободном и открытом ПО за 6—12 сентября 2021 года;https://habr.com/ru/post/577498/;  Всем привет! Продолжаем дайджесты новостей и других материалов о свободном и открытом ПО и немного о железе. Всё самое главное про пингвинов и не только, в России и мире.  Главные темы нового выпуска:  Исследование: открытый исходный код может способствовать развитию экономики ЕС и цифровой автономии. Red Hat предоставит технические компетенции по созданию сообщества для платформы OS-Climate Data Commons. Samsung приглашает на открытую онлайн конференцию об Open Source. 4-е издание нестареющей классики «Современные операционные системы». 10-е издание книги «Библия Linux». Основные инструменты Kubernetes в 2021 году. Конкурс разметки OpenStreetMap. Как Linux изменил наш мир за 30 лет. Интервью с Брентом Шредером, техническим директором SUSE. Опыт работы со смартфоном PinePhone: модульный телефон без сервисов Google. Debian GNU/Linux 11 «Bullseye». Что нового (видеообзор и мнение). Кинонаследие России изымут из баз на ПО Microsoft, чтобы сложить в ИС на российском Linux и PostgreSQL.  И многое другое…
dennydo;TechCrunch50 — первые впечатления;https://habr.com/ru/post/39307/;"Первые впечатления не фонтан. Что особо не нравится 1. Вайфай был мертвый. Это очень странно в Америке на ведущей конференции, посвященной технологическому бизнесу. Пришлось бегать в отель сбросить очень важную почту 2. Из-за того, что народу очень много, ВиСей на единицу площади конференции – очень мало. Может в другие дни будет лучше. Я как-то больше привык к конференции с числом участников 100-300 человек и пара десятков инвесторов там не потеряется, а тут 10 инвесторов на 2000 голодных стартапов со всего мира…. 3. Как и в прошлом году очень не понятна система отбора проектов на конкурс. В демо пите принимают участие компании, значительно сильнее основной части. Иногда просто смешно становится.  4. Панели, в общем-то сильные, но должен сказать, что на СВОДе они посильнее и продуманнее.  5. Две украинские компании принимают участие в демопите – SenderOk и ClienteQ.   Посмотрим, что будет вечером и завтра. За 3к юсд + билет + отель сервис неудовлетворительный, у многих ожидания не оправдались.   Что нравится, это то, что нашим предпринимателей есть чему поучиться. Упор на рынки и бизнес-модели. Буду пробовать писать в блог (dennydov.livejournal.com), но к ЖЖ доступ совсем плохой  фотки будут позже Получаю смски, что смотрят видео в онлайне. Наверное на techcrunch50.com есть информация.  PS. Под конец дня так пришли инвесторы. И даже мучали, тех, кто выставлялся вопросами, что порадовало. Опросил 10 компаний, каждая из них получила по 4-10 очень интересных контактов.  Вот еще из первых отзывов Spent entire day at the tc50. perhaps the most poorly organized and unprofessional conference in a long time. all day long the wifi didnt work at the conference for majority of the people. Food was lame, there was no coffee during breaks and all this for $3K? yeah I know this is meant to be “rustic” but for $3K, a lot less rust was expected; this was just poor management. very poor choice of venue; 1 small bathroom for 1500+ people (its mostly men)? the sound system kept breaking and the if panelist didn’t speak with their face in the microphone, one couldn’t hear them. those of you who watched from home saved themselves a lot of money and definitely had a better experience. Peter Thiel’s interview was the best part but overall day 1 was a disaster. Hopefully next 2 days will be better."
Barracuda72;Rockbox для всех;https://habr.com/ru/post/135559/;"Привет, Хабрахабр!  Открыл я тебя не так давно, но уже успел прочитать очень много интересного (здесь должна была быть конкретика, но ее было бы слишком много — потому ее здесь нет). И вот, наконец, решился и сам кое-что написать.  Примерно 8 месяцев назад разработчик из Польши Marcin Bukat (wodz) добавил в проект Rockbox начальную поддержку так называемого семейства чипов Rockchip RK27XX. Тогда, 8 месяцев назад, все, что умел Rockbox на этих устройствах (точнее даже всего лишь на одном из этих устройств) — запускаться и отображать текст на экране плеера. А как сейчас обстоят дела? "
alaudo;Еще раз об изучении языков;https://habr.com/ru/post/154685/;"Тема изучения иностранных языков уже много раз обсуждалась здесь. В архивах можно найти много различных интересных способов и практических советов по поводу изучения языков. В какой-то момент я решил, что мне тоже, наверное, стоит поделится опытом, накопленным в процессе изучения иностранных языков: более-менее бегло я могу говорить на шести языках. Всё, о чём я пишу здесь — это моё личное понимание проблемы изучения языков и моё видение возможных решений. Я не претендую на какую-либо истину или научность и не имею законченного профессионального образования в области лингвистики. Я не буду рассматривать здесь изучение языка на уровне туриста, где достаточным уровнем является способность понять основные пункты меню в ресторане, сделать заказ или суметь спросить дорогу и понять, что тебе ответили. Знание языка на таком уровне, конечно, полезно, но это нельзя назвать «владением языком». Для меня уровень владения начинается с того момента, когда я могу спокойно читать тексты на этом языке используя лишь словарик, встроенный в электронную читалку (раньше AlReader, потом СoolReader, сейчас наконец PocketBook Reader). "
alexzfort;Дайджест интересных новостей и материалов из мира айти за последнюю неделю №27 (13 — 19 октября 2012);https://habr.com/ru/company/zfort/blog/155431/;Предлагаем вашему вниманию очередную подборку с ссылками на новости, интересные материалы и полезные ресурсы.  
Tigrik;Хабр глазами новичка;https://habr.com/ru/post/160259/;"К вашему вниманию предлагается небольшая подборочка информации о том, как максимально продуктивно и эффективно можно пользоваться таким замечательным ресурсом как Хабр.  Субъективизм, естественно, в этой статье будет присутствовать, так как то, что интересно и полезно лично для меня, кому-то из читателей Хабра может показаться банальным и очевидным, но, надеюсь, найдутся и те, кому приведенная ниже информация поможет более полно использовать возможности, доступные на Хабре.  Лично мне, после авторизации на Хабре, кроме отличных статей, очень понравилось следующее: компетентность авторов, саморегуляция, дружеское сообщество, удобные инструменты для создания статей и коммуникации.   Ниже смотрите видеоролик об инструментарии доступном на Хабре, в котором показал:   настройку Хабраленты (личной информационной ленты пользователя Хабра); чтение Хабраленты в RSS-агрегаторе; отслеживание комментариев в интересных темах через Хабратрекер; подписку на интересующих вас пользователей Хабра через трекер; подписку на комментарии к выбранной статье Хабра через Email (текст каждого комментария приходит на почтовый ящик полностью); профиль пользователя Хабра и доступную в нём информацию; а также кратко осветил настройки, доступные на Хабре на момент создания этого видеоролика.     Ниже описываю возможности инструментария Хабра для удобной работы с информацией в формате текст + изображения + слайдшоу.  "
Frolenarzt;SQL — гибок или почему я боюсь NoSQL;https://habr.com/ru/post/164361/;"От переводчика: Недавно презентовал на Хабре один проект, в котором использовал MySQL. Многие пользователи удивлялись, почему я не использую NoSQL для моих задач, и настоятельно порекомендовали переходить на нереляционные базы данных. Сегодня я наткнулся на эту статью, которая отлично объясняет, почему я “боюсь” NoSQL.  Должен признаться, что долго думал над тем стоит ли писать эссе о базах данных, потому что трогать эту тему — всё равно, что ворошить осиное гнездо. Во-первых, многое было написано до меня, а во-вторых, тема слишком сложна, что бы делать какие-либо выводы из личного опыта.  Последние две недели, однако, заставили меня понять, что я больше никогда не начну проект на основе MongoDB или любой другой нереляционной базы данных (НРБД) в качестве первичного хранилища данных. Обратите внимание – я сказал “начну”. Я не говорю, что больше никогда не буду использовать MongoDB как таковую. "
gatoazul;Десятикратная разборчивость;https://habr.com/ru/post/178553/;"Каждый знает, что бывают «десятикратные» программисты, которые в 10 раз более производительны, чем программист обыкновенный. Мы не можем измерить производительность, поэтому и не знаем, правда ли это. Но на самом деле людей необыкновенно производительных существует немало, достаточно, чтобы доказать существование «десятикратного программиста».  Как же они этого добиваются?  Часто считают, что десятикратная производительность вытекает из десятикратных способностей или десятикратных знаний. Я так не думаю. Не хочу сказать, что способности или знания бесполезны. Но за много лет я заметил, что самое главное тут — десятикратная разборчивость. Фокус в том, чтобы постоянно уклоняться от паршивой работенки.  "
Londain;Большой список 256-ти языков программирования;https://habr.com/ru/post/179987/;Скоро лето, и каникулы или отпуск — не за горами. Для тех, у кого появится свободное время, Роберт Диана вместо обычного бездельничества предлагает выучить новый язык программирования.  
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №64 (30 июня — 6 июля 2013);https://habr.com/ru/company/zfort/blog/185778/;Предлагаем вашему вниманию очередную подборку с ссылками на новости, интересные материалы и полезные ресурсы.   
leventov;Опросы про языки программирования (+ обновление);https://habr.com/ru/post/201548/;"  Давно на Хабре не было опросов про популярность языков программирования. Идея опроса возникла из спора о популярности языка D в топике о новых возможностях C++. Существующие рейтинги: RedMonk, TIOBE, LangPop.com слишком косвенно меряют непонятно что.  Цель этих опросов: определить соотношение кол-ва людей, которые пишут на том или ином языке сейчас. "
potan;Классы типов на C++;https://habr.com/ru/post/205482/;" Уже было описано как реализовать монады на C++ без классов типов. Я же хочу показать, как можно реализовать классы типов, использую в качестве примера монады. Этот прием широко применяется в языке Scala, но может быть использован и в C++. Кратко я его описал в качестве иллюстрации трудностей унифицированного описания библиотек, сейчас же продемонстрирую его реализацию. Нужно отметить что классы типов применяются не только в декларативных языках, как Haskell и Mercurry, но о нашли свое отражение в достаточно классических Go и Rust. Этот прием так же подходит для реализации мультиметодов из Common Lisp и Clojure.  C++ я не брал в руки уже лет шесть, так что код может быть не идеоматичным и не использовать новые (полезные) фичи. Кроме того, я полностью игнорирую проблему управления памятью — практикующие C++ справятся с этим лучше меня. Работоспособность кода проверялась на gcc 4.7.3.  "
Vitter;Зоопарк Алгебрaических Типов Данных;https://habr.com/ru/post/207126/;"В этой статье мы попытаемся рассмотреть всё разнообразие Алгебраических Типов Данных.  Надо сказать, задача это достаточно неподъёмная, и понять человеку, если он ранее с Алгебраическими Типами не имел дело — не очень просто.  АТД были впервые использованы в языке Hope, но основную популярность они приобрели благодаря языкам ML, такими как Standart ML, OCaml, F#, и языку Haskell. Ныне АТД в той или иной мере поддерживаются в значительно большем количестве языков: Scala, Rust, Nemerle, Racket,… АТД — это универсальный тип данных. С помощью него можно представить большинство типов данных. АТД называются алгебраическими, потому что их можно представить как некую алгебраическую композицию типов его составляющих. Это знание даёт своё преимущество: понимая свойства алгебраической композиции, можно посчитать какой тип необходим для построения тех или иных данных. Будем рассматривать типы на основе языка Haskell, однако подобного с лёгкими изменениями можно добиться в других языках с поддержкой АТД. "
Klotos;C# для системного программирования;https://habr.com/ru/post/208608/;"От переводчика. Недавно на Хабре была опубликована статья «Будущее C#», описывающая новые фичи, которые, скорее всего, попадут в C# 6.0. Мне, как программисту .NET, эта статья очень понравилась, и я решил поискать дополнительную информацию о том, куда идёт C#/.NET. И вот, как будто прислушиваясь к моим новогодним пожеланиям, 27 декабря Джо Даффи (Joe Duffy) опубликовал в своём блоге статью «C# for Systems Programming», рассказывающую об исследовательском проекте под его руководством, направленном на создание нового языка и платформы на основе C#/.NET. Приятно впечатлённый статьей, я решил опубликовать её несколько вольный перевод на Хабре.  Вот уже на протяжении 4-х лет моя команда занимается проектированием и реализацией набора расширений для C#, предназначенных для системного программирования. В конце концов, я решил описать мой опыт по данной работе в серии постов, и данный пост является первым в этой серии.  "
Developers_Relations;Приглашаем принять участие в Сибирском хакатоне 1-2 марта;https://habr.com/ru/company/google/blog/214053/;На предстоящих выходных в Омске пройдет двухдневный марафон программирования. Сибирский хакатон, на котором специалисты из разных областей погрузятся в создание совместных IT-проектов, организован ведущими участниками сообщества GDG Omsk, разработчиками Алексеем Коровянским и Сериком Бейсеновым. Команда GDG Omsk является частью всемирного некоммерческого сообщества разработчиков Google Developer Group, в центре внимания которого лежат технологии Google и ряд открытых технологий: Google Android, Google Chrome, Google App Engine, Google Apps, Google Drive, Google Plus, Google Maps, Google APIs, HTML5, Google TV.    
z6Dabrata;TJ Holowaychuk: Прощай Node.js;https://habr.com/ru/post/228751/;"Примечание от переводчика:  Я решил перевести эту статью в основном из-за личности автора. TJ вложил очень много усилий в развитие Node.js и его инфраструктуры, он автор таких проектов как express, jade, mocha, stylus, автор 550 репозиториев на npm. Существуют также теория, что под этим именем скрывается группа людей.  Как бы то ни было, JavaScript и Go сообщества в ближайшие время ожидают изменения.  Покидая страну Node.js Я сражался с Node.js достаточно долго, что бы перестать получать от этого удовольствие, это мое официальное прощание! И, что еще важнее, я ищу людей, которые смогут поддерживать мои проекты!  Node отлично справляется с некоторыми вещами, но, к сожалению, это не самый подходящий инструмент для того, что мне сейчас интересно. Я все еще планирую использовать его для сайтов, но если вы хотели бы заняться поддержкой одного из моих проектов, дайте мне знать. Просто оставьте комментарий с вашим именем на Github, ссылкой на npm и названием проекта. Как обычно я прошу не делать больших изменений в существующих API: создать новый проект будет проще.  Я также продолжу поддерживать Koa.  "
alrusdi;Каким оружием могли бы быть разные языки программирования;https://habr.com/ru/post/235281/;"Предлагаю вниманию хабражителей перевод забавной статьи Бьорна Типлинга о том, какими видами оружия ему кажутся разные языки программирования. Понятное дело, все его уже читали в оригинале, но теперь можно поделиться ссылкой и с коллегами не очень владеющими английским. Да и просто на русском приятно прочесть.    C — это берданка (orig. M1 Garand). Старая, но надежная. "
PerseptronYar;Вы тоже можете стать жертвой паралича разработчика;https://habr.com/ru/post/240977/;"Дорогие разработчики, вы чувствуете себя неуютно, потому что вы быстро пишете только на восьми языках для трех семейств устройств? Вздрагиваете ли вы, едва заслышав о переходе на очередной фреймворк? Откладывали ли вы любимый проект из-за того, что не могли определить, какая облачная платформа подойдет лучше всего? Возможно, у вас тоже паралич разработчика. Бойтесь! Это не лечится.  Богатство доступных программистам опций сегодня просто чудовищно. Мы задохнулись под тем, что извергает рог изобилия. Последние несколько лет я зарабатывал на том, что писал на Java, Objective-C, C, C++, Python, Ruby, JavaScript, PHP (прошу прощения) с разными вариантами SQL/баз данных (MySQL, PostgreSQL, MongoDB, BigTable, Redis, Memcached и другими). Нравится ли это мне? Черт побери, нет. По большей части я просто чувствую вину за то, что не делал ничего на Erlang, Clojure, Rust, Go, C#, Scala, Haskell, Julia, Scheme, Swift или OCaml.   Я — жертва паралича разработчика: чувства ущербности из-за того, что индустрия софта развивается быстрее, чем может успеть один человек. "
ilusha_sergeevich;Несколько интересностей и полезностей для веб-разработчика #32;https://habr.com/ru/post/241539/;"Доброго времени суток, уважаемые хабравчане. За последнее время я увидел несколько интересных и полезных инструментов/библиотек/событий, которыми хочу поделиться с Хабром.  ICEcoder  Это не просто песочница, а полноценный open source редактор в вашем браузере. Вообще существуют десктопные версии, но по-моему, наибольшие внимание разработчики уделают веб-версии. ICEcoder поддерживает HTML, CSS, LESS, SASS, JS, Coffee, PHP, RonR, Python, C/C++/C#, Java, Lua, Rust, SQL, Markdown, всего более 60 языков! Фичи: возможность совместной работы с кодом, Emmet, LiveReload, работа с БД, колопикер, diff tool, линтеры и еще целое множество удачных интерфейсных решений. Повторюсь — это все в вашем браузере!   "
uvelichitel;Заявлен релиз Go 1.4;https://habr.com/ru/post/245603/;Blog Post Release Notes Дистрибутив Значимые нововведения для разработчиков на языке:
VISTALL;Consulo Beta продолжится в 2015 году;https://habr.com/ru/post/246043/;"Для тех кто пропустил мои посты: Consulo — это форк IntelliJ IDEA Community Edition, который имеет поддержку .NET(C# на текущий момент, и на этот сектор пока идет большой акцент), Java, Javascript(NodeJS).   Здравствуй Хабр. В моих предыдущих постах (тык, тык), я показал хорошие возможности плагина C#, да и сама платформа вполне стабильно работает. Можно было выйти в реализ, но — это не только написать код. Нужен как минимум сайт, что бы не отдавать Night Builds пользователям, но увы — имею ограниченные возможности.  "
gasyoun;Закат эры иконок от FatCow (выборка по цветам, топ 30 и прочая арифметика);https://habr.com/ru/post/249251/;"Итоговый выпуск иконок   Пять лет тому назад мы начали рисовать набор пиксельных иконок. Мода была на Vista. К концу 2013 года набор FatCow дорос до 3926 иконок. Это на 356 иконок больше, чем у Fugue, который весной того же года остановился на цифре 3570 (размер: 16х16). 352 иконки из бонуса Fugue (32х32 и 24х24) не в счет (как повторы). Но дальнейшее развитие иконок FatCow заморожено. Увы, мы не увидим круглой цифры из 4000 иконок (работы осталось на месяц), не увидим выпуска для ретины дополнительных размеров уже существующих иконок, разработки прекращены из-за отсутствия бюджета. Успели сделать пробу для retina и только.  Да, это не мега-фото-реалистичные-3D еще-одни-никому-не-нужные-иконки, это старая пиксельная школа. Где в почете был маленький размер и ограничение цветовой гаммы. Пройдут еще 10 лет… и, мы искренне верим, пиксельные иконки так и останутся в ходу. И если Вы ценитель древних видов искусства, дней зарождения компьютерной графики, пожалуйста за ширмой! "
KoVexPulThul;Фундаментальная проблема пакетных менеджеров для языков программирования;https://habr.com/ru/post/250065/;Почему существует столько много различных пакетных менеджеров? Их можно встретить как во многих операционных системах (apt, yum, pacman, Homebrew), так и работая со многими языками программирования (Bundler, Cabal, Composer, CPAN, CRAN, CTAN, EasyInstall, Go Get, Maven, npm, NuGet, OPAM, PEAR, pip, RubyGems, и т.д. и т.п.). «Каждый язык программирования нуждается в собственном пакетном менеджере, это уже стало общепризнанной истиной». Что за необъяснимое притяжение заставляет языки программирования, один за другим, скатываться в этот обрыв? Почему бы нам просто не использовать уже существующие пакетные менеджеры?  
leventov;Все уже украдено до нас;https://habr.com/ru/post/250879/;"  Думаю, у многих хоть раз была мысль — я родился слишком поздно, все уже открыто, придумано и т. д.  Хорошо Декарту, или, тем более, всяким древнегреческим математикам, доказывать простенькие теоремки и вписывать свое имя в историю. Сейчас далеко не каждый (да что там, единицы на тысячи человек) физически способны добраться до переднего края науки, не выбросившись из окна главного корпуса МГУ по пути.  Хорошо ушлым ребятам в начале девяностых, поднимали миллионные бизнесы буквально с полоборота. Хорошо тем, кто вовремя прочухал перспективность интернета и открыл сайты в очевидных пустующих нишах. Брину и Пейджу, ведь когда они запускали Гугл, еще не было Гугла.  Джобс собирал компьютеры в гараже и продавал. Сейчас запуск нового техпроцесса обходится Интелу в миллиарды долларов.  Короче, слишком сложно нынче пробиться. Очень высокая конкуренция, куда ни плюнь.  У меня есть для вас обнадеживающая новость. В мире разработки ПО это абсолютно не так. Нерешенные задачи россыпями валяются на дороге, некому взять и сделать. "
Zalina;Как оценивать работу программиста? Мнение сотрудников Яндекса;https://habr.com/ru/company/yandex/blog/254635/;"Давно идут споры о том, что такое работа программиста — ремесло, навык или искусство. При этом постоянно встаёт вопрос оценки результата. О том, как разные разработчики и руководители в Яндексе подходят к вопросу оценки работы программиста, мы поговорим в этом посте.    В Яндексе работают сотни программистов, и результаты их работы влияют на сервисы, которыми пользуются миллионы людей. Когда на тебе такая ответственность, нужно уметь остановиться и оценить, что можно сделать лучше, в чем ты сильнее всего и где эти твои навыки пригодятся еще. Для этого надо уметь оценить и свою работу, и работу людей, с которыми ты вместе что-то создаешь. О том, как это делать, мы и спросили наших коллег. "
pronskiy;PHP-Дайджест № 60 – интересные новости, материалы и инструменты (30 марта – 13 апреля 2015);https://habr.com/ru/company/zfort/blog/255665/;"  Предлагаем вашему вниманию очередную подборку со ссылками на новости и материалы.  Приятного чтения! "
MrFrizzy;Контейнер в linux, linux в egg, egg в python;https://habr.com/ru/company/wargaming/blog/256647/;"  Hello, {{username}}  Я DevOps и очень люблю Linux. Понятное дело, что с такой связкой я просто не мог не полюбить LinuX Containers (тем более, что BSD и Solaris давно радуют аналогичными возможностями своих пользователей).  Естественно, бизнес тоже увидел привлекательную возможность и программы для управления контейнерами стали расти и множиться: docker , rocket, vagga, lxc, systemd-nspawn, etc…  Docker стал стандартом де-факто в первую очередь благодаря системе создания и доставки контента. Но главный демон докера запускается от root, и, на мой взгляд, это минус этого проекта (Пруф).  Rocket и vagga пошли другим путем, и путь этот носит название unprivileged containers. Вам больше не нужны root привилегии, чтобы запустить процесс в новых namespaces, и это открывает интересные перспективы для построения тестовых площадок и безопасного окружения.  Но во всех этих проектах есть один фатальный недостаток: они все написаны с использованием c, go и rust, а я люблю python и не могу поучаствовать в их разработке. Согласитесь, довольно обидно пропускать все веселье.  Так что под катом вас ждет библиотека для запуска процессов в новых linux user namespaces: "
Artyom18;Не совсем крутой Ruby;https://habr.com/ru/post/257513/;"  Помню, как два года назад столкнулся с Руби. Язык показался прекрасным, все в нем понятно и просто, нет ничего лишнего, нет ничего не очевидного. Шло время, навыки росли, времена менялись и вот уже Руби не кажется мне таким привлекательным как раньше: медленно работает, да и большие проекты поддерживать тяжело. Почему? Да потому что большие проекты и Руби — это вообще вещи несовместимые. Ты видишь скорость выполнения на других языках и хочется плакать — из-за того, что когда-то был сделан выбор именно в сторону этого языка программирования.   Ниже вы найдете 5 наиболее угнетающих меня вещей в Руби. Все они расписаны достаточно поверхностно. "
frol;Что такого особенного в Nim?;https://habr.com/ru/post/258119/;"  Язык программирования Nim (ранее именовался Nimrod) — захватывающий! В то время как официальная документация с примерами плавно знакомит с языком, я хочу быстро показать вам что можно сделать с Nim, что было бы труднее или невозможно сделать на других языках.  Я открыл для себя Nim, когда искал правильный инструмент для написания игры, HoorRace, преемник моей текущей DDNet игры/мода Teeworlds.  (прим. пер. На синтаксис Nim имели влияние Modula 3, Delphi, Ada, C++, Python, Lisp, Oberon.)  Запускаем! Да, эта часть всё ещё не захватывает, но просто следите за продолжением поста:  for i in 0..10:   echo ""Hello World""[0..i]  "
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №163 (1 — 7 июня 2015);https://habr.com/ru/company/zfort/blog/259767/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
platoff;Как я нашел лучший в мире язык программирования. Часть 1;https://habr.com/ru/post/259831/;"Поскольку дальше я буду жестко провоцировать троллей на тему языков программирования, и тем более назову лучший в мире (на данный момент) язык программирования (абсолютно лучший, то есть без всяких оговорок), от чего, обычно, у троллей срывает башню, рекомендую им и всем остальным ознакомиться с моим постом почти трех летней давности «О выборе языка программирования», все написаное там актуально и повторяться я не хочу.  Прочитали? Дальше будет про лучший в мире язык программирования, который я назову ближе к концу. Да, да, еще три дня назад я и не думал что единороги существуют — ведь каждый язык так или иначе сосет, и каждый сосет по-своему (хотя нет, есть и такие которые сосут всегда и везде, но о них не будем). Как инженер, я прекрасно понимал что в вопросе языка не возможно без разнообразных trade offs, начиная с garbage collected vs manual memory management, хотя Rust пытается съесть рыбку не присев на палку в этом вопросе, и так далее. Хоть мы и говорим о языках общего назначения, все они так или иначе позиционируют себя, фокусируясь на каких-то идеях, принципах, и целях, в которых они хороши, оставляя все не согласованное с такими принципами в лучшем случае возможными, но не эффективными и/или не удобными. Одним словом нецелесообразными. Однако язык, сочетающий в себе несочетаемое, есть.  "
2tl;Google, Microsoft, Mozilla и другие объединились для запуска WebAssembly, нового бинарного формата для Web;https://habr.com/ru/post/260667/;Google, Microsoft, Mozilla и инженеры проекта WebKit 17 июня сделали анонс, что они объединились для запуска WebAssembly, нового бинарного формата для компилирования веб-приложений.
deviator;D для новичков, часть 2;https://habr.com/ru/post/261079/;"Доброго времени суток, хабр!  Продолжим тематику предыдущей статьи. Здесь будет объяснение таких концепций, как @​safe, @​trusted, pure, nothrow, некоторые моменты, касающиеся ООП. "
Ostrovski;Знакомство с Nim: пишем консольную 2048;https://habr.com/ru/post/261801/;" Хочется чего-то нового, быстрого, компилируемого, но при этом приятного на ощупь? Добро пожаловать под кат, где мы опробуем язык программирования Nim на реализации очередного клона игры 2048. Никаких браузеров, только хардкор, только командная строка!  В программе:  Who is the Nim? Как выглядит ООП в Nim Немного C под капотом Создание экземпляров Собственно игра 2048 (github) Субъективные выводы "
Mithgol;Двенадцать простых начальных шагов разработки модуля для Node.js;https://habr.com/ru/post/262057/;"«Начало — более чем половина всего».  Это очень древний GTD-принцип: возраст его, вероятно, исчисляется тысячелетиями. (Например, Викицитатник в настоящее время приписывает его Аристотелю, хотя и без подтверждающего указания на первоисточник.) Суть его в том, что с чистого листа начинать какой-либо проект бывает очень трудно (и даже приходится заставлять себя); а вот если есть несколько простых начальных шагов, выполнение которых приводит к появлению частично готового проекта, то продолжить работу над ним «по инерции» становится куда проще — так просто, как если бы проект этот ужé был не только начат, но и готов даже более, чем наполовину. А кроме того, когда заранее хорошо знаешь, какими должны быть начальные шаги, то тогда трудно бывает допустить ошибку, совершая их.  Мне довелось сочинить более десятка модулей для Node.js с открытым исходным кодом и опубликовать их в качестве пакетов npm. Чем больше модулей я делал, тем сильнее понимал (в том числе путём проб и ошибок), что начальные шаги для их создания могут быть одинаковыми и даже могут совершаться в одном и том же порядке. Сегодня я публикую этот порядок в надежде на то, что он станет подспорьем в работе программистов, сочиняющих свой код на языке JavaScript для движка Node.  Обратите внимание на то, что каждый из этих шагов довольно прост и логичен. "
LeshiyUrban;Брокер сообщений для сервисной архитектуры на базе ZMQ — или отдых разработчика;https://habr.com/ru/post/262977/;"  Сильный ветер дул в борт судна. Мелкие брызги и капли дождя заставляли щурится слегка небритое лицо под очками. Было не просто холодно: холод проникал всюду. Под куртку, штаны. От него немели руки и застывала кровь. Но моряк знал, что где-то там за мысом есть тихий остров, на котором можно переждать непогоду. Берег встретил измученный экипаж шумом деревьев и шепотом камышей. Люди знали, что у них есть лишь сутки, чтобы отдохнуть, помыться и продолжить борьбу со стихией.  "
voidnugget;Маленькие, и не очень, размышления о SOA, или жизнь в MVC-beyond мире (часть 0);https://habr.com/ru/post/263589/;"Привет всем, меня зовут Юра. Сегодня я хотел бы поделиться с вами своим опытом и идеями в сфере проектирования и разработки ПО, развеять некоторые предрассудки и пролить свет на текущее состояние SOA решений в нашем, не совсем ""реактивном"", мире. О том, как писать меньше кода, получать меньше недовольных клиентов, седины, и больше профита. Реализовывать полностью реюзабельные решения без побочных эффектов, и почему до сих пор этого никто не сделал ⊙.☉     "
elena_voronina;RailsClub 2015: Интервью c Андреем Дерябиным;https://habr.com/ru/company/railsclub/blog/265825/;"Привет!  Новое интервью! Сегодня на вопросы конференции RailsClub (которая состоится 26 сентября) ответил Андрей Дерябин, тимлид Злых Марсиан, автор Rove.io и со-ведущий Ruby NoName Podcast.    "
elena_voronina;RailsClub 2015: Интервью c Киром Шатровым;https://habr.com/ru/company/railsclub/blog/266329/;"Привет!  Новая неделя и новое интервью со спикером конференции RailsClub 2015, которая пройдет 26 сентября в Москве. Сегодня на вопросы отвечает Кир Шатров — ведущий разработчик в Злых Марсианах, контрибьютор Rails и ведущий RubyNoname Podcast.   "
elena_voronina;RailsClub 2015: Интервью c Андреем Куманяевым;https://habr.com/ru/company/railsclub/blog/266397/;"Привет! На конференцию RailsClub, которая состоится 26 сентября уже сегодня зарегистрировалось 350 человек. Мы перерастаем собственные прогнозы, это круто! Новое интервью со спикером — Андреем Куманяевым, разработчиком COUB.   "
askbow;Как устроены дыры в безопасности: переполнение буфера;https://habr.com/ru/post/266591/;"Прим. переводчика: Это перевод статьи Питера Брайта (Peter Bright) «How security flaws work: The buffer overflow» о том, как работает переполнение буфера и как развивались уязвимости и методы защиты.  Беря своё начало с Червя Морриса (Morris Worm) 1988 года, эта проблема поразила всех, и Linux, и Windows.    Переполнение буфера (buffer overflow) давно известно в области компьютерной безопасности. Даже первый само-распространяющийся Интернет-червь — Червь Морриса 1988 года — использовал переполнение буфера в Unix-демоне finger для распространения между машинами. Двадцать семь лет спустя, переполнение буфера остаётся источником проблем. Разработчики Windows изменили свой подход к безопасности после двух основанных на переполнении буфера эксплойтов в начале двухтысячных. А обнаруженное в мае сего года переполнение буфера в Linux драйвере (потенциально) подставляет под удар миллионы домашних и SMB маршрутизаторов.  По своей сути, переполнение буфера является невероятно простым багом, происходящим из распространённой практики. Компьютерные программы часто работают с блоками данных, читаемых с диска, из сети, или даже с клавиатуры. Для размещения этих данных, программы выделяют блоки памяти конечного размера — буферы. Переполнение буфера происходит, когда происходит запись или чтение объёма данных большего, чем вмещает буфер.  На поверхности, это выглядит как весьма глупая ошибка. В конце концов, программа знает размер буфера, а значит, должно быть несложно удостоверится, что программа никогда не попытается положить в буфер больше, чем известный размер. И вы были бы правы, рассуждая таким образом. Однако переполнения буфера продолжают происходить, а результаты часто представляют собой катастрофу для безопасности. "
artifex;Snaql. Raw SQL в Python-проектах;https://habr.com/ru/post/266735/;"В последний год у меня появилось новое правило — каждые 3 месяца изучать новый язык программирования и его экосистему. На это есть несколько причин: новые парадигмы, концепции, инструменты, да и просто интересно что там, по ту сторону набившего с годами оскомину Python. Это простое правило позволило изучить за текущий год современные хипстерские Go, Clojure и Rust, проникнуться их идеями и best practices, что, кстати, очень положительно влияет на стиль и качество кода, когда я пишу на своём основном языке.  Рассматривая стек Luminus, я наткнулся на простую и в то же время шикарную, на мой вкус, библиотеку Yesql для организации SQL-запросов в проекте на Clojure и я не увидел чего-то похожего для Python (может плохо искал). Идея этой библиотеки простая — не морочьте себе голову, используйте обычные SQL-запросы, у вас есть возможность именования этих запросов и мапинга на соответствующие динамические функции. Всё это выглядит как набор микро-шаблонов с SQL и их рендер по какому-то контексту. Просто, эффективно, хочу такое у себя в проекте на Python.  "
elena_voronina;RailsClub 2015: Интервью c Борисом Горячевым;https://habr.com/ru/company/railsclub/blog/266941/;"Привет!  Сегодня новое интервью со спикером конференции RailsClub. На наши вопросы ответил Борис Горячев, бэкенд разработчик в Meduza.io. Сейчас он пишет различные проекты на rails, cuba, phoenix (elixir).   "
elena_voronina;RailsClub 2015: Интервью c Александром Кирилловым;https://habr.com/ru/company/railsclub/blog/267151/;"Привет!  Осталась неделя до конференции RailsClub. Мы уже планируем, как будем встречать и развлекать приглашенных спикеров, печатаем для всех участников классные наклейки, вместе с докладчиками репетируем их выступления. Самое время зарегистрироваться, если вы вдруг еще не успели. Сделать это можно тут. Сегодня новое интервью, на вопросы ответил наш коллега Александр Кириллов, Ruby-разработчик из Evrone, со-организатор конференции Юкон в Саратове.   "
elena_voronina;RailsClub 2015: Интервью c Николаем Рыжиковым;https://habr.com/ru/company/railsclub/blog/267245/;"Привет!  Сегодня представляем спикера RailsClub 2015 Николая Рыжикова. Николай технический лидер команды Health Samurai, активист питерского Ruby & Clojure сообществ и мета-сообщества Piter-united.  А до самой конференции меньше недели, успевайте присоединиться!   "
iGusev;Новый PHP, часть 1: Return types;https://habr.com/ru/post/267257/;"Каждый мажорный релиз PHP добавляет ряд новых возможностей, некоторые из которых действительно имеют значение. Для PHP 5.3 — это были пространства имен и анонимные функции. Для PHP 5.4 — трейты. Для PHP 5.5 — генераторы. Для 5.6 — списки аргументов переменной длины.  PHP 7 имеет большое количество новшеств и улучшений, делающих жизнь разработчика легче. Но я считаю, что самым важным и долгосрочным изменением является работа с типами. Совокупность новых фич изменит взгляд на PHP разработку в лучшую сторону.  Почему поддержка строгой типизации так важна? Она предоставляет программе — компилятору или рантайму и другим разработчикам ценную информацию о том, что вы пытались сделать, без необходимости исполнять код. Это дает три типа преимуществ:"
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №180 (5 — 11 октября 2015);https://habr.com/ru/company/zfort/blog/268625/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости.   
dzeban;LinuxCon + CloudOpen + Embedded LinuxCon Europe 2015: как это было;https://habr.com/ru/company/metrotek/blog/268655/;Раз в год в Европе проходит событие, которое мечтают посетить все, кто хоть что-то знает про Linux. Событие, которое собирает вокруг себя самое большое сообщество, когда-либо существовавшее на этой планете. Сообщество энтузиастов, хакеров, инженеров, программистов, админов, корпоративных боссов, всех тех, кто имеет работу и хобби благодаря Linux и open source. Мы в НТЦ Метротек привыкли делиться знаниями и получать их, поэтому такое пропустить не могли. Дамы и господа, добро пожаловать в Дублин на тройную конференцию LinuxCon + CloudOpen + Embedded LinuxCon Europe 2015!   
cebka;Статический анализ printf-like функций в Си при помощи libclang;https://habr.com/ru/post/270743/;"По сравнению со многими современными языками язык Си зачастую кажется крайне примитивным и небезопасным. И одной из частых претензий к языку является невозможность доступа из кода в его же внутреннее представление. В других языках это традиционно осуществляется механизмами, вроде reflections, и довольно удобно в применении.  Тем не менее, с появлением libclang, можно писать собственные анализаторы и генераторы кода прямо в compile time, устраняя достаточно большое множество проблем на ранних этапах работы. Сочетание инструментов статического анализа общего плана (coverity, clang-scan), инструментов анализа для конкретного проекта, а также дисциплины написания кода позволяет намного улучшить качество и безопасность кода, написанного на Си. Конечно, это не даст гарантий, каких дает haskell или даже rust, но позволяет существенно оптимизировать процесс разработки, особенно в случае, когда переписывать огромный проект на другом языке является нереальной задачей.  В данной статье я хотел бы поделиться опытом создания плагина статического анализа format argument для функций, похожих на printf. В ходе написания плагина, мне пришлось очень много рыться в исходниках и doxygen документации libclang, поэтому я счел полезным сделать некоторый обзор для тех, кто хочет ступить на этот тернистый путь, но пока еще не уверен в целесообразности траты времени на сбор информации. В статье не будет картинок, и даже картинок блюющих единорогов, простите. "
Zugan;30 лет работы сисадмином;https://habr.com/ru/company/ua-hosting/blog/272293/;"Sandra Henry-Stocker (Unix Dweeb, в данный момент работает в компании TeleCommunication Systems, разрабатывающей инновационные технические решения).  Оглядываясь в прошлое, спустя более 30 лет работы системным администратором Unix, я могу сказать, что это был долгий и интересный путь. В эти годы я конечно не выполняла одно и тоже. Развитие технологий приводили к невероятным изменениям в моей работе. Это были впечатляющие улучшения в “железе”, которое я обслуживала, и изобретение новых программных инструментов, которые я изучала и применяла на практике. На протяжении многих лет я получала невероятное наслаждение от того, насколько много работы я могла сделать в командной строке для выявления и устранения различных проблем и понимания того, как наилучшим образом обеспечить защиту данных моих работодателей. В течении 30 лет я работала с удивительными людьми, при этом была уволена однажды, а также узнала много нового о том, что работает и не работает, как с технической точки зрения, так и с точки зрения карьерного роста.Профессия и все с ней связанное меняется драматичным образом, но она всегда приносила и будет приносить мне море удовольствия.Вот мои размышления об изменениях, которые я увидела и тех, которые еще увижу."
alexzfort;Дайджест интересных материалов из мира веб-разработки и IT за последнюю неделю №189 (6 — 13 декабря 2015);https://habr.com/ru/company/zfort/blog/273021/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы, интересные материалы и IT-новости   
poxvuibr;Хватит говорить о том, что каждой задаче — свой инструмент, мы и так в курсе;https://habr.com/ru/post/273379/;"В любом топике, посвящённом сравнению двух технологий, будь то операционные системы, языки программирования, или банальные таск трекеры, обязательно найдётся комментатор, который скажет — «нельзя сравнивать несравнимое, каждой задаче свой инструмент».  Ничто в таких топиках не выводит меня из себя больше, чем эта фраза. Она не помогает ничего понять, ничего не проясняет, а самое главное, в контексте топика, как правило абсолютно бессмысленна!    "
DataArt;Мнения: Swift стал Open Source;https://habr.com/ru/company/dataart/blog/273705/;"  В этом месяце произошла настоящая революция для разработчиков на платформах Apple. 3 декабря в свет вышла новая версия объектно-ориентированного языка от Apple — Swift. Что особенно удивительно, Swift выпустили с открытой лицензией Apache 2.0 license with a Runtime Library Exception. Вы все правильно поняли, это мощный язык программирования от Apple, да еще и с открытым исходным кодом. Что это значит для разработчиков, Мы спросили Игоря Литвиненко, Senior Mobile Developer в DataArt. "
dvadov;12 лучших зарубежных девелоперских конференций в 2016 году;https://habr.com/ru/company/arcadia/blog/274177/;"Новый год на носу и пора запланировать участие в интересных конференциях. Коллеги из Mail.ru уже несколько лет подряд делятся обзором российских событий (вот список на 2015 год, ждем аналогичного обзора на 2016), а я решил пройтись по зарубежным.    Почему импортные конференции? Российские тоже очень интересны, но иногда хочется совместить приятное с полезным: не только послушать умных людей и наладить новые связи на профильных для нас рынках США и Западной Европы, но и посмотреть какой-нибудь приятный город. "
humbug;Так ли безопасен Tox, как его малюют?;https://habr.com/ru/post/276665/;" Всем привет!  Мне нравится Tox, я уважаю участников этого проекта и их труд, который иногда даже удается использовать по назначению. В стремлении помочь сообществу, я заглянул в код, заметил потенциальные проблемы, которые могут привести людей в погонах к вам домой к весьма печальным последствиям.  В последнее время наблюдается нездоровая тенденция переоценивать защищенность подобных систем только на основании того, что они P2P. Буду излагать объективные факты и дополнять их своими комментариями, чтобы не бросаться громкими фразами в пространство. Выводы предлагаю делать самостоятельно.  Заранее отвечу на вопрос: мой pull request был принят."
32bit_me;LLVM: компилятор своими руками. Введение;https://habr.com/ru/post/277717/;"Представим себе, что в один прекрасный день вам пришла в голову идея процессора собственной, ни на что не похожей архитектуры, и вам очень захотелось эту идею реализовать «в железе». К счастью, в этом нет ничего невозможного. Немного верилога, и вот ваша идея реализована. Вам уже снятся прекрасные сны про то, как Intel разорилась, Microsoft спешно переписывает Windows под вашу архитектуру, а Linux-сообщество уже написало под ваш микропроцессор свежую версию системы с весьма нескучными обоями. Однако, для всего этого не хватает одной мелочи: компилятора!  Да, я знаю, что многие не считают наличие компилятора чем-то важным, считая, что все должны программировать строго на ассемблере. Если вы тоже так считаете, я не буду с вами спорить, просто не читайте дальше. Если вы хотите, чтобы для вашей оригинальной архитектуры был доступен хотя бы язык С, прошу под кат. В статье будет рассматриваться применение инфраструктуры компиляторов LLVM для построения собственных решений на её основе. Область применения LLVM не ограничивается разработкой компиляторов для новых процессоров, инфраструктура компиляторов LLVM также может применяться для разработки компиляторов новых языков программирования, новых алгоритмов оптимизации и специфических инструментов статического анализа программного кода (поиск ошибок, сбор статистики и т.п.). Например, вы можете использовать какой-то стандартный процессор (например, ARM) в сочетании с специализированным сопроцессором (например, матричный FPU), в этом случае вам может понадобиться модифицировать существующий компилятор для ARM так, чтобы он мог генерировать код для вашего FPU. Также интересным применением LLVM может быть генерация исходных текстов на языке высокого уровня («перевод» с одного языка на другой). Например, можно написать генератор кода на Verilog по исходному коду на С.    КДПВ  "
antonbatenev;Распределенная природа мессенджера Tox;https://habr.com/ru/post/280208/;"Пока правообладатели собираются заблокировать централизованный Telegram, сообщество пользователей распределенного мессенджера Tox растет. Сегодня, согласно статистике сайта www.toxstats.com, Россия занимает второе место после США по количеству пользователей отставая всего на какие-то 30-50 узлов.  В данной публикации я бы хотел рассказать про распределенную природу данного мессенджера, общие принципы работы DHT-сети Tox, а так же как ""догнать и перегнать Америку"" по количеству нод.    "
pronskiy;PHP-Дайджест № 82 – интересные новости, материалы и инструменты (14 – 27 марта 2016);https://habr.com/ru/company/zfort/blog/280278/;"  Предлагаем вашему вниманию очередную подборку со ссылками на новости и материалы.  Приятного чтения! "
RoboForm;Дайджест интересных материалов для мобильного разработчика #147 (28 марта-3 апреля);https://habr.com/ru/post/280770/;Неожиданно главным событием недели стала конференция Build от Microsoft – на ней объявили о бесплатности Xamarin, доступности Xbox для разработки, новых API для распознавания, ботов и многого другого.   
ARG89;Студенческий JPoint — счастливый билет в будущее;https://habr.com/ru/company/jugru/blog/281092/;Кто ещё не знает, 24 апреля 2016 года в Москве пройдёт JPoint Student Day — конференция для студентов, изучающих Java-технологии и JVM-языки. На ней выступят гуру Java-мира с докладами, которые совсем не похожи на то, что читают на лекциях и рассказывают на практике. Это будет полное погружение в мир настоящей, боевой разработки — для кого-то первое, а для кого-то более тесное знакомство с профессией. Причём это не будет игра в одни ворота — можно будет задавать вопросы докладчикам, общаться с ними в перерывах и любое свободное время, рассказывать о своих проектах и заводить полезные знакомства. Которые, поверьте, вам пригодятся совсем скоро. Но обо всём по порядку.   
varanio;Перспективы языка го для программиста;https://habr.com/ru/post/281320/;"  Статья написана по мотивам одного не очень приятного разговора на последнем IT global митапе в Питере. "
Scratch;Победитель Password Hashing Competition Argon2 или еще раз о медленном хэшировании;https://habr.com/ru/post/281569/;"Привет, %username%!  Ранее мы уже затрагивали тему замедления хэширования. Это было еще до введения моды на быстрые хэшедробилки aka майнеры. Как оказалось, тема намного серьезней, чем «прокрутить хэш 100500 раз и подмешивать к нему всякий мусор», потому что GPU и спец девайсы драматически ускоряют перебор, с которым сложно бороться даже с помощью таких вещей как bcrypt. И вот, люди запилили соревнование, результатом которого должен был стать алгоритм, который сложно ускорить на спец чипах и GPU, при этом он должен быть настраиваемым в зависимости от пожеланий разработчика. Таким алгоритмом стал Argon2.  "
kronoskib;v3.14.1592-beta2: все, что вы хотели знать о семантическом версионировании;https://habr.com/ru/company/Voximplant/blog/281593/;Усилия и деньги, вкладываемые в продвижение языка Go, часто приносят пользу и другим разработчикам. В конце прошлого года на сайте gopheracademy была опубликована очень удачная статья о семантическом версионировании. Том самом, которое используется в npm, начинается с домика ^ и все ломает. Под катом спрятан перевод, который поможет вам быстро осмотреть сад граблей версионирования и как сейчас принято им пользоваться. И немного примеров на Go. Передаем слово автору! 
snizovtsev;Nix как менеджер зависимостей для C++;https://habr.com/ru/post/281611/; В последнее время много разговоров идет о том, что для C++ нужен свой пакетный менеджер подобный pip, npm, maven, cargo и т.д. Все конкуренты имеют простой и стандартизированный механизм подключения нестандартной библиотеки. В C++ же все действуют как умеют: кто-то прописывает в README список пакетов для Ubuntu, CentOS и других дистрибутивов, кто-то использует git submodule и скрипты для их сборки, кто-то использует CMake ExternalProject, кто-то копирует все исходники в один гигантский репозиторий, кто-то делает образ Docker или Vagrant. Чтобы решить проблему был даже создан стартап — biicode, но он обанкротился и его будущее неизвестно. Взамен появился conan, дополняя зоопарк конкурентов — nuget, cget, hunter, cpm, qpm, cppget, pacm и даже gradle for c++. Меня не устраивал ни один из перечисленных способов. Я было начал писать пакеты для Conan, но столкнулся с большим числом хаков, неразвитым API, отсутвием гайдлайнов и, как следствие, низкой вероятностью переиспользования чужих пакетов. И тут вспомнилось, что когда-то мне очень понравились идеи пакетного менеджера в NixOS. И подумал — а зачем плодить пакетный менеджер специально для C++, если те же задачи решает обычный пакетный менеджер? Нужно только чтобы он был достаточно гибким и простым в части описания пакета. И Nix идеально подошел на эту роль.
RoboForm;Дайджест интересных материалов для мобильного разработчика #149 (11-17 апреля);https://habr.com/ru/post/281771/;В этот раз получилось очень много самых интересных материалов — про причины провалов приложений, про взлом iPhone, про секреты Android Studio, про боты и HTML5-игры, про сложные и уродливые интерфейсы, конкурсы и новые API и многое-многое другое. Хороших вам приложений!  
Account_is_busy;Весенний Go в Badoo;https://habr.com/ru/company/badoo/blog/282606/;" Спешим сообщить вам прекрасную новость – 14 мая в московском офисе компании Badoo пройдет весенний Go-митап.  Начинаем в 12:00. Приходите послушать интересные доклады и просто пообщаться!   Выступления будут сниматься на видео.  Программа  Марко Кевац, Badoo  «Оптимизация программ на Go»  Из доклада вы узнаете:  — про большинство утилит из арсенала Go, предназначенных для оптимизации производительности;  — как и когда их (утилиты) использовать, а также мы посмотрим как они устроены внутри;  — про применимость linux утилиты perf для оптимизации программ на Go.  Кроме того, устроим небольшой crash course, в рамках которого поэтапно соптимизируем несколько небольших программ на Go с использованием вышеперечисленных утилит. "
tower120;C++ pattern matching;https://habr.com/ru/post/282630/;"Нет нужды описывать чем хорош pattern matching. Так как в любом случае такой конструкции в С++ нет. Без него же работа с шаблонами, часто обрастает лесами понятного и полезного кода. Итак предлагаю способ некоего подобия pattern matching`а для С++14 (скорее даже type matching'a), который укладывается в 50 строк кода, не использует макросы и вообще кросс-компиляторный. Сначала пример использования: http://coliru.stacked-crooked.com/a/6066e8c3d87e31eb template<class T> decltype(auto) test(T& value) {     return match(value         ,[](std::string value)    { cout << ""This is string""; return value + "" Hi!""; }         ,[](int i)                { cout << ""This is int"";    return i * 100; }         ,[](auto a)               { cout << ""This is default"";return nullptr; }     ); } compile-time Условия: http://coliru.stacked-crooked.com/a/ccb13547b04ce6ad match(true_type{}          ,[](bool_constant< T::value == 10 >)                        { cout << ""1"" ; }          ,[](bool_constant< (T::value == 20 && sizeof...(Args)>4) >) { cout << ""2"" ; }     ); Возвращаем тип: http://coliru.stacked-crooked.com/a/0a8788d026008b4b auto t = match(true_type{}            ,[](is_same_t<T, int>) -> type_holder<short>  { return{}; }            ,[](auto)              -> type_holder<T>      { return{}; }          );  using I = typename decltype(t)::type;              I i = 1000000;"
ragequit;Каково это — быть разработчиком, когда тебе сорок;https://habr.com/ru/post/282674/;"Примечание от переводчика:   Этот пост был написан и опубликован на Medium разработчиком приложений Адрианом Космачевским из Швейцарии. Кроме подготовки перевода его публикации, я также пригласил и самого автора, Адриана (  akosma ), на Хабр, для того, чтобы он смог лично ответить на любые вопросы участников сообщества, если таковые возникнут. Думаю, для общего удобства при общении в комментариях с ним стоит использовать английский (и, при желании, дублировать на русском).  Привет всем, я — сорокадвухлетний программист-самоучка, а это моя история.   Пару недель назад я наткнулся на твит, в котором была картинка, прикрепленная ниже, и он заставил меня задуматься о моей карьере.     Эти размышления привели меня туда, откуда все начиналось.  Я дебютировал в роли разработчика программного обеспечения в 10 часов утра 6 октября 1997 года, в городе Оливос, к северу от Буэнос-Айреса, в Аргентине. Был понедельник. Не так давно я праздновал свой 24-й день рождения.   Мир в 1997 году Тогда он был немного другим. На веб-сайтах не было предупреждений об использовании cookie. Новаторскими в сети были сайты вида Excite.com, а моим любимым поисковиком был AltaVista.   Мой электронный ящик имел вид kosmacze@sc2a.unige.ch и был расположен на личном веб-сайте, который размещался по адресу http://sc2a.unige.ch/~kosmacze. Тогда мы еще оплакивали принцессу Диану, а Стив Джобс только-только вернулся на роль CEO и убедил Microsoft «вбросить» в Apple Computer 150 миллионов долларов. Digital Equipment Corporation подала в суд на Dell, останки Че Гевары вернули на Кубу, только начался четвертый (!) сезон «Друзей». Был убит Джанни Версаче, скончались Мать Тереза, Рой Лихтенштейн и Жанна Кальман. Люди зависали за Final Fantasy 7 на PlayStation, будто бы были наркоманами, Би-Би-2 начал вещание телепузиков, а Кэмерон только собирался показать миру свой «Титаник». "
marshinov;.NET-разработка: девять вопросов взрослым;https://habr.com/ru/company/jugru/blog/283516/;".NET становится по-настоящему кроссплатформенным: после долгого ожидания наконец объявлена дата релиза ASP.NET Core, JetBrains готовит альтернативу Visual Studio на базе ReSharper и IDEA, Microsoft приобрела Xamarin, сделала Xamarin Community бесплатной, а Mono перевела на MIT-лицензию и наконец, Windows Server 2016 получит поддержку Windows-контейнеров в Docker.  С новыми возможностями нас встречают новые вызовы:  Как будет работать один и тот же код под .NET Core и Mono, на Windows и Linux, в docker-контейнере? Стоит ли переходить на .NET Core уже сейчас и как получить максимум от новой платформы?  Какие перспективы у Mono и Xamarin?  Какие изменения произошли «под капотом» .NET с переходом на Roslyn и .NET Core?  Всего через три недели на конференции DotNext в Питере 20 спикеров выступят с докладами о настоящем и будущем платформы .NET, об оптимизации производительности и многопоточности, о внутреннем устройстве платформы .NET и CLR, о профилировании и отладке .NET-кода.  А пока мы попросили четырех из них поделиться своим опытом и мнениями о грядущих изменениях в мире .NET. На наши вопросы ответили:   Ведущий мировой эксперт по производительности .NET-платформы, восьмикратный Microsoft MVP, автор прекрасной книги по производительности .NET «Pro .NET Performance» Саша Голдштейн; Главный разработчик протокола реактивного многопроцессного взаимодействия в Rider Дмитрий Иванов из JetBrains; Ещё один разработчик Rider’a из компании JetBrains, .NET MVP, к.ф.-м.н., серебряный призёр ACM ICPC, постдок в Вейцмановском институте науки Андрей Акиньшин; CTO Promarket и эксперт в области Mono и Linux Никита Цуканов. "
1cloud;Чем вам поможет прокрастинация;https://habr.com/ru/company/1cloud/blog/298042/;Иногда мы обращаем внимание на различные вопросы, связанные с управленческими решениями или общими подходами к менеджменту в сфере ИТ. Одна из наиболее острых проблем — эффективность работы сотрудников. Сегодня мы рассмотрим ее с необычной стороны.  
pronskiy;PHP-Дайджест № 85 – интересные новости, материалы и инструменты (24 апреля – 15 мая 2016);https://habr.com/ru/company/zfort/blog/300832/;"  Предлагаем вашему вниманию очередную подборку со ссылками на новости и материалы.  Приятного чтения! "
Scratch;Дайджест последних достижений в области криптографии. Выпуск нулевой;https://habr.com/ru/post/301180/;"  Привет! Хотелось бы в одной статье вкратце рассказать о достижениях математиков, которыми мы уже пользуемся или скоро будем. Начнем "
phillennium;Настоящее и будущее Swift: вопросы взрослым;https://habr.com/ru/company/jugru/blog/301600/;"Скоро два года с того момента, когда язык Swift был официально представлен, но его состояние остаётся неопределённым. С одной стороны, в топе «самых любимых языков» на Stack Overflow он на втором месте — видно, что попытка Apple «улучшить Objective-C» разработчикам понравилась. А с другой, в топе «самых используемых» его при этом нет — там по-прежнему Objective-C. Более того: сообщается, что сама компания Apple сейчас толком не использует в iOS свой собственный язык, пока что реализовав на нём только калькулятор.  Одна из причин в том, что язык ещё не достиг стабильности ABI: сейчас никто не гарантирует, что после выхода его новой версии ваш код не сломается. Однако в Apple называют важнейшим приоритетом исправление этой ситуации. А недавно на горизонте показалась версия 3.0, которая должна принести много нового. Означает ли всё это, что настаёт время браться за Swift всерьёз, или целесообразность его использования всё ещё под большим вопросом?    Мы решили расспросить о настоящем и будущем языка трёх специалистов из крупных компаний, уже использующих Swift и не понаслышке знакомых с темой. На наши вопросы ответили:   Максим Соколов (Avito); Игорь Кашкута (Badoo); Егор Толстой (Rambler&Co).   "
phpclub;DevConf::Go — 17 июня в Сколково, экслюзивный мастер-класс по Go 18 июня в ТАСС;https://habr.com/ru/company/devconf/blog/303066/;" Каждый год на DevConf появляются новые лидеры в разработках — в этом годы было много интересных заявок по Go, где разработчики готовы рассказать, как они применяют Go в продакшен. Вам интересено Go? Присоединяйтесь к сообществу Go на 4Gophers.ru  Первый доклад ""Prometheus мониторинг от души"" представляет Евгений Пак — разработчик с 10 летним опытом работы, Senior Developer Go компании Lazada. Он расскажет об опыте переезда на Prometheus, и почему выбрали именно его, о процессе миграции и о том, как организована инфраструктура для сбора метрик Go приложений. Расскажет о тонкостях вычисления квантилей как на стороне клиента (тип метрик Summary), так и на стороне сервера (тип метрик Histogram). Также вы узнаете о тех нюансах, с которыми столкнулись при работе с Графаной, и как их решили.  О том, как приготовить Go микросервис к продакшену поведает Вадим Мадисон. Доклад о том, что считать готовым к продакшену микросервисом. Как должен быть реализован микросервис, какую функциональность он должен предоставлять, чтобы считать сервис надежным, прозрачным для поддержки и мониторинга. На примере Go-микросервиса будет дан перечень необходимого функционала и рассказаны основные подходы по разработке, деплою и поддержке микросервисов. "
Denis_Minin;Разберем, что такое Source-Query;https://habr.com/ru/post/303172/;" Понятие Source-Query Source-Query, используется для отображения информации о сервере, так же он используется для управления сервером, через RCON команды. Source-Query разработал «xPaw». Сервера используют протокол «Source», таким образом «Source-Query» получает данные о сервере. "
phpclub;В эту пятницу пройдет 7-я конференция сообществ DevConf 2016;https://habr.com/ru/company/devconf/blog/303292/;"Уже в эту пятницу сообщества Python, Go, Ruby, PHP, Javascript, MySQL, PostgreSQL,Tarantool встретятся на DevConf 2016 — остались последние 60 мест.  В этом году на конференции DevConf 9 секций: golang, php, ruby, python, common, js, devops, pm, storage  После 17:30 мы проводим открытые митапы сообществ и круглые столы, которые может посетить любой желающий.  18 июня состоятся мастер-классы: Golang, PostgreSQL, Построение  эффективной команды и налаживание процесса разработки, GraphQL & Relay, MySQL и архитектуры социальной сети  18-19 июня проводим хакатон по Yii в ТАСС "
impwx;Чем полезен мономорфизм?;https://habr.com/ru/post/303542/;"  Выступления и посты в блогах о производительности JavaScript часто обращают внимание на важность мономорфного кода, однако обычно не дается внятного никакого объяснения, что такое мономорфизм/полиморфизм и почему это имеет значение. Даже мои собственные выступления зачастую сводятся к дихотомии в стиле Невероятного Халка: «ОДИН ТИП ХОРОШО! ДВА ТИП ПЛОХО!». Неудивительно, что когда люди обращаются ко мне за советом по производительности, чаще всего они просят объяснить, что на самом деле такое мономорфизм, откуда берется полиморфизм и что в нем плохого.  Ситуацию осложняет еще и то, что само слово «полиморфизм» имеет множество значений. В классическом объектно-ориентированном программировании полиморфизм связан с созданием дочерних классов, в которых можно переопределить поведение базового класса. Программисты, работающие с Haskell, вместо этого подумают о параметрическом полиморфизме. Однако полиморфизм, о котором предупреждают в докладах о производительности JavaScript – это полиморфизм вызовов функции.  Я объяснял этот механизм столькими различными путями, что наконец-то собрался и написал данную статью: теперь можно будет не импровизировать, а просто дать на нее ссылку.  Я также попробовал новый способ объяснять вещи – изображая взаимодействие составных частей виртуальной машины в виде коротких комиксов. Кроме того, данная статья не покрывает некоторые детали, которые я посчитал незначительными, излишними или не связанными напрямую."
Scratch;Дайджест последних достижений в области криптографии. Выпуск первый;https://habr.com/ru/post/305572/;"Привет, %username%  Пришло время для свежей пачки криптоновостей, пока они еще не перестали быть новостями. В этом выпуске:   Новый рекорд вычисления дискретного логарифма  VPN сервер и клиент, использующие Noise протокол   Постквантовая криптография в Chrome уже сегодня!  Чего вы не знаете о новом E2E шифровании в Facebook  RLWE избавляется от R и это идет ему на пользу  Comodo хотел поиметь Let`s Encrypt, но сфейлил. А Let`s Encrypt с завтрашнего дня будет поддерживать ddns  Появились минимальные требования к реализациям алгоритмов RSA, DSA, DH, устойчивым к side-channel атакам   Предыдущий выпуск тут "
Halt;Троллейбус из буханки или alias analysis в LLVM;https://habr.com/ru/post/306294/;"В преддверии очередной конференции C++ Siberia, я решил выложить на всеобщее оборзрение запись доклада с февральской конференции C++ Russia, проходившей в городе-герое Санкт-Петербурге.  Зачастую, знакомство с алиасингом в C++ у многих программистов начинается и заканчивается одинаково: -fno-strict-aliasing. На вопросы новичка, более опытные коллеги отвечают в стиле: «не трогай! а то все сломаешь!». Новичок и не трогает.   В докладе сделана попытка заглянуть под капот компилятора и понять, что же там, внутри? Что такое alias analysis, где он может быть полезен, в чем его преимущества и недостатки. Тема рассмотрена и со стороны программиста и со стороны разработчика компилятора. А по сему, вопрос «зачем?» был центральным.  В докладе вы найдете:   Код Quake3 и стандарт IEEE754 Магическую константу 0x5F3759DF Много ассемблера x86 Много IR кода LLVM Rust, Java и даже Fortran "
alexzfort;Дайджест свежих материалов из мира фронтенда за последние две недели №220 (11 — 24 июля 2016);https://habr.com/ru/company/zfort/blog/306306/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда  
semen_grinshtein;История языков программирования: как Haskell стал стандартом функционального программирования;https://habr.com/ru/post/307618/;"  Теоретические основы императивного программирования были заложены ещё в 30-х годах XX века Аланом Тьюрингом и Джоном фон Нейманом. Теория, положенная в основу функционального подхода, формировалась в 20-х и 30-х годах. В числе разработчиков математических основ функционального программирования — Мозес Шёнфинкель (Германия и Россия) и Хаскелл Карри (Англия), а также Алонзо Чёрч (США). Шёнфинкель и Карри заложили основы комбинаторной логики, а Чёрч является создателем лямбда-исчисления.  Функциональное программирование как раз основано на идеях из комбинаторной логики и лямбда-исчисления.  Но теория так и оставалась теорией, пока в начале 50-х прошлого века Джон МакКарти не разработал язык Lisp (1958), который стал первым почти функциональным языком программирования. На протяжении многих лет у Lisp не было конкурентов. Позднее появились функциональные языки программирования APL (1964), ISWIM (1966) и FP (1977), которые не получили столь широкого распространения.  Со временем Lisp перестал удовлетворять некоторым требованиям разработчиков программ, особенно с ростом объема и сложности программного кода. "
afiskon;Становимся контрибьютером в PostgreSQL;https://habr.com/ru/company/postgrespro/blog/308442/; В этой статье я хотел бы рассказать о том, как выглядит процесс разработки PostgreSQL глазами одного из контрибьютеров в этот самый PostgreSQL. Заниматься разработкой этой СУБД я начал в декабре 2015 года, когда устроился работать в компанию Postgres Professional. То есть, не так уж давно. А значит, еще свежи воспоминания о моментах, которые поначалу казались мне не вполне очевидными. Хотелось бы их законспектировать, чтобы новым людям, приходящим в нашу команду, а также всем тем, кто желает попробовать себя в роли разработчика открытой реляционной СУБД, было легче. Я расскажу о том, как выглядит процесс разработки PostgreSQL, какие инструменты я использую в своей повседневной работе, как следует оформлять патчи, и так далее. Заинтересовавшихся прошу проследовать под кат.
grigoryvp;Интервью с Кириллом Борисовым, который выступит на Moscow Python Conf 12 октябя;https://habr.com/ru/company/Voximplant/blog/311536/;"Организовывать три айтишных события одновременно с выходом Legion — то еще удовольствие. Тем не менее, как принято говорить у геймеров, «маны нет — но мы держимся». А я продолжаю брать интервью у спикеров, которые всего через неделю расскажут вам интересное из мира Python разработки и, что самое важное, будут готовы все это обсудить во время многочисленных кофе пауз, которые я аккуратно расставил по всей программе.  Кирилл занимается разработкой уже больше десяти лет и в данный момент работает над Яндекс Паспорт, используя для работы исключительно Python. Яндекс — компания немаленькая, Паспорт — не самый простой проект, и Кириллу есть что нам рассказать. Но прежде чем он это сделает, я задал ему десяток коварных вопросов о разработке, ответы на которые и расположены под катом. Кстати, с предыдущими двумя интервью вы можете ознакомиться здесь и здесь. "
olegbunin;Как перестать отлаживать асинхронный код и начать жить;https://habr.com/ru/company/oleg-bunin/blog/311554/;"Андрей Саломатин ( filipovskii_off )   Сегодня каждый день появляются новые языки программирования — Go, Rust, CoffeeScript — все, что угодно. Я решил, что я тоже горазд придумать свой язык программирования, что миру не хватает какого-то нового языка…  Дамы и господа, я представляю вам сегодня Schlecht!Script — чумовой язык программирования. Мы все должны начать им пользоваться прямо сейчас. В нем есть все то, к чему мы привыкли — в нем есть условные операторы, есть циклы, есть функции и функции высших порядков. В общем, в нем есть все, что нужно нормальному языку программирования.   Что в нем не очень обычно, что может даже оттолкнуть, на первый взгляд, — это то, что в Schlecht!Script функции имеют цвет."
Nuteralie;Бесплатные курсы, книги и прочие материалы по разработке;https://habr.com/ru/post/312940/;"  У кого сейчас есть время на получение второго академического образования? Хм. Все больше компаний и команд обращают внимание не на формальные «корочки», а на реальные способности и достижения конкретного человека. Речь, конечно о хороших компаниях с современным взглядом на реальность и продвинутым руководством.  Необязательно проходить всю программу университета, чтобы научиться программировать. Онлайн-курсы, конечно, требуют самоконтроля, усердия и ответственности. Но, если есть цель и стремление, то все приложится. В компании таких же «вольных» слушателей по сети вы наверняка сможете пройти курс успешно. "
nyan;Делаем очередную .io-игру;https://habr.com/ru/post/314864/;  Так называемые .io-игры — это браузерные massively multiplayer action-игры, в которых множество людей борются с излишками свободного времени. Massively multiplayer — это значит, что игра представляет собой многопользовательскую массовку из большого количества (сотен+) игроков, играющих в общей локации. Существует мнение, что все началось с игры Agar.io (клетки в чашке Петри). Другими успешными примерами можно назвать Slither.io (змейки) и Diep.io (танчики). Если верить статистике, то каждый день в эти игры играют миллионы игроков. Сегодня существуют десятки различных .io-игр, большинство из которых можно найти, загуглив по запросу «io games list». Я расскажу о том, как мы делали нашу .io-игру Oceanar.io — игру про рыбок и прочих морских жителей, постараюсь при этом сосредоточиться на вопросах общего технического устройства всей системы, и дам несколько скромных советов. 
AlexSerbul;Искусственный интеллект, вызовы и риски – глазами инженера;https://habr.com/ru/company/bitrix/blog/315484/;Добрый день, коллеги. Сегодня хочется трезво посмотреть глазами инженера на так популярные сейчас искусственный интеллект и Deep learning, упорядочить, выстроить факты и выработать выигрышную стратегию – как с этим … взлететь, пролететь и не упасть кому-нибудь на голову? Потому-что, когда дело от лабораторных моделей на python/matplotlib/numpy или lua доходит до высоконагруженного production в клиентском сервисе, когда ошибка в исходных данных сводит на нет все усилия – становится не то, что весело, а даже начинается нумерологический средневековый экстаз и инженеры начинают сутки напролет танцевать, в надежде излечиться от новомодной чумы )   Танцующие инженеры, тщетно надеющиеся исцелиться 
apelsyn;Fedora 25. Новая надежда: Wayland, Storaged, поддержка Raspberry Pi…;https://habr.com/ru/post/315926/;"  22 ноября Fedora опять зарелизилась. 25-й релиз, на мой взгляд, получился очень удачный:   Замена старого сервера X.Org или X11 на Wayland. Поддержка сеанса на базе X11 сохранена в качестве опции UDisks2 заменён на Storaged, предоставляющий унифицированный D-Bus API для управления LVM2, iSCSI, Btrfs, BCache, LSM и ZRam Поддержка устройств Raspberry Pi 2 и 3  "
1cloud;Какой может быть работа ИТ-специалиста будущего;https://habr.com/ru/company/1cloud/blog/316930/;"В нашем блоге на Хабре мы рассказываем о том, что сделает работу начинающего программиста эффективнее, и даже даем вредные советы в виде практических пособий вроде «Как вывести из себя программиста». Сегодня мы решили посмотреть на то, как могут измениться сегодняшние ИТ-профессии.  Существуют очень разные прогнозы, но одно ясно точно — компьютерные науки никуда не денутся. Директор Американского центра развития Лизетт Партелоу (Lisette Partelow) в конце своей статьи пишет, что их изучение не привязано к коду как таковому, дает более общий и широкий набор знаний, поэтому по какому бы сценарию ни развивался мир, такие навыки можно будет применить во многих разных профессиях и в будущем.  "
crea7or;Сказка о потерянном времени;https://habr.com/ru/post/317588/;"Если честно, то не совсем и сказка, а суровая жизнь. Но время ведь потеряно совершенно настоящее, хоть и с пользой. А началось всё совершенно случайно. На одном сайте один умный товарищ написал пост о гипотезе Эйлера. Суть достаточно проста. Гипотеза Эйлера утверждает, что для любого натурального числа n>2 никакую n-ю степень натурального числа нельзя представить в виде суммы (n-1) n-х степеней других натуральных чисел. То есть, уравнения:   не имеют решения в натуральных числах.   Ну собственно так оно и было до 1966 года…"
pronskiy;PHP-Дайджест № 99 – итоги 2016 года и подборка интересных ссылок (11 – 25 декабря 2016);https://habr.com/ru/company/zfort/blog/318410/;" По традиции, подведем итоги уходящего года и вспомним самые значимые события в мире PHP, которых, к счастью, было немало. И конечно же, подборка со ссылками на свежие материалы за последние две недели.  С наступающим Новым годом! Приятного чтения. "
sheknitrtch;Грааль и Трюфель (Graal & Truffle);https://habr.com/ru/post/319424/;Малоизвестный исследовательский проект, который может значительно ускорить инновации в проектировании языков программирования  От переводчика Хочу сразу предупредить, что статья местами напоминает презентацию крупной компании из-за эпитетов в духе «изменит индустрию», «лучший на рынке», «прорывные технологии» и др. Если закрыть глаза на такой эмоциональный стиль повествования, то получится интересная вводная статья про новинки технологий компиляторов и виртуальных машин. Введение Со времён расцвета компьютерной индустрии многие были увлечены квестом в поисках идеального языка программирования. Квест очень сложный: создание нового языка — задача не из лёгких. И очень часто в процессе происходит дробление сложившейся экосистемы программирования и возникает необходимость заново строить базовые инструменты для нового языка: компилятор, отладчик, HTTP стек, IDE, библиотеки и бесконечное число базовых блоков пишутся с нуля для каждого нового языка. Совершенство в дизайне языков программирования недостижимо, и новые идеи возникают постоянно. Мы похожи на Сизифа: приговоренного богами на вечное толкание камня в гору, чтобы в итоге увидеть, как тот скатывается вниз снова и снова … целую вечность. Как можно разорвать этот порочный цикл? Давайте помечтаем, чего бы нам хотелось.
ru_vds;WebAssembly – путь к новым горизонтам производительности;https://habr.com/ru/company/ruvds/blog/319834/;"Если вы – из тех программистов, которые в новогоднюю ночь пообещали себе писать более быстрый код, сегодня у вас есть шанс это обещание выполнить. Мы поговорим о том, как ускорить работу веб-решений с использованием технологии WebAssembly (сокращённо её называют wasm). Технология это очень молодая, сейчас – пора её становления, однако, она вполне может оказать серьёзное влияние на будущее разработки для интернета.   Здесь я расскажу о том, как создавать модули WebAssembly, как с ними работать, как вызывать их из клиентского кода в браузере так, будто это модули, написанные на JS. Мы рассмотрим два набора реализаций алгоритма поиска чисел Фибоначчи. Один из них представлен обычными JavaScript-функциями, второй – написан на C и преобразован в модуль WebAssembly. Это позволит сравнить производительность wasm и JS при решении схожих задач."
alizar;Мейнтейнеры не масштабируются;https://habr.com/ru/post/320092/;"  Система разработки и поддержки ядра Linux не так идеальна, как хотелось бы. Почему бы не улучшить нынешнюю систему, используя в качестве эксперимента успешный опыт других проектов? С таким предложением выступил разработчик Дэниел Веттер (Daniel Vetter). Он подготовил доклад на эту тему для конференции LCA 2017 (слайды), а также опубликовал более подробный текст в блоге.  Дэниел Веттер последние несколько лет занимается поддержкой драйвера ядра для графики Intel drm/i915, он работает в Intel Open Source Technology Center. Драйвер drm/i915 поддерживают два мейнтейнера, а примерно 19 разработчиков имеют право коммитить патчи сразу в основную ветку. «Это вполне нормальная ситуация для сообщества open source, но совершенно немыслимое дело для ядра Linux», — говорит Дэниел. Он считает, что такая организация работы над драйвером вполне успешно себя проявила и её вполне можно использовать в других местах. Например, в ядре Linux, где сейчас на мейнтейнеров приходится слишком большая нагрузка. "
Sadovnikova;Что изменилось в 2016 году в сфере программирования? Итоги прошедшего года и планы на 2017;https://habr.com/ru/company/geekbrains/blog/320604/;"Чтобы поставить себе верные цели на новый рабочий год, важно понимать какие тенденции наметились в году прошедшем. Именно этим мы сегодня и займёмся.   Язык программирования №1 в мире  2016 год прошёл под знаменем JavaScript. На сегодняшний день этот язык программирования самый популярный в мире. Последняя его версия – JavaScript/ECMAScript6 – совместима уже со всеми ключевыми браузерами и Node.js. Конечно, ещё остались компании, не осуществившие переход и работающие с более старыми версиями JavaScript, но это дело времени.  Переход с предыдущих версий JavaScript на новую, естественным образом сказался на востребованности и доходе программистов данного направления.  Надо заметить, что уверенный рост доходов программистов JavaScript наблюдается все последние пять лет. Их зарплатам могут позавидовать специалисты многих отраслей. Новичок имеет право рассчитывать на оклад не менее 45-60т.р. а эксперты отрасти зарабатывают до 400 000 р. в месяц. Вот чему нужно учиться!   Правда если говорить о любви, а не о расчёте, то многие программисты (согласно опросам) испытывают симпатию к Rust, Shift и F#. Посмотрим, какой будет расстановка сил в этом году.  "
Habr_Studio;Особенности архитектуры распределённого хранилища в Dropbox;https://habr.com/ru/post/321274/;"  Вниманию читателей «Хабрахабра» представляется расшифровка видеозаписи (в конце публикации) выступления Вячеслава Бахмутова на сцене конференции HighLoad++, прошедшей в подмосковном Сколково 7-8 ноября ушедшего года.  Меня зовут Слава Бахмутов, я работаю в Dropbox. Я Site Reliability Engineer (SRE). Я люблю Go и продвигаю его. С ребятами мы записываем подкаст golangshow.  Что такое Dropbox? Это облачное хранилище, в котором пользователи хранят свои файлы. У нас 500 миллионов пользователей, у нас более 200 тысяч бизнесов, а также огромное количества данных и трафика (более 1.2 млрд новых файлов в день). "
eao197;Модель Акторов и C++: что, зачем и как?;https://habr.com/ru/post/322250/;Данная статья является доработанной текстовой версией одноименного доклада с конференции C++ CoreHard Autumn 2016, которая проходила в Минске в октябре прошлого года. Желание сделать эту статью возникло под впечатлением о том, что в мире C++ разработчики как бы делятся на два больших и не пересекающихся лагеря. В первом лагере находятся матерые спецы, которые все видели, все знают и все умеют, за плечами у которых десятки собственноручно написанных реализаций Модели Акторов, внутрях у которых хитрые, конечно же самостоятельно сделанные, lock-free очереди и state-of-the-art механизмы обслуживания сообщений. Такие проффи сами часами могут рассказывать про тонкости многопоточного программирования (только почему-то редко это делают). Во втором лагере — зеленые новички, которых волею судьбы занесло в мир C++, которые пока слабо представляют себе различия между unique_ptr и shared_ptr, про шаблоны только слышали, а в области многопоточности имеют поверхностное впечатление только о std::thread, std::mutex и, может быть, std::condition_variable. Для людей из первого лагеря я вряд ли что-нибудь интересное расскажу, а вот разработчикам из второго лагеря попробую вкратце рассказать о том, что Модель Акторов в C++ — это нормально. И что есть ряд готовых инструментов, на примере которых можно увидеть, что же это такое.
KsHoxton;Приглашаем на Lua in Moscow 2017 5 марта;https://habr.com/ru/company/mailru/blog/322432/;"  В первое воскресенье марта в офисе Mail.Ru Group пройдёт международная конференция Lua in Moscow 2017. В программе — выступления автора языка Роберто Иерусалимского и лучших зарубежных и отечественных экспертов по Lua и LuaJIT.  Lua — уникальный язык программирования, который используется далеко не только в индустрии компьютерных игр, но и как встроенный язык расширений в таких инструментах web-программирования, как Redis, nginx, Tarantool, OpenResty. Lua также применяется для анализа больших данных, научных вычислений. Во многих роутерах, принтерах и других подобных устройствах есть Lua.  В 2014 году мы провели восьмую ежегодную конференцию по языку программирования Lua Workshop, крупнейшую по числу участников за все годы. С тех пор мы не забывали про язык программирования Lua, проводили митапы и потоки на IT-конференциях. И вот, наконец, в этом году у вас снова есть шанс лично задать вопросы автору языка, обменяться опытом с лучшими программистами и, конечно, послушать доклады про передовой опыт применения Lua и LuaJIT.   Часть докладов будет на английском языке.  Даже если вы ещё не пишете на языке Lua, приходите, возможно, конференция откроет вам глаза на что-то новое и интересное! "
yarric;О чём молчат авторы «Hello, World!»-ов;https://habr.com/ru/post/323194/; Обычно адепты нового Того-самого-лучшего-языка пишут свои рекламные мини-программы для обучения и продвижения примерно так:
AloneCoder;Я написал самую быструю хеш-таблицу;https://habr.com/ru/company/mailru/blog/323242/; В конце концов я должен был к этому прийти. Когда-то я опубликовал статью «Я написал быструю хеш-таблицу», а потом ещё одну — «Я написал ещё более быструю хеш-таблицу». Теперь я завершил работу над самой быстрой хеш-таблицей. И под этим я подразумеваю, что реализовал самый быстрый поиск по сравнению со всеми хеш-таблицами, какие мне только удалось найти. При этом операции вставки и удаления также работают очень быстро (хотя и не быстрее конкурентов). Я использовал хеширование по алгоритму Robin Hood с ограничением максимального количества наборов. Если элемент должен быть на расстоянии больше Х позиций от своей идеальной позиции, то увеличиваем таблицу и надеемся, что в этом случае каждый элемент сможет быть ближе к своей желаемой позиции. Похоже, такой подход действительно хорошо работает. Величина Х может быть относительно невелика, что позволяет реализовать некоторые оптимизации внутреннего цикла поиска по хеш-таблице. Если вы хотите только попробовать её в работе, то можете скачать отсюда. Либо пролистайте вниз до раздела «Исходный код и использование». Хотите подробностей — читайте дальше.
m1rko;Как я стал лучше программировать;https://habr.com/ru/post/324648/;"Автор статьи — Джеймс Лонг, один из создателей Firefox Developer Tools  Несколько человек на React Conf спросили у меня совета, как программировать лучше. По какой-то причине люди видят во мне продвинутого программиста, к советам которого стоит прислушаться. Я подумал, стоит записать «ментальную модель» того, как я подходил к программированию на протяжении всех лет.  Некоторая информация: мне 32 года и 10 лет твёрдого опыта. Наверное, только в последние пару лет я приобрёл уверенность в том, что делаю. Но даже теперь я продолжаю сомневаться в себе. Дело в том, что это чувство никогда не уходит, так что старайтесь не обращать на него внимания, продолжайте хаки и накапливайте опыт.  Сразу скажу, что здесь всего несколько советов для улучшения своих способностей. В итоге вам нужно самим выяснить, что лучше всего подходит именно вам. Это просто те вещи, которые я посчитал полезными. "
fokusov;Go дайджест. События, статьи, интересные проекты из мира Go [15 — 30 марта 2017];https://habr.com/ru/post/325222/;Всем привет!  Это второй выпуск дайджеста, посвящённого языку программирования Go, в этом году. В нём перечислены лучшие статьи за прошедшие пару недель, а также новости, события и проекты, заслуживающие внимание. 
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №256 (27 марта — 2 апреля 2017);https://habr.com/ru/company/zfort/blog/325462/;Предлагаем вашему вниманию подборку с ссылками на полезные ресурсы и интересные материалы из области фронтенда.  
m1rko;Windows 10 Creators Update: что нового в Bash/WSL и Windows Console;https://habr.com/ru/post/326432/;"Когда вышел Windows 10 Anniversary Update (AU), подсистема Windows Subsystem for Linux (WSL) была ещё далека от завершения и страдала от многих несовместимостей, особенно с популярными средствами разработки вроде node.js, Java и др.  Однако было важно передать эту восхитительную новую функцию в руки реальных пользователей, чтобы мы могли узнать у них — у ВАС — что именно необходимо WSL, что работает, что не работает и т.д.  И сообщество ответило!   Таким образом, этот новый релиз подсистемы Windows для Linux и консоли Bash создан вами и для вас! "
Siemargl;Жирные программы — факторы скорости;https://habr.com/ru/post/326592/;" Картинка из фильма «Размер имеет значение», 2009  Данная статья была начата в апреле 2016г в результате того, что компьютер опять стал работать медленнее, чем я щелкаю мышкой. Собственно, она является компиляцией многих тестов (некоторых еще с 2010г) и обсуждений с моим участием. Ее нельзя назвать полностью законченной, поскольку это не окончательные выводы, а некие промежуточные точки, показывающие на что обратить внимание и куда копать дальше.   Название частично позаимствовано из статьи Никлауса Вирта «Долой „жирные“ программы», которой в 2016г было ровно 10 лет, и актуальности она не утратила — а скорее вышла на новый уровень, кто не знаком — почитайте.  Рассмотрим разные аспекты, влияющие на производительность систем и программ.  Языковой аспект Аспекты памяти Аспекты реального мира Неязыковые факторы Аспект человеческого фактора "
Pavlov_dog;Dive into Ethereum;https://habr.com/ru/post/327236/;"Сегодня платформа Ethereum стала одним из самых узнаваемых брендов блокчейн сферы, вплотную приблизившись по популярности (и капитализации) к Bitcoin. Но из-за отсутствия ""полноценного"" рускоязычного гайда, отечественные разработчики все еще не очень понимают, что это за зверь и как с ним работать. Поэтому в данной статье я попытался максимально подробно охватить все аспекты разработки умных контрактов под Ethereum. Я расскажу про инструменты разработки, сам ЯП, процесс добавления UI и еще много интересного. В конечном итоге мы получим обычный сайт-визитку, но ""под капотом"" он будет работать на умных контрактах Ethereum. Кого заинтересовало — прошу под кат. "
m1a1x1;Реализация NetFlow сенсора на FPGA + CPU — гибко и быстро;https://habr.com/ru/company/metrotek/blog/327894/;Добрый день! Как вы поняли из названия, вас ждет очередная статья про NetFlow, но на этот раз с необычной стороны — со стороны реализации NetFlow сенсора на FPGA.  
m1rko;Как сделано интро на 64k;https://habr.com/ru/post/330090/;"Введение в интро Демосцена — это о создании классных штук, которые работают в реальном времени (как бы «крутятся в вашем компьютере»). Их называют демки. Некоторые из них по-настоящему маленькие, скажем, 64k или меньше — такие называются интро. Название происходит от рекламирования или представления взломанных программ (crack intro). Итак, интро — это просто маленькая демка.  Я заметил, что многим интересны произведения демосцены, но они не имеют понятия, как в реальности делаются демки. В этой статье — мозговой дамп и посмертное вскрытие нашего свежего интро Guberniya. Надеюсь, будет интересно и новичкам, и опытным ветеранам. Статья затрагивает практически все техники, которые используются в демках, и должна дать хорошее представление о том, как их делать. В этой статье я буду называть людей по никам, потому что именно так принято на сцене.  Бинарник под Windows: guberniya_final.zip (61.8 kB) (немного ломается на картах AMD)"
ConfGuru;DevConf::BackEnd уже на этой неделе 17 июня в субботу, программа сформирована;https://habr.com/ru/company/devconf/blog/330748/;" Приглашаем принять участие в DevConf::BackEnd в эту субботу, в центре внимания: PHP 7.1, слабости сетевого API в ядре Linux, чат-боты, живые видео-трансляции, системы обработки событий и Haskell.  Открывает конференцию интересный доклад Валентина Бартенева — участника команды разработки Nginx. Он будет ругать линукс — точнее, сетевой API ядра для userland-приложений, и жаловаться на жизнь нелегкую, многопоточную мультиплексируемую. "
andrewnester;Pygest #11. Релизы, статьи, интересные проекты из мира Python [6 июня 2017 — 19 июня 2017];https://habr.com/ru/post/331154/;" Всем привет! Это уже одиннадцатый выпуск дайджеста на Хабрахабр о новостях из мира Python.   В сегодняшнем выпуске вы найдёте интересные материалы, касающиеся устройства Python, машинного обучения, перехода на Python 3, Django и многого другого. Присылайте свои актуальные материалы, а также любые замечания и предложения, которые будут добавлены в ближайший дайджест.  А теперь к делу!"
zarytskiy;30+ онлайн ресурсов для изучения программирования в 2017;https://habr.com/ru/post/331530/;"Изучение программирования становится все более доступным благодаря непрерывному росту количества онлайн ресурсов, которые помогают в этом всем желающим. Плюс таких ресурсов — в неограниченном количестве знаний, которые они могут дать и в высокой квалификации преподавателей. Минус — никто не заставляет вас учиться и качество полученных знаний зависит лишь от того, сколько усилий вы приложили.  Составить рейтинг ресурсов для изучения программирования, предлагаю пользователям хабра, исходя из личного опыта их использования. В конце статьи вы сможете проголосовать за любимый сайт для изучения программирования. "
ru_vds;ArrayBuffer и SharedArrayBuffer в JavaScript, часть 2: знакомство с новыми объектами языка;https://habr.com/ru/company/ruvds/blog/331760/;В прошлый раз мы, в качестве подготовки к разговору об ArrayBuffer и SharedArrayBuffer, рассмотрели разные подходы к управлению памятью. Как вы, должно быть, помните, JS-движок играет роль посредника при работе с памятью, однако, новые объекты дают программисту некоторые ручные инструменты. Для чего это может понадобиться?   
esetnod32;Petya и другие. ESET раскрывает детали кибератак на корпоративные сети;https://habr.com/ru/company/eset/blog/332058/;Эпидемия шифратора Petya в центре внимания. Проблема в том, что это лишь последний инцидент в серии атак на украинские компании. Отчет ESET раскрывает некоторые возможности Diskcoder.C (он же ExPetr, PetrWrap, Petya или NotPetya) и включает информацию о ранее неосвещенных атаках.    
olemskoi;Непрерывная интеграция: CircleCI vs Travis CI vs Jenkins;https://habr.com/ru/company/southbridge/blog/332836/;  Под катом вы найдете перевод статьи ознакомительного характера, в которой сравниваются три системы непрерывной интеграции: CircleCI, Travis CI и Jenkins.
Alienter;«Хочешь сделать хорошо, сделай это сам» или как я делаю свою выживалку на Unity 3D и C#;https://habr.com/ru/post/332960/;" Когда-то давно я много играл в компьютерные игры (в основном — соревновательные), но несколько лет назад открыл для себя жанр Survival Game (выживалки «в простонародье»). Поиграв в несколько разных игр (ARK, Conan Exiles и другие, менее находящиеся на слуху), я понял, что это все же не совсем то, чего бы мне хотелось.  Как и многие ребята, в детстве (прошедшем еще в большой и сильной стране из 4 букв) я зачитывался книгами пиратской тематики: Одиссея Капитана Блада, Остров Сокровищ, да даже Гулливер, в какой-то степени, повлиял на мое мировоззрение и отношение к теме дальних странствий и опасных морских приключений.  И вот примерно полгода назад звезды сошлись. Я решил объединить свои страсти к пиратской тематике и компьютерным играм из жанра «выживалок». Я начал делать свою игру в этом сеттинге, с преферансом и куртизанками.   "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №273 (24 — 30 июля 2017);https://habr.com/ru/company/zfort/blog/334460/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
rboots;JavaScript как праздник;https://habr.com/ru/post/334858/;Эта пятничная статья будет ответом на статью JavaScript как явление, в которой автор изложил необоснованную критику на JavaScript. Лично я пишу на JavaScript уже 15 лет и искренне считаю его одним из самых мощных ЯП на сегодняшний день. В статье будет, по возможности, аргументированная позиция относительно основных тезисов критики, так как у новичков действительно часто возникают проблемы с JavaScript. Вводит в заблуждение приставка Script и несерьёзный имидж языка, а на деле обнаруживается, что язык применяется от front-end и back-end до дескопных и мобильных приложений, программирования интегральных микросхем, обработки видео и в множестве других сфер. Я давно хотел раскрыть частые заблуждения про JavaScript, а тут как раз появился повод, поэтому welcome под кат.
sergey_shambir;Типы struct, union и enum в Modern C++;https://habr.com/ru/post/334988/;Язык C++ сильно изменился за последние 10 лет. Изменились даже базовые типы: struct, union и enum. Сегодня мы кратко пройдёмся по всем изменениям от C++11 до C++17, заглянем в C++20 и в конце составим список правил хорошего стиля.
houk;Продвинутые перечисления с Ruby;https://habr.com/ru/post/335072/;"Перечисления (enumeration) по определению это — «действие упоминания некоторого количества чего-либо один за одним». В программировании, вместо упоминания, мы выбираем любое действие, которое хотим произвести, будь то простой вывод на монитор или выполнение некоторого рода выборки и/или преобразования над элементом.  В программировании, у нас есть много способов делать выборку и обработку коллекции за единицу времени, путем добавления в цепочку дополнительной функции трансформации на каждом шаге. И каждый шаг, может как потреблять целиком всю коллекцию перед тем как передать результаты обработки следующем шагу, или он может обрабатывать коллекцию «лениво», передавая один или более элементов коллекции через все шаги преобразований."
pronskiy;PHP-Дайджест № 114 – свежие новости, материалы и инструменты (1 – 14 августа 2017);https://habr.com/ru/company/zfort/blog/335546/;  Свежая подборка со ссылками на новости и материалы. В выпуске: PHP 7.2.0 Beta 2, об истории и безопасности unserialize(), старт PSR HTTP Client, StackOverflow Driven Development, видео с конференций и митапов, и многое другое. Приятного чтения!
Cheater;Установка и использование GNU/Linux вместо Chrome OS на Toshiba Chromebook 2;https://habr.com/ru/post/336044/;"Привет всем! Некоторое время назад я приобрёл себе Chromebook модели Toshiba Chromebook 2 CB35-B3330 и заменил на нём Chrome OS на традиционный GNU/Linux. Это была не установка через crouton, а именно «чистая» установка с полным удалением Chrome OS. Борьба с плохой поддержкой Линуксом этого хромбука заняла неожиданно много времени (несколько вечеров), но в итоге все проблемы решились и хромбук стал полноценной рабочей машиной.  В итоге я решил написать статью, в которой:   Очень кратко описан сам хромбук и мои впечатления от железа. Описаны основные проблемы по установке GNU/Linux на данную конкретную модель и пути их решения. Очень кратко описано, каким образом я сам его использую после установки Линукса. "
rubyruby;Погружение в разработку на Ethereum. Часть 2: Web3.js и газ;https://habr.com/ru/post/336770/;В предыдущей статье мы описали деплой контрактов и взаимодействие с ними через пользовательский интерфейс кошелька Mist, но это не подходит для реальной разработки. Нужна библиотека, которая позволит работать с блокчейном из кода пользовательского приложения. В этой статье мы кратко рассмотрим что представляет собой библиотека Web3.js, пощупав ее из консоли Geth. И еще одна важная тема, которая наверняка интересует не только разработчиков, но и потенциальных заказчиков — сколько стоят транзакции на блокчейне, ведь каждая из них требует газа, который покупается за эфир.  
divan0;Как перейти на gRPC, сохранив REST;https://habr.com/ru/post/337716/;"Многие знакомы с gRPC — открытым RPC-фреймворком от Google, который поддерживает 10 языков и активно используется внутри Google, Netflix, Kubernetes, Docker и многими другими. Если вы пишете микросервисы, gRPC предоставляет массу преимуществ перед традиционным подходом REST+JSON, но на существующих проектах часто переход не так просто осуществить из-за наличия уже использующихся REST-клиентов, которые невозможно обновить за раз. Нередко общаясь на тему gRPC можно услышать ""да, мы у нас в компании тоже смотрим на gRPC, но всё никак не попробуем"". Что ж, этой проблеме есть хорошее решение под названием grpc-rest-gateway, которое занимается именно этим — автогенерацией REST-gRPC прокси с поддержкой всех основных преимуществ gRPC плюс поддержка Swagger. В этой статье я покажу на примере как это выглядит и работает, и, надеюсь, это поможет и вам перейти на gRPC, не теряя существующие REST-клиенты. "
bugaevc;Как работает Android, часть 2;https://habr.com/ru/company/solarsecurity/blog/338292/; В этой статье я расскажу о некоторых идеях, на которых построены высокоуровневые части Android, о нескольких его предшественниках и о базовых механизмах обеспечения безопасности.
pronskiy;PHP-Дайджест № 117 – свежие новости, материалы и инструменты (10 – 24 сентября 2017);https://habr.com/ru/company/zfort/blog/338636/;"  Свежая подборка со ссылками на новости и материалы. В выпуске: PHP 7.2.0 RC 2, о будущем HHVM, предложения из PHP Internals, подборка чатов по PHP, видео с конференций и митапов, и многое другое. Приятного чтения!"
m1rko;Весь веб на 60+ FPS: как новый рендерер в Firefox избавился от рывков и подтормаживаний;https://habr.com/ru/post/340176/;"До релиза Firefox Quantum остаётся всё меньше времени. Он принесёт множество улучшений в производительности, в том числе сверхбыстрый движок CSS, который мы позаимствовали у Servo.  Но есть ещё одна большая часть технологии Servo, которая пока не вошла в состав Firefox Quantum, но скоро войдёт. Это WebRender, часть проекта Quantum Render.     WebRender известен своей исключительной скоростью. Но главная задача — не ускорить рендеринг, а сделать его более плавным.  При разработке WebRender мы поставили задачу, чтобы все приложения работали на 60 кадрах в секунду (FPS) или лучше, независимо от размера дисплея или от размера анимации. И это сработало. Страницы, которые пыхтят на 15 FPS в Chrome или нынешнем Firefox, летают на 60 FPS при запуске WebRender.  Как WebRender делает это? Он фундаментальным образом меняет принцип работы движка рендеринга, делая его более похожим на движок 3D-игры."
Karaoke;Почему роботы должны форматировать код за нас;https://habr.com/ru/company/edison/blog/340304/;"  Раньше я думал, что иметь индивидуальный стиль кодирования это хорошо для программиста. Это показывает, что вы опытный разработчик, который знает, как должен выглядеть хороший код.   В колледже мои преподаватели говорили, что они понимают, когда мои однокурсники используют мой код в своих работах из-за особого стиля кодирования. Сейчас я думаю, что они понимали это потому, что мой код был по крайней мере хоть как-то отформатирован, в то время как у других была полная неразбериха.   С тех пор я потратил много времени, рассуждая о стиле кодирования и выбирая инструменты для его осуществления. Настало время что-то менять.  "
nzeemin;Знакомство с WebAssembly;https://habr.com/ru/post/342180/; Эта статья основана на моём выступлении на ITSubbotnik, прошедшем в Рязани 14 октября 2017 года. На русском пока что довольно мало материала на эту тему, надеюсь что статья будет вам полезна. Disclaimer: Автор не является экспертом ни в WebAssembly, ни в JavaScript. Данная статья есть компиляция мыслей и идей, полученных из выступлений других людей на данную тему, плюс эпизодического опыта изучения WebAssembly в течение нескольких месяцев.
sat2707;Russian AI Cup 2017 — отчет о бета-тесте, старт чемпионата. Хотели StarCraft, получили странный Total War;https://habr.com/ru/company/mailru/blog/342408/; Седьмого ноября официально стартовала неделя бета-теста Russian Ai Cup 2017. Чемпионат ежегодный, и в этом году мы решили предложить участникам проект под названием CodeWars — конкурс по программированию ботов для игры, которую сами участники сходу окрестили «симулятором игрока в RTS». Бета-тест подошел к концу, чемпионат официально стартовал, и под катом мы хотели бы отчитаться, поделиться новостями о том, что же мы теперь можем предложить. Ну и еще раз зазвать всех поучаствовать, не без этого конечно.
siffash;Расстояние Левенштейна в MySQL и алгоритмы нечёткого поиска средствами PHP;https://habr.com/ru/post/342434/;Знаменитый советский и российский математик Владимир Иосифович Левенштейн (кстати, ушедший из жизни два с небольшим месяца назад) в начале второй половины прошлого века ввёл понятие дистанции редактирования, которым мы пользуемся по сей день в различных сферах — от поисковых систем до биоинформатики. В этой статье мы применим его принцип для нечёткого поиска в MySQL (поскольку MySQL на данный момент пока не предлагает встроенного решения), вычислив самый эффективный (т.е. быстрый) способ из нескольких найденных в интернете, построим алгоритм такого поиска и реализуем его на PHP.  
sztanko;CubeDB: минималистичное хранилище счётчиков с многомерными ключами;https://habr.com/ru/company/badoo/blog/342564/; Привет, Хабр! Меня зовут Дима Станко, я работаю в BI-команде Badoo в лондонском офисе. Так уж сложилось в нашей компании, что мы стараемся проводить как можно больше измерений активности пользователей. Это необходимо многим специалистам: разработчики тестируют работоспособность кода, коллеги из продуктовых команд убеждаются в гениальности своих идей, админы – в том, что энтропия восторжествует не этой ночью, а коллеги из отдела антиспама – что добро как раз побеждает зло в вечной и эпической схватке.  Обо всём этом мы писали много раз и будем писать ещё, поскольку считаем, что наступать на грабли и не рассказывать о них другим – нехорошо. 
m0rtido;Russian AI Cup: инструментарий участника;https://habr.com/ru/post/343006/; Уже 6 лет проводится ежегодное соревнование Russian AI Cup. За это время чемпионат оброс постоянной аудиторией и у многих заядлых участников появился небольшой набор инструментов и хитростей, которые помогают им в разработке. Я участвовал в этом соревновании 3 раза и также обзавелся рядом заготовок и скриптов, о которых и хочу рассказать в данной статье.
it_man;33 независимых блога о UI-дизайне, веб-разработке и программировании;https://habr.com/ru/company/cloud_mts/blog/343202/;"Мы продолжаем нашу серию дайджестов с независимыми блогами разработчиков со всего мира. В сегодняшнем материале мы собрали ресурсы о дизайне пользовательских интерфейсов, веб-разработке, а также философии программирования и жизни программистов.  Под катом вы найдете ссылки на блоги, рекомендованные резидентами разных платформ: Quora, Stack Overflow, Hacker News, Reddit и др. Авторы этих блогов занимают самые разные должности в ИТ-экосистеме: разработчики, тестировщики, дизайнеры, управленцы, и пишут как статьи для начинающих, так и более продвинутые материалы.  Другие наши тематические подборки:   17 независимых блогов по математике, алгоритмам и языкам программирования 22 независимых блога о разработке, ИБ, тестировании и геймдеве  "
shurup;tldr — альтернатива man с названием, говорящим за себя;https://habr.com/ru/company/flant/blog/343702/;"Все мы любим --help и man. Несмотря на появление многочисленных форумов, Stack Exchange и прочих ресурсов, хорошим тоном в начале решения своих проблем по-прежнему остаётся самостоятельный поиск ответа в официальной документации (и на этих ресурсах вам скорее всего об этом сразу напомнят). Однако лень продолжает двигать прогресс даже там, где не всегда того ожидаешь. Впрочем, это не только лень — бывают и другие аргументы в пользу «упрощений»…  В общем, оказалось, что классический man устраивает не всех. Поэтому появился проект tldr, который, следуя своей расшифровке «Too long; didn't read», решил принести в консоль лаконичную документацию, содержащую только самое главное. Проекту tldr уже больше 3 лет, но про него ещё почему-то не писали на хабре.  "
anastasiak2512;Релиз CLion 2017.3: существенные улучшения поддержки C++, интеграция с Valgrind Memcheck и Boost.Test и многое другое;https://habr.com/ru/company/JetBrains/blog/344076/;"Привет, Хабр!  Наша команда приготовила всем разработчикам на C и C++ новогодний подарок под елку – новый релиз CLion 2017.3! В этом посте постараемся рассказать, чем он хорош, прикинуть дальнейшие направления для развития продукта и, конечно, ответить на все интересующие вас вопросы в комментариях.    Коротко об основных улучшениях для тех, кто не хочет много читать:   Поддержка языка C++   Улучшения в таких подсистемах парсера, как list initialization и name lookup  Поддержка расширений специфичных для компилятора Microsoft Visual C++  Поддержка макроса __COUNTER__  И не только!  Новые инструменты и фреймворки   Valgrind Memcheck  Boost.Test  CMake 3.9, GDB 8.0, LLDB 5.0  Существенные переработки и расширение возможностей в настройке компилятора, окружения, CMake, отладчика, и пр. Возможность запуска почти произвольной функции main, иконки для запуска функций main и тестов Возможность разрабатывать на Kotlin/Native в CLion  Можно прямо сейчас скачать бесплатную 30-дневную версию с нашего сайта и попробовать новые возможности (для этого мы даже подготовили специальный небольшой демо-проект). А ниже мы поговорим об улучшениях более подробно."
AloneCoder;Отладка злого бага в рантайме Go;https://habr.com/ru/company/mailru/blog/344080/; Я большой поклонник Prometheus и Grafana. Поработав SRE в Google, я научился ценить хороший мониторинг и за прошедший год предпочитал пользоваться комбинацией этих инструментов. Я использую их для мониторинга своих личных серверов (black-box и white-box мониторинг), внешних и внутренних событий Euskal Encounter, для мониторинга клиентских проектов и много другого. Prometheus позволяет очень просто писать кастомные модули экспорта для мониторинга моих собственных данных, к тому же вполне можно найти подходящий модуль прямо из коробки. Например, для создания симпатичной панели имеющихся метрик Encounter-событий мы используем sql_exporter.
koito_tyan;Танчики в консоли, статья первая: «От спора к написанию кода»;https://habr.com/ru/post/344226/;"Пожалуй нужно начать с небольшой предыстории: сижу я как-то на паре и решили мы с одногруппником поспорить о возможности создания простейших танчиков в консоли (по типу дендивских), но для игры по сети.  Так как компьютерных сетей у нас ещё не было, мне пришлось самой учить всё с нуля. Прочитав, пожалуй, страниц 30 отборного текста и прослушав четыре лекции по этой теме, мне стало очень скучно и лениво слушать это дальше, и я наконец приступила к проекту.  Ну что, все готовы? Начинаем! Эта статья будет короткой, но информативной (для новичков, как я).   На момент написания статьи я знала всего несколько языков и рассуждала о выборе каждого из них и насколько он подходит для разработки этих самых танчиков. Но опираясь на знания я решила распределить всё так:  C# — клиент (так как самый лёгкий в изучении язык) Rust — сервер (так как самый безопасный и быстрый) Php/html/css/javascript — сайт (который мы ВОЗМОЖНО будем делать)"
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №293 (11 — 17 декабря 2017);https://habr.com/ru/company/zfort/blog/344926/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
s4n2a;Не ходи в Fediverse, там тебя ждут неприятности. — Ну как же туда не ходить? Они же ждут;https://habr.com/ru/post/345402/;"Привет, Хабр. На днях в комментариях к одному хабропосту я увидела фразу: ""Думаю, будущее всё-таки за федерацией"". Это, наконец, сподвигло меня на написание статьи, зреющей в течение года. Хотелось бы, чтобы все, кому интересны децентрализованные социальные сети, вынесли из неё что-то новое. "
SBKarr;Технопорно с WebAssembly;https://habr.com/ru/post/345450/;По просьбам трудящихся, пишу о внутреннем устройстве WebAssembly. WebAssembly — байткод для стековой виртуальной машины. Значит, для запуска кода такой нужны интерпретатор, стек и хранилище кода. Если мы хотим взаимодействовать с внешним миром, нужен интерфейс к внешней машине, хосту. Дополнительно стандарт определяет две структуры: непрерывную память и таблицы. В версии MVP стандарта их может быть по одной штуке каждого, или не быть вовсе. В итоге, наш технобордель выглядит так:   Интерпретатор Интерфейс к хосту Стек Хранилище кода Память Таблица  Займёмся делом!
eao197;Трехэтажные C++ные шаблоны в реализации встраиваемого асинхронного HTTP-сервера с человеческим лицом;https://habr.com/ru/post/345788/;"Наша команда специализируется на C++ проектах. И нам время от времени приходилось создавать HTTP-точки входа в C++ компоненты. Для чего использовались разные инструменты. Тут были и старые-добрые CGI, и различные встраиваемые библиотеки, как сторонние, так и самописные. Все это работало, но всегда оставалось ощущение, что следовало бы делать такие вещи и проще, и быстрее, и производительнее.  В итоге мы решили, что пора прекращать смотреть по сторонам и нужно попробовать сделать что-то свое, с преферансом и куртизанками кроссплатформенностью, асинхронностью, производительностью и человеческим отношением к конечному пользователю. В результате у нас получилась небольшая C++14 библиотека RESTinio, которая позволяет запустить HTTP-сервер внутри C++ приложения всего несколькими строчками кода. Вот, например, простейший сервер, который на все запросы отвечает «Hello, World»:  #include <restinio/all.hpp>  int main() {    restinio::run(       restinio::on_this_thread()          .port(8080)          .address(""localhost"")          .request_handler([](auto req) {             return req->create_response().set_body(""Hello, World!"").done();          }));     return 0; } В реализации RESTinio активно используются C++ные шаблоны и об этом хотелось бы сегодня немного поговорить."
pkruglov;На память о 2017-м: лучшие посты в нашем блоге за год;https://habr.com/ru/company/mailru/blog/345790/; Pixel Jeff Новогодние традиции — это святое. Оливье, шампанское, мандарины, ёлка и подведение итогов за год. В 2017-м мы опубликовали 212 постов (а еще 90 в нашем блоге на Гиктаймс), получили более 6000 комментариев, а количество просмотров — более 3,5 млн! Так что мы собрали для вас 30 лучших постов за этот год, если вы вдруг что-то пропустили, или если захотите что-то перечитать. И в конце будет бонус — несколько наших лучших постов с Гиктаймса.
ru_vds;Фронтенд-2017: о самом важном;https://habr.com/ru/company/ruvds/blog/345792/;"Много всего произошло в 2017-м, на самом деле — и подумать страшно — сколько всего случилось. Всем нравится шутить о том, как быстро всё меняется в разработке фронтенда, и в последние несколько лет это, вероятно, так и было. Рискуя быть неоригинальным, хочу сказать, что в 2017-м всё было не так, как прежде. Тенденции веб-разработки стабилизировались. В частности, популярные библиотеки стали, в большинстве своём, ещё популярнее, вместо того, чтобы сдвинуться на второй план под натиском конкурентов. В целом же веб-разработка стала гораздо более зрелой средой, чем раньше.    В этом материале мы поговорим о некоторых важных событиях, которые произошли в этом году в экосистеме клиентской веб-разработки, обращая особое внимание на общие тренды."
mr_elzor;Готовим рабочее окружение для Erlang проекта;https://habr.com/ru/post/346254/;Введение Многие книги по столярному и плотницкому делу начинаются с рассказа о правильной организации рабочего места и инструмента. Мне хочется верить, что навыки разработки – это тоже культура и мастерство. Рациональный подход к рабочему окружению позволяет снизить стоимость разработки и последующей доработки проекта благодаря раннему обнаружению проблем и повышению производительности труда разработчика. Тема, конечно же, обширна, и я планирую написать цикл статей:
alinatestova;Как это работает: Деревья Меркла в биткойн сети;https://habr.com/ru/company/bitfury/blog/346398/;"Узлы в блокчейн-сети анонимны и работают в условиях отсутствия доверия. В этой ситуации встает проблема верификации данных: как проверить, что в блоке записаны корректные транзакции? Для оценки каждого блока понадобится большое количество времени и вычислительных ресурсов. Решить проблему и упростить процесс помогают деревья Меркла.  Что это такое, как используется, какие существуют альтернативы — расскажем далее.  "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №297 (8 — 14 января 2018);https://habr.com/ru/company/zfort/blog/346636/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
ProductivityInside;Крупнейшие мероприятия 2018 года: разработка;https://habr.com/ru/company/productivity_inside/blog/346736/;"Как и было обещано, представляем вторую часть подборки крупных и полезных для IT-специалистов мероприятий 2018 года — или, по крайней мере, первой его половины. В этом выпуске мы сосредоточимся на разработке в разных ее проявлениях: мобильные приложения, веб, блокчейн, большие данные, облака, высоконагруженные системы и так далее. Более мелкие события местного значения мы планируем и дальше освещать в регулярных дайджестах; что же касается зарубежных конференций, ссылки на расширенный их список вы можете найти в конце статьи.  "
romas1982;Обзор лучших докладов с HighLoad++ 2017;https://habr.com/ru/company/oleg-bunin/blog/346934/;"В ближайших нескольких статьях я расскажу о лучших (по мнению участников) докладах HighLoad++ 2017. Организаторы любезно открыли доступ к видеозаписям, которые вы сможете прямо тут и посмотреть.  Goth2Boss: ломка и отходняки при переходе из инженера в тимлиды / Артем Каличкин   Для меня это открытие года — на мощной технологической конференции первое место занимает доклад, хоть и от технаря, но про УПРАВЛЕНИЕ. Конечно можно рассуждать на тему того, что гуманитарии более охотно ставят оценки и по-умолчанию более лояльная аудитория, но факт остаётся фактом. "
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №299 (22 — 28 января 2018);https://habr.com/ru/company/zfort/blog/347728/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
dartmessiah;Навыки, инструменты, требования — масштабное исследование HackerRank о рынке разработчиков 2018;https://habr.com/ru/company/pixonic/blog/347782/;"  HackerRank в этом месяце предоставили интересную аналитику на основе опроса 39 441 разработчика. В опросе поднимается много актуальных вопросов про состояние IT-рынка, востребованные качества среди разработчиков и то, что ищут программисты среди потенциальных работодателей. Отчет получился интересным, многим может быть полезно.  Под катом очень много картинок.  1. Пролог  Hello world В будущем то, как мы все работаем, изменится. Кем бы вы ни работали, для каждого важно научиться программированию, ведь именно оно развивает вычислительное мышление (или computational thinking), которое играет важную роль в принятии решений. Обычные резюме уйдут в прошлое и на первый план в вопросах найма новых сотрудников выйдут именно их умения.  Мы запустили HackerRank в конце 2012, чтобы помогать разработчикам найти работу, которая будет им по душе. За эти годы мы сильно выросли — сейчас в нашем сообществе 3,2 млн человек и 2% всех новых наймов разработчиков в прошлом году были сделаны с нашей помощью.   И сейчас мы впервые провели опрос среди нашего сообщества разработчиков, чтобы разобраться в том, как именно они работают и как они этому научились: когда они впервые запушили код в репозиторий, как они научились кодить, расспросили о любимых языках программирования и фреймворках, узнали, чего они хотят от работодателей. А еще мы спросили HR-менеджеров о том, что именно они ищут в кандидатах на позиции разработчиков и о многом другом. Мы опросили 39 441 человека и готовы поделиться знаниями, которые получили в результате.  Вы знали, что 1 из 4 разработчиков научился кодить до того, как получил водительские права?  Надеемся, что наш доклад будет для вас полезным.  Вивек Равинскар, Co-founder/CEO HackerRank"
Overlor_ME;Геймдизайнер. Кто это?;https://habr.com/ru/post/347948/;«Большинство игроков хотят, чтобы игра вознаграждала их за смекалку, а не наказывала в бессмысленном и случайном порядке. Игроки любят вызов и ничего не имеют против поражения, — если только это честное поражение»* (с) GamedesignerЗдравствуйте, в этой статье я расскажу про профессию игрового дизайнера, кто это такой, что он делает и что нужно, чтобы им стать. Надеюсь, будет интересно и со временем я буду выпускать все больше и больше подобных статей и объяснять их на собственном опыте.
maxpy;Pygest #22. Релизы, статьи, интересные проекты, пакеты и библиотеки из мира Python [18 января 2018 — 4 февраля 2018];https://habr.com/ru/post/348384/;" Всем привет! Это уже двадцать второй выпуск дайджеста на Хабрахабр о новостях из мира Python. В этом выпуске вы найдете статьи о MicroPython, сравнение производительности Python, Numba и C ++, основах веб скрапинга и многое другое.   Присылайте свои интересные события из мира Python.   С предыдущим digest можно ознакомиться здесь.  "
batmandarkside;Ускоренный курс по ассемблерам;https://habr.com/ru/company/raiffeisenbank/blog/348738/;"Это перевод одной из статей Lin Clark. Если вы не читали остальные, мы рекомендуем начать с начала.   Чтобы понять, как работает WebAssembly, неплохо понимать, что такое код на ассемблере и как компиляторы его генерируют. В статье о JIT я сравнивала взаимодействие с компьютером со взаимодействием с инопланетянином. "
eao197;Задействовать для простых тестов наследование, полиморфизм и шаблоны? Почему бы и нет…;https://habr.com/ru/post/348880/;"Язык C++ сложен. Но его сложность проистекает из сложности задач, которые решаются с помощью C++. Каждая фича, которая была добавлена в C++, была добавлена не просто так, а для того, чтобы дать возможность справиться к какой-то проблемой. Ну а уж сочетание существующих в C++ фич делает язык чрезвычайно мощным инструментов. Конкретному примеру того, как это происходит на практике, и посвящена данная статья.  Добавлю еще, что одним из мощных стимулов к написанию данной статьи стало то, что очень часто на глаза попадаются объемные флеймыобсуждения на тему «ООП не нужно» и, особенно, «шаблоны-дженерики на практике почти никогда не нужны». Мне, как далеко не молодому программисту, начинавшему в 1990-ом как раз с инструментов, в которых не было ни ООП, ни шаблонов-дженериков, странно сталкиваться с подобными точками зрения. Но, чем дальше, тем чаще с ними сталкиваешься. Особенно со стороны приверженцев новых языков программирования, вроде Go или Rust-а.  Сложно сказать, чем это вызвано. Может быть людей перекормили ООП (а это так и было)… Может быть задачи за несколько минувших десятилетий сильно поменялись (а это так и есть)… Может быть и просто «вот и выросло поколение»… Как бы то ни было, можно попробовать на примере из реальной жизни показать, что все не так однозначно ©.  Итак, о чем пойдет речь?"
shurup;Conduit — легковесный service mesh для Kubernetes;https://habr.com/ru/company/flant/blog/349496/;В конце прошлого года компания Buoyant, уже прославившаяся выпуском одного из популярнейших решений категории service mesh (т.е. «сетки», обеспечивающей взаимодействие между сервисами) — Linkerd, — анонсировала своё второе детище под названием Conduit. Можно было бы удивиться, что новый продукт — это ещё один service mesh с открытым кодом, но есть тому причины.  
barbalion;Как много разработчиков и как мало программистов…;https://habr.com/ru/post/349500/;"Возможно кто-то воспримет эту статью, как очередное нытье на тему того ""как плохо жить"". Но я все же напишу ее с надеждой, что кого-то это сподвигнет на самосовершенствование. И, вдруг, текущий релиз нашей разумной (хотелось бы верить) цивилизации станет чуточку стабильнее. Причиной моего недовольства стал очередной неудачный опыт работы с фрилансером, именующим себя ""мобильным разработчиком"". Человеку была поставлена задача, он ее даже выполнил — приложение как-то работало, хотя некоторые баги с удалением объектов навевали грустные мысли о неправильной работе с индексами списков. А это — плохая примета. Если человек не умеет работать с удалением из списков, то это скорее всего только начало проблем, и далее стоит ожидать худшего. "
dm_wrike;Как сделать Java код проще и нагляднее;https://habr.com/ru/company/wrike/blog/349652/;"Вы все пишите блистательно, а я потом добавлю шероховатости. х/ф Трамбо  Написать Java код не просто, а очень просто. Трудности начинаются, когда его запускают или, хуже того, если его требуется изменить. Открыв свой код двухлетней давности, каждый хотя бы раз задавался вопросом: кто же все это написал? Мы в Wrike разрабатываем продукт и делаем это уже более десяти лет. Подобные ситуации случались с нами неоднократно. За это время мы выработали ряд принципов в написании кода, которые помогают нам сделать его проще и нагляднее. Хотя в нашем подходе нет ничего экстраординарного, он во многом отличается от того, как принято писать код на Java. Тем не менее, кто-то может найти нечто полезное в нашем подходе и для себя.  "
dukebarman;Анонс Google Summer of Code 2018 для проекта radare2;https://habr.com/ru/post/350044/; В этом году мы решили возобновить публикации результатов предыдущего и анонсировать новый GSoC для проекта с открытым исходным кодом radare2 на ресурсе Habrahabr.
maxfarseer;Вышел Webpack 4 Legato;https://habr.com/ru/post/350224/;"Мы рады сообщить, что сегодня стал доступен webpack 4 (Legato). Его можно скачать через npm или yarn, выполнив: $> yarn add webpack webpack-cli --dev или $> npm i webpack webpack-cli --save-dev"
alextretyak;Каркас нового языка программирования;https://habr.com/ru/post/350694/;" geektimes.ru/post/100171:   I'm always delighted by the light touch and stillness of early programming languages. Not much text; a lot gets done. Old programs read like quiet conversations between a well-spoken researcher and a well-studied mechanical colleague, not as a debate with a compiler. Who'd have guessed sophistication bought such noise?  – Dick Gabriel  ...  The standard languages (Java, C++) are statically typed.  Most outsider languages (Ruby, Python, JavaScript) are interpreted and dynamically typed.  Perhaps as a result, non-expert programmers have confused ""ease of use"" with interpretation and dynamic typing.  The world has split into a false dichotomy: nice, interpreted, dynamic versus ugly, compiled, static.  Time to put things right. Меня всегда восхищала лёгкость и спокойствие ранних языков программирования. Немного текста; но делается многое. Старые программы читаются как тихие разговоры между хорошо говорящим исследователем и хорошо обученным механическим коллегой, а не как дебаты с компилятором. Кто бы мог подумать что изощрённость принесёт так много шума?   — Дик Габриел  ...  Стандартные языки (Java, C++) — статически типизированные.  Большинство языков-аутсайдеров (Ruby, Python, JavaScript) — интерпретируемые и динамически типизированные.  Возможно в результате этого программисты неспециалисты путают ""простоту использования"" с интерпретируемостью и динамической типизацией.  Мир разделился ложной дихотомией: приятные, интерпретируемые, динамические против уродливых, компилируемых, статических.  Пришло время чтобы исправить эту ситуацию.   На этой пафосной ноте перейду к примерам на новом языке программирования."
olegchir;Прокачиваем производительность C# с Федерико Луисом;https://habr.com/ru/company/jugru/blog/352362/;Сегодня мы поговорим о производительности в C#, о способах прокачать её до неузнаваемости. Задача этой статьи — продемонстрировать такие способы повышения производительности, которые, при необходимости, вы смогли бы использовать самостоятельно. Однако эти методики не являются универсальными — вы не сможете использовать их в качестве общего решения любой задачи. Они хороши при наличии вполне конкретных сценариев использования, о которых пойдет речь ниже. В качестве прототипа статьи был выбран доклад Федерико Луиса, основателя компании Corvalius (они занимаются R&D). Работая над движком базы данных для одного из клиентов, они посвятили около четырёх лет задачам оптимизации. Такое количество времени требуется для того, чтобы применить разного рода техники и достичь хороших показателей оптимизации. Требуется выявить все проблемы и узкие места, проследить поведение софта в соответствии со всеми имеющимися метриками и так далее. Примеры из этой статьи основаны на работе над RavenDB 4.0 (известная NoSQL база для .NET), которую компания Федерико тюнила до уровня наносекунд во всевозможных сложных кейсах. Все примеры, которые встретятся вам в ходе рассказа (плюс некоторые дополнительные), доступны в специальном репозитории на GitHub. Осторожно, трафик! В этом посте присутствует огромное количество картинок — слайдов и скриншотов с видео в формате 720p. На слайдах присутствует важный для понимания статьи код. 
32bit_me;Что нового в LLVM;https://habr.com/ru/post/352776/;"LLVM 6 уменьшает опасность Spectre, имеет улучшенную поддержку Windows и CPU компании Intel, а также включает WebAssembly в число поддерживаемых целевых платформ.    Инфраструктура компилятора LLVM прошла путь от технически любопытной вещи до живой части современного ландшафта программного обеспечения. Это то ядро, которое стоит за компилятором Clang, за компиляторами языков Rust и Swift, и предоставляет широкие возможности для разработки компиляторов для новых языков."
alexzfort;Дайджест свежих материалов из мира фронтенда за последнюю неделю №309 (2 — 8 апреля 2018);https://habr.com/ru/company/zfort/blog/353070/;Предлагаем вашему вниманию подборку с ссылками на новые материалы из области фронтенда и около него.  
alinatestova;Кроме криптовалют: для чего еще используется блокчейн;https://habr.com/ru/company/bitfury/blog/353350/;"По данным Research and Markets, размер мирового блокчейн-рынка к 2023 году вырастет до 6 млрд долларов при среднегодовом темпе роста 48%. В течение последних двух лет мы наблюдали рост инвестиций в компании, занимающиеся разработкой блокчейн-приложений для финансового сектора.  Например, компания Chain из Сан-Франциско, создающая блокчейн-решения для кредитно-финансовых институтов, привлекла почти 44 млн инвестиций от разных организаций, включая Nasdaq и Visa. Другой пример — Coinbase, предлагающая кошельки для криптовалют, получила 217 млн долларов от Andreessen Horowitz, Нью-Йоркской фондовой биржи и др.  Однако есть другие сферы, в которых технология блокчейна находит применение, например, медицина, а также нотариальные и государственные услуги. О том, как блокчейн меняет облик этих областей и какие проекты развиваются уже сегодня, расскажем далее.  "
olegator99;Поиск по сайту с Reindexer — это просто. Или как сделать «instant search» по всему Хабрахабр-у;https://habr.com/ru/post/354034/;"Всем привет, В предыдущей статье я писал о том, что мы сделали новую in-memory БД — быструю и с богатыми функциональными возможностями — Reindexer. В этой статье хочу рассказать как при помощи Reindexer можно реализовать полнотекстовый поиск по сайту, написав минимум application кода.  Вообще, полнотекстовый поиск по сайту — эта важная фича, в наше время, обязательная, для любого интернет сайта. От качества и скорости работы поиска зависит как быстро пользователи найдут интересующую их информацию или товары, которые они планируют приобрести."
NoName_2017;Релиз Fedora 25;https://habr.com/ru/post/357556/;Fedora Project рада представить следующий релиз своего дистрибутива — Fedora 25. Fedora — это большое сообщество которое работает каждый день для продвижения свободного программного обеспечения. 
SLY_G;У разработчиков OS X популярнее, чем Linux – и другая статистика со Stack Overflow;https://habr.com/ru/post/357646/;"Популярный ресурс для разработчиков Stack Overflow постоянно проводит опросы, касающиеся компьютерных разработчиков и их профессии, и периодически подводит итоги этих опросов. Сейчас она представила подборку ответов на 45 вопросов, на которые ответило более 50000 разработчиков из 173 стран мира. Все подробности можно найти на странице опроса, а мы рассмотрим самые интересные его пункты.  Технологии  Самой популярной технологией уже третий год остаётся JavaScript. Когда-то он проигрывал SQL, которая сейчас находится на 2-м месте. За ней следует Java.   Но при этом нравятся разработчикам совсем другие технологии – в тройку лидеров по симпатиям попали Rust, Swift и F#.  Область деятельности Большинство разработчиков, отвечавших на вопросы, занимаются разработкой веб-сервисов полного цикла. На втором месте – разработчики бэкенда, а далее – мобильные разработчики (не считая студентов, пока не имеющих постоянной работы).  А вот лучше всего оплачиваются Spark, Scala и Cassandra. "
phillennium;Открытая трансляция главного зала HolyJS;https://habr.com/ru/company/jugru/blog/358660/;"  Послезавтра в Петербурге начнётся двухдневная конференция HolyJS. Мы будем рады видеть всех на мероприятии, но и для отсутствующих тоже кое-что припасли: доклады первого зала можно будет смотреть бесплатно в прямом эфире на YouTube.  Хотя это только часть от общей программы конференции, попало много интересного для самых разных слушателей: тут и «приключения во фронтенде», и производительность Node.js, и мобильный веб, и так далее вплоть до майнинга крипты в браузере.  Сразу сообщаем заветную ссылку: holyjs-piter.ru/online-free. А под катом приводим описания докладов, попавших в бесплатную трансляцию — можно пробежаться по ним и быстро понять, что из этого вам интересно."
NeonMercury;Использование std::optional в С++17;https://habr.com/ru/post/372103/;" Давайте возьмём пару от двух типов <YourType, bool> — что вы можете сделать с композицией подобного рода? В этой статье я расскажу вам про std::optional — новый вспомогательный тип, добавленный в C++17. Это обёртка для вашего типа и флаг показывает, инициализировано ваше значение или нет. Давайте посмотрим, где это может быть полезно. Вступление Добавлением логических флагов к другим типам вы можете достичь то, что называется ""Nullable типы"". Как было сказано ранее, флаг используется для обозначения того, доступно значение или нет. Такая обёртка выразительно представляет объект, который может быть пустым (не через комментарии :)."
SLY_G;Опрос от StackOverflow определил самые доходные и самые популярные IT-технологии;https://habr.com/ru/post/378775/;"Известный ресурс для программистов и других представителей IT-профессий StackOverflow провёл опросы на тему нужности, полезности и доходности языков программирования. Результаты приведены в подробном отчёте «Разработчик 2015». Попробую остановиться на наиболее интересной статистике.  Популяция По количеству человек, принявших участие в опросе, лидируют США и Европейские страны. При этом, как известно, больше всего людей живёт в Китае и Индии.   "
iG0Lka;Модернизация мыши — добавление наклонов колеса, замена электроники;https://habr.com/ru/post/390453/;"  В моих руках побывало много мышей, но самые удобные корпуса для меня всего два — «Oklick Hunter» и «DeathAdder». «DeathAdder» появился у меня, ещё в далеком 2006 году. Служил мне верой и правдой несколько лет, потом были разные мыши, последние годы пользовался «Хантером», вернее W-mouse в корпусе «Хантера», а DeathAdder пылился в коробке.  Для меня, основной недостаток DeathAdder, маленькое количество дополнительных кнопок и отсутствие наклонов колеса. На наклоны колеса, при работе в windows, у меня назначены Copy / paste. Это очень удобно. В игре наклон колеса вправо, я использую как обнаружение целей, т.е. указательный палец постоянно «тремолит» колесо вправо. Я к этому очень привык и мышь без наклонов колеса для себя не мыслю. Поэтому идея переделать колесо в DeathAdder мне не давала покоя. Несколько раз разбирал его, прикидывал и собирал обратно т.к. затея казалась нереальной… Но как говорится глаза бояться, а руки делают — примерно полгода назад, стал более активно продумывать варианты и все же решился на переделку… Осторожно, трафик! много фотографий  "
marks;«Лазерный удалитель» уничтожит ржавчину за секунды;https://habr.com/ru/post/391963/;"  Любой из нас знает, что такое ржавчина. Бороться с ней довольно сложно, а если ржавчина уже покрыла металлическое изделие, на ликвидацию слоя ржавчины нужно потратить немало времени и сил. Придется использовать и механические средства (например, жесткая проволочная щетка), и некоторые химические вещества.   Но ведь мы живем в новом веке, где сплошь и рядом встречаются технологии, устройства, еще несколько лет назад считавшиеся фантастикой. Полеты к другим планетам, попытки создания ядерного двигателя для ракет, лазеры — все это реалии сегодняшнего дня. Что касается лазеров, то их как раз и предлагается использовать для ликвидации ржавчины. Речь идет о «ручном удалителе», работу которого показали на видео.  "
frekenbok;Интервью без сучка и задоринки: как программисту успешно пройти собеседование;https://habr.com/ru/company/wirex/blog/392027/;"Пост подготовлен специально для корпоративного блога Wirex — компании, предлагающей удобное мобильное финансовое приложение для управления личными счетами. Изначально статья задумывалась как подготовительный материал, который автор отправляет своим кандидатам, но в итоге последний решил опубликовать его в открытом источнике, а мы, посчитав тему интересной, сделали перевод для вас, уважаемые читатели.  Тот факт, что вы являетесь хорошим программистом, играет поразительно малую роль при прохождении собеседования. Для того чтобы ваша работа была продуктивной, вам нужно уметь решать огромные, склонные разрастаться проблемы неделями и месяцами. Каждый вопрос на собеседовании, напротив, длится менее одного часа. Для того чтобы хорошо показать себя на интервью, вы должны знать, как быстро решать небольшие проблемы под давлением, при этом ясно излагая свои мысли. Это совершенно другое умение (в то же время я не говорю, что способность с легкостью решать задачи на собеседовании не имеет никакой связи с навыками программирования. Просто эта связь выражена куда слабее, чем считают многие компании, и именно другими факторами, отличными от специализированных умений, объясняется столь внушительное расхождение). "
marks;Google разрабатывает новую операционку Fuchsia, но никто не знает, зачем;https://habr.com/ru/post/396859/;" Фуксия — небольшой вечнозеленый кустарник семейства кипрейных с красивыми цветками. А еще это новый проект Google  Большинство операционных систем и программных платформ, разработанных корпорацией Google, основаны на ядре Linux. В число таких продуктов компании входят Chrome OS, Android, Chromecast. Фактически, Linux является центром экосистемы программного обеспечения «корпорации добра».   В то же время, ядро Linux далеко не всегда является идеальной базой для специализированного ПО. Особенно это актуально для встроенных устройств с ограниченным программным обеспечением. Сейчас несколько инженеров Google работает над созданием новой операционной системы, предназначенной для таких устройств. Исходный код выкладывается в новый репозиторий с названием Fuchsia (фуксия). "
marks;Новую ОС Fuchsia от Google скомпилировали и изучили;https://habr.com/ru/post/396891/;"  Ровно неделю назад в сети появилась информация о новой операционной системе, которую разрабатывает корпорация Google. Эта ОС, в отличие от прошлых проектов компании, не основана на Linux. Fuchsia разрабатывают с нуля, взяв в качестве основы лишь (L)ittle (K)ernel и Magenta.  Изначально специалисты предположили, что новинка предназначена исключительно для «Интернета вещей». Но оказалось, что Fuchsia подходит и для установки на полноценные рабочие станции. Так что это все-таки за проект и зачем он нужен? Ситуацию немного прояснил Гэри Симс (Gary Sims), скомпилировавший и изучивший особенности этой операционной системы.  "
ragequit;Игроки в No Man's Sky массово требуют возврата денег;https://habr.com/ru/post/397211/;"Проект No Man's Sky ожидало множество игроков по всему миру. Дебютный трейлер на E3 2014 года завораживал, а разработчики обещали огромную галактику с уникальными мирами и полной свободой действий. Однако, релиз оказался провальным. Неизвестно, что стало тому причиной — неспособность вовремя закончить разработку, просто переоценка собственных возможностей, а, возможно, и наглая ложь руководителей компании-разработчика. Факт остается фактом — No Man's Sky оказалась самым громким провалом последних нескольких лет.  Вместо открытого и разнообразного мира игроки получили, как многие утверждают, симулятор сбора ресурсов. Вся суть игры сводится к занудному гринду: перелеты между планетами и системами, сбор минералов, их продажа, заправка корабля и продолжение полета. Конечная цель — центр Галактики — достижима, но за это достижение игрок получит аналог плевка в лицо. В центре нет ничего. Есть анимация на пару минут, игрока выбрасывает в новую галактику, и игру предлагают начать сначала. Строительство а-ля Minecraft (ну или на худой конец Rust) в игре отсутствует.  Кроме этого, вместо миллиардов разнообразных, случайно сгенерированных планет, игроку доступно менее десятка унылых миров с передвинутыми с места на место камнями. Ну, а о фауне и, частично, геймплее, все говорит весьма популярный в последние дни ролик:   "
spc;Каждая погода хороша: индикатор погоды, который косплеит;https://habr.com/ru/post/399409/;"  Давайте представим, что после стычки с Дэйвом Боуменом остатков некогда могучего интеллекта HAL 9000 хватило, чтобы вернуть Discovery One к Земле и под лозунгом «смерть всем человекам» разбить его о планету, чтобы впредь неповадно было так поступать с компьютерами.  Разразившийся катаклизм, конечно, уничтожил все разумное человечество, и остались только особи вроде меня — с молотком в одной руке и Arduino — в другой. Поэтому неудивительно, что найденный в горе еще дымящихся остатков космического корабля таинственный прибор означенный представитель человечества может применить разве что в метеостанции. Ну и поделом ему! "
randall;Образовательные стриминговые каналы программистов;https://habr.com/ru/company/mailru/blog/409379/;" Источник Twitch Удивительно, но люди действительно хотят смотреть на то, как вы пишите код. В 2014 году появился даже специальный сайт Livecoding.tv (сейчас он называется LiveEdu), на котором каждый желающий разработчик может всему миру показать процесс работы в режиме реального времени. Идея устраивать трансляции с новорожденным кодом появилась гораздо раньше – стримеры занимались этим на Twitch, YouTube и standalone-площадках. В подборке представлены активные (за редким исключением) стримеры-кодеры, а также методы поиска интересных лично для вас трансляций."
olegchir;Выходные, которые нельзя пропустить. TechTrain в Питере;https://habr.com/ru/company/jugru/blog/412541/;Будучи разработчиком, работая над узкоспециализированными проектами, со временем перестаешь разбираться в окружающем мире. Это общая проблема для всех нас. Расскажу пару слов о том, как это бывает и как мы придумали это побороть.  Осторожно, трафик! Под катом есть фоточки в довольно неплохом качестве. 
modos189;The Messenger of Everything;https://habr.com/ru/post/413437/;У всех существующих мессенджеров есть свои плюсы и минусы, но каждый из них тянет одеяло на свою сторону из-за несовместимости с другими – и от этого страдают пользователи. Единым стандартом мог бы стать XMPP, но он, в отличии от E-Mail, появился относительно поздно и не успел набрать достаточную аудиторию, чтобы корпорации не могли уже от него отказаться. Ведь там быстро поняли, что без удержания аудитории внутри собственной экосистемы много не заработать. Да и кроме того, надо признать, у XMPP было достаточно недостатков из-за обилия расширений, многие из которых, несмотря на свою важность, оставались в экспериментальном статусе, а какие-то и вовсе дублировали друг друга. Пожив в «новом дивном мире» десятка мессенджеров в смартфоне, и ощутив все недостатки такого положения дел, мы наконец готовы к чему-то новому. И да, нам нужен новый стандарт!
PatientZero;Meta Crush Saga: игра, выполняемая во время компиляции;https://habr.com/ru/post/414465/;" В процессе движения к долгожданному титулу Lead Senior C++ Over-Engineer, в прошлом году я решил переписать игру, которую разрабатываю в рабочее время (Candy Crush Saga), с помощью квинтэссенции современного C++ (C++17). И так родилась Meta Crush Saga: игра, которая выполняется на этапе компиляции. Меня очень сильно вдохновила игра Nibbler Мэтта Бирнера, в которой для воссоздания знаменитой «Змейки» с Nokia 3310 использовалось чистое метапрограммирование на шаблонах.  «Что ещё за игра, выполняемая на этапе компиляции?», «Как это выглядит?», «Какой функционал C++17 ты использовал в этом проекте?», «Чему ты научился?» — подобные вопросы могут прийти к вам в голову. Чтобы ответить на них, вам придётся или прочитать весь пост, или смириться со своей внутренней ленью и посмотреть видеоверсию поста — мой доклад с Meetup event в Стокгольме:   Примечание: ради вашего психического здоровья и из-за того, что errare humanum est, в этой статье приведены некоторые альтернативные факты. "
ru_vds;Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация;https://habr.com/ru/company/ruvds/blog/415269/;" [Советуем почитать] Другие 19 частей цикла Часть 1: Обзор движка, механизмов времени выполнения, стека вызовов Часть 2: О внутреннем устройстве V8 и оптимизации кода Часть 3: Управление памятью, четыре вида утечек памяти и борьба с ними Часть 4: Цикл событий, асинхронность и пять способов улучшения кода с помощью async / await Часть 5: WebSocket и HTTP/2+SSE. Что выбрать? Часть 6: Особенности и сфера применения WebAssembly Часть 7: Веб-воркеры и пять сценариев их использования Часть 8: Сервис-воркеры Часть 9: Веб push-уведомления Часть 10: Отслеживание изменений в DOM с помощью MutationObserver Часть 11: Движки рендеринга веб-страниц и советы по оптимизации их производительности Часть 12: Сетевая подсистема браузеров, оптимизация её производительности и безопасности Часть 13: Анимация средствами CSS и JavaScript Часть 14: Как работает JS: абстрактные синтаксические деревья, парсинг и его оптимизация Часть 15: Как работает JS: классы и наследование, транспиляция в Babel и TypeScript Часть 16: Как работает JS: системы хранения данных Часть 17: Как работает JS: технология Shadow DOM и веб-компоненты Часть 18: Как работает JS: WebRTC и механизмы P2P-коммуникаций Часть 19: Как работает JS: пользовательские элементы  Все мы знаем о том, что JavaScript-код веб-проектов может разрастаться до прямо-таки огромных размеров. А чем больше размер кода — тем дольше браузер будет его загружать. Но проблема тут не только во времени передачи данных по сети. После того, как программа загрузится, её ещё надо распарсить, скомпилировать в байт-код, и, наконец, выполнить. Сегодня мы представляем вашему вниманию перевод 14 части серии материалов об экосистеме JavaScript. А именно, речь пойдёт о синтаксическом анализе JS-кода, о том, как строятся абстрактные синтаксические деревья, и о том, как программист может повлиять на эти процессы, добившись повышения скорости работы своих приложений.  "
shurup;Play with Kubernetes — сервис для практического знакомства с K8s;https://habr.com/ru/company/flant/blog/415381/;Около года мы писали об интересном онлайн-сервисе для самообразования в мире контейнеров — Play with Docker. Его авторы, поддерживаемые компанией Docker Inc, не стояли на месте и последовали за трендами, что мы наблюдаем не только в «узком кругу» Docker, но и в индустрии в целом: они запустили новый аналогичный сервис, посвящённый уже Kubernetes. Итак, встречайте Play with Kubernetes (PWK)!  
SergeySib;Что не так с std::visit в современном C++;https://habr.com/ru/post/415737/;"Сигма-тип и вы Давайте поговорим о простой, но мощной концепции в программировании — сигма-типах.  Сигма-тип (тип-сумма, меченное объединение) может содержать значения одного и только одного из нескольких типов. Например, рассмотрим настройки в INI-подобном файле конфигурации. Пусть каждая настройка может быть строкой, целым или булевым значением. Если бы мы хотели сделать свою библиотеку на C++, мы бы написали что-то вроде этого:"
AlexSerbul;Какой язык программирования учить в 2018 году и почему именно его?;https://habr.com/ru/company/bitrix/blog/417397/;Если Вы настойчиво хотите попасть в команду разработчиков компилятора или в «мир Дикого Запада» — то смело выбирайте и учите топовый язык программирования из TIOBE и лучше всего: на уровне его спецификации. А если серьезно, то сейчас в отрасли все так запутанно с логикой и выводами, столько маркетинга и воды, что самая выигрышная стратегия — включить свои собственные мозги и сделать экспресс-переоценку технических ценностей, к которым мы так привыкли. В посте я постараюсь максимально ясно сориентировать начинающих свою карьеру разработчиков по рискам выбора технологий и сделать правильные и далеко (далеко-далеко) идущие выводы.
Nkvlk;Наиболее востребованные языки программирования – 2018;https://habr.com/ru/company/hh/blog/418079/;Очередная статистика от hh.ru под катом. Вкратце — очень хотелось посчитать, на каких языках чаще всего пишут отечественные разработчики и какие языки чаще других ищут работодатели. Итого — посчитал, что указывали в вакансиях и в резюме в первом полугодии 2018 и 2017 годов. Получилось что получилось.   
m1rko;WebAssembly — это возвращение апплетов Java и Flash?;https://habr.com/ru/post/418653/;В последней статье по WebAssembly я сделал следующее утверждение: Некоторые сравнивают WebAssembly с Java-апплетами. В определённом смысле они правы, но с другой стороны сильно ошибаются. Как-нибудь я напишу статью о различиях, но пока поговорим о сходстве. В некотором смысле WebAssembly — иной способ выполнения того, для чего предназначалась JVM: это обычная виртуальная машина для кроссплатформенного ПО. Многие люди выразили заинтересованность в этой теме, так что давайте рассмотрим её подробнее! В этой статье сравним WebAssembly с тремя технологиями: Flash, Java-апплеты и немножко с PNaCL. Кроме того, статья сосредоточиться на использовании в вебе, хотя раньше мы рассматривали варианты использования WebAssembly в офлайне. Но о таком сравнении поговорим позже. Наконец, эта статья похожа на поедание тапаса [испанская закуска из множества разных компонентов — прим. пер.], здесь куча маленьких разделов. Мне кажется, она слегка коротковата, но в то же время я пытаюсь вести блог, а если продолжать её расширять, то это займёт вечность, так что извините.
it_man;WireGuard «придет» в ядро Linux — почему?;https://habr.com/ru/company/cloud_mts/blog/419769/;В конце июля разработчики VPN-туннеля WireGuard предложили набор патчей, которые сделают их ПО для организации VPN-туннелей частью ядра Linux. Однако точная дата реализации «задумки» пока остается неизвестной. Под катом поговорим об этом инструменте подробнее.  
sannikovdmitry;Запускаем Mini AI Cup #3. Битва машин в тесных закрытых пространствах;https://habr.com/ru/company/mailru/blog/421397/;"  С 2012 года проводим ежегодное соревнование по программированию искусственного интеллекта Russian AI Cup. В этом году оно начнётся немного позже — не в ноябре, а в середине декабря. А для тех, кто хочет подготовиться или оценить свой уровень, регулярно проводим мини-соревнования Mini AI Cups. Задачи немного проще предлагаемых на RAIC, но ничуть не менее захватывающие.   И сегодня открываем регистрацию на Mini AI Cup #3 по мотивам Drive AHEAD."
m1rko;Хватит разрабатывать софт с запасом;https://habr.com/ru/post/421895/;"Или делайте это правильно  Если выбрать одну идею, которая убивает больше всего продуктов, то это создание запаса на будущее (future proofing).  Обычно идея проявляется по схеме.  Нам нужен {X}, и хотя сделать {Y} гораздо легче, но при наступлении {Z} первый вариант упростит нам жизнь. Где {Z} — событие, которое может произойти в далёком будущем.  Вот несколько примеров:   Для инфраструктуры нужны Kubernetes и Docker, хотя один большой сервер гораздо проще, но когда придётся масштабироваться до 11-ти серверов, это упростит нам жизнь. Для обработки данных нужен распределённый дизайн, хотя централизованное решение гораздо проще, но когда клиент потребует 99,999% безотказной работы в SLA, это упростит нам жизнь. Нужно набрать команду разработчиков и создать собственное программное обеспечение, хотя Wordpress и Shopify гораздо проще, но когда клиентская база вырастет в 100 раз, это упростит нам жизнь. Нужно использовать дизайн на основе наследования типов, хотя композиция гораздо проще, но после 5 лет увеличения кодовой базы это упростит нам жизнь. Нужно написать код в C++ с кэшированием представлений, хотя Python-скрипт с прямыми запросами к Postgres гораздо проще, но при большом увеличении объёма данных это упростит нам жизнь.  Недавно я написал статью о воображаемых проблемах, которые люди придумывают себя со скуки, а не для пользы. Создание запаса на будущее обычно относится к этой категории. Я бы даже сказал, что это самая популярная ошибка в большинстве маленьких компаний."
tangro;Не пытайтесь предугадать завтрашние проблемы;https://habr.com/ru/company/infopulse/blog/421901/;"Ну или начните делать это правильно.  Если бы меня попросили указать на одну конкретную проблему, которая погубила больше всего программных продуктов, то я бы точно назвал тягу разработчиков к предвиденью далёкого будущего. Это может выражаться многими способами, но общая схема примерно следующая:  «Нам нужно реализовать решение {Х}, несмотря даже на то, что есть значительно более простое и подходящее нам сейчас решение {Y}, ведь когда в будущем произойдёт {Z}, то {X} сработает гораздо лучше, чем {Y}».   При этом точной информации о вероятности наступления события {Z} нет и быть не может.  Вот пара примеров:   Нам нужно использовать kubernetes и docker! Да, с текущей нагрузкой отлично справляется один сервер и его легко настроить и поддерживать, но ведь когда нам нужно будет дюжина серверов — будет легче их разворачивать с kubernetes и docker. Нам нужна архитектура распределенной обработки данных! Да, пока со всем справляется один средненький ПК, но когда у нас будет решение промышленного уровня и заказчики потребуют аптайм в пять девяток в SLA — мы будем к этому готовы. Нам нужно нанять команду разработчиков и создать сайт с нуля, не смотря на то, что значительно быстрее было бы развернуть что-то на базе wordpress, ведь когда у нас будет в 100 раз больше клиентов, чем сейчас, то wordpress станет не так удобен. Нам нужно использовать наследование вместо композиции, ведь через 5 лет кодовая база разрастётся так, что без этого будет никак. Нам нужно написать вот этот код на С++, не смотря на то, что на Python это будет в разы быстрее, ведь спустя годы он будет обрабатывать терабайты данных и Python может здесь не справится.  Недавно я писал статью о воображаемых проблемах — тех, решением которых люди развлекают себя, ведь их решать интереснее, чем реальные. Сюда же можно отнести и вот эти попытки предвидеть будущее. Даже можно сказать больше — это любимая воображаемая проблема большинства маленьких начинающих компаний."
AndreiYemelianov;Foreshadow: предвестник неприятностей?;https://habr.com/ru/company/selectel/blog/422137/; Текущий 2018 год интересен тем, что чуть ли не каждый месяц появляется информация о новых аппаратных уязвимостях: Spectre и Meltdown.  Совсем недавно — пару недель назад! — были опубликованы громкие новости об уязвимостях Foreshadow и L1Terminal Fault, которые, как сообщается, могут обойти даже механизм SGX (Sofware Guard Extensions), ранее считавшийся практически невзламываемым.  Насколько опасны эти уязвимости? Можно ли от них защититься и если можно, то как? Обо всём этом мы поговорим ниже.
eztiger;Зачем писать свой игровой движок?;https://habr.com/ru/company/socialquantum/blog/423175/;В декабре прошлого года, на конференции Games Gathering 2017, мы сделали доклад, в котором рассказали о том, надо ли компаниям, работающим в игровой индустрии, писать собственные движки.  
batmanXVII;Почему для инди раньше трава была зеленее;https://habr.com/ru/post/423421/;"Уверен, многие хабровчане любят продукцию независимых студий и разработчиков, или, в простонародье, инди-продукты. Наверняка, почти у всех при упоминании этого термина всплывают теплые воспоминания о какой-нибудь игре, которая создавалась вопреки законам, диктуемым рынком.   Но не приходила ли вам в голову мысль, что лучшие времена инди-разработки уже позади? Я хотел бы, чтобы эта мысль была ошибочной, но Google Trends по запросу «indie games» были беспощадны:    И подобную статистику можно увидеть почти в любом запросе, касающемся инди-индустрии. Также не редкостью стали статьи, о падениях средних доходов инди-разработчиков вроде этой. Под катом попробуем разобраться в причинах затухающей популярности инди."
ProductivityInside;Дайджест интересных материалов для мобильного разработчика #270 (10 — 16 сентября);https://habr.com/ru/company/productivity_inside/blog/423437/;На этой неделе мы видели презентацию новых iPhone, читали про 2ГИС на умных часах Apple, оценивали установки Fortnite на Android и процессы разработки в крупных компаниях, спрашивали про сервисы мобильной аналитики.  
PatientZero;Java для Playstation 2 — возможно ли это?;https://habr.com/ru/post/423751/;" Введение Этим проектом я хотел ответить на один вопрос: возможно ли написать Java API для Playstation 2 и создать на нём графическое демо. Не хочу раскрывать спойлеры, но ответом будет «да».  Несколько лет назад я начал проект Java Grinder, получающий скомпилированные файлы .class Java и фактически работающий в качестве дизассемблера. Но вместо того, чтобы дизассемблировать в ассемблерный код Java, он выполняет дизассемблирование в ассемблерный исходный код для реальных процессоров. Если файлу класса нужны другие файлы классов, то они тоже считываются и обрабатываются. Все вызовы методов API записываются в вывод, или как встроенный ассемблерный код, или как вызовы предварительно написанных функций, выполняющих предназначенную им задачу. "
m1rko;Моё разочарование в софте;https://habr.com/ru/post/423889/;" Суть разработки программного обеспечения — Нужно проделать 500 отверстий в стене, так что я сконструировал автоматическую дрель. В ней используются элегантные точные шестерни для непрерывной регулировки скорости и крутящего момента по мере необходимости. — Отлично, у неё идеальный вес. Загрузим 500 таких дрелей в пушку, которые мы сделали, и выстрелим в стену.  Я занимаюсь программированием уже 15 лет. Но в последнее время при разработке не принято думать об эффективности, простоте и совершенстве: вплоть до того, что мне становится грустно за свою карьеру и за IT-отрасль в целом.  Для примера, современные автомобили работают, скажем, на 98% от того, что физически позволяет нынешняя конструкция двигателя. Современная архитектура использует точно рассчитанное количество материала, чтобы выполнять свою функцию и оставаться в безопасности в данных условиях. Все самолёты сошлись к оптимальному размеру/форме/нагрузке и в основном выглядят одинаково.  Только в программном обеспечении считается нормальным, если программа работает на уровне 1% или даже 0,01% от возможной производительности. Ни у кого вроде нет возражений."
